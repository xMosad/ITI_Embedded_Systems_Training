
09-Keypad_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000028be  00002952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000a0  008000a0  00002992  2**0
                  ALLOC
  3 .stab         00001a04  00000000  00000000  00002994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e77  00000000  00000000  00004398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000534f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000054bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000918d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000995b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 10 	call	0x2154	; 0x2154 <main>
      8a:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_voidSetPinValue>:

#include "GPIO_Interface.h"
#include "GPIO_Private.h"

void GPIO_voidSetPinValue(u8 port_id , u8 pin , u8 value)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if (value == HIGH)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <GPIO_voidSetPinValue+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <GPIO_voidSetPinValue+0x100>
	{
		switch (port_id)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <GPIO_voidSetPinValue+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <GPIO_voidSetPinValue+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <GPIO_voidSetPinValue+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <GPIO_voidSetPinValue+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <GPIO_voidSetPinValue+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_PORTA , pin);
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <GPIO_voidSetPinValue+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <GPIO_voidSetPinValue+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_PORTB , pin);
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <GPIO_voidSetPinValue+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <GPIO_voidSetPinValue+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_PORTC , pin);
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <GPIO_voidSetPinValue+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <GPIO_voidSetPinValue+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_PORTD , pin);
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <GPIO_voidSetPinValue+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <GPIO_voidSetPinValue+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>

			default:
			break;
		}
	}
	else if (value == LOW)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <GPIO_voidSetPinValue+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
	{
		switch (port_id)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <GPIO_voidSetPinValue+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <GPIO_voidSetPinValue+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <GPIO_voidSetPinValue+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <GPIO_voidSetPinValue+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <GPIO_voidSetPinValue+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_voidSetPinValue+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_PORTA , pin);
     c8e:	ab e3       	ldi	r26, 0x3B	; 59
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e3       	ldi	r30, 0x3B	; 59
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <GPIO_voidSetPinValue+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <GPIO_voidSetPinValue+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_PORTB , pin);
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <GPIO_voidSetPinValue+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <GPIO_voidSetPinValue+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_PORTC , pin);
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <GPIO_voidSetPinValue+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <GPIO_voidSetPinValue+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_PORTD , pin);
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_voidSetPinValue+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_voidSetPinValue+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
	{
		/* Should not be here */
	}


}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <GPIO_voidSetPinDirection>:

void GPIO_voidSetPinDirection(u8 port_id , u8 pin , u8 dirc )
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if (dirc == OUTPUT)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <GPIO_voidSetPinDirection+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <GPIO_voidSetPinDirection+0x100>
	{
		switch (port_id)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <GPIO_voidSetPinDirection+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <GPIO_voidSetPinDirection+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <GPIO_voidSetPinDirection+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <GPIO_voidSetPinDirection+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <GPIO_voidSetPinDirection+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_DDRA , pin);
     da6:	aa e3       	ldi	r26, 0x3A	; 58
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ea e3       	ldi	r30, 0x3A	; 58
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <GPIO_voidSetPinDirection+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <GPIO_voidSetPinDirection+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_DDRB , pin);
     dce:	a7 e3       	ldi	r26, 0x37	; 55
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e7 e3       	ldi	r30, 0x37	; 55
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <GPIO_voidSetPinDirection+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <GPIO_voidSetPinDirection+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_DDRC , pin);
     df6:	a4 e3       	ldi	r26, 0x34	; 52
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e4 e3       	ldi	r30, 0x34	; 52
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <GPIO_voidSetPinDirection+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <GPIO_voidSetPinDirection+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_DDRD , pin);
     e1e:	a1 e3       	ldi	r26, 0x31	; 49
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e1 e3       	ldi	r30, 0x31	; 49
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <GPIO_voidSetPinDirection+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <GPIO_voidSetPinDirection+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>

			default:
			break;
		}
	}
	else if (dirc == INPUT)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <GPIO_voidSetPinDirection+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
	{
		switch (port_id)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <GPIO_voidSetPinDirection+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <GPIO_voidSetPinDirection+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <GPIO_voidSetPinDirection+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <GPIO_voidSetPinDirection+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <GPIO_voidSetPinDirection+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <GPIO_voidSetPinDirection+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_DDRA , pin);
     e8e:	aa e3       	ldi	r26, 0x3A	; 58
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e3       	ldi	r30, 0x3A	; 58
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <GPIO_voidSetPinDirection+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <GPIO_voidSetPinDirection+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_DDRB , pin);
     eb8:	a7 e3       	ldi	r26, 0x37	; 55
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e7 e3       	ldi	r30, 0x37	; 55
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <GPIO_voidSetPinDirection+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <GPIO_voidSetPinDirection+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_DDRC , pin);
     ee2:	a4 e3       	ldi	r26, 0x34	; 52
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e4 e3       	ldi	r30, 0x34	; 52
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_voidSetPinDirection+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_voidSetPinDirection+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_DDRD , pin);
     f0c:	a1 e3       	ldi	r26, 0x31	; 49
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e1 e3       	ldi	r30, 0x31	; 49
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_voidSetPinDirection+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_voidSetPinDirection+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
	}
	else
	{
		/* Should not be here */
	}
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <GPIO_voidSetPortValue>:

void GPIO_voidSetPortValue(u8 port_id , u8 value)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_voidSetPortValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <GPIO_voidSetPortValue+0x8>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_id){
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3c 83       	std	Y+4, r19	; 0x04
     f5e:	2b 83       	std	Y+3, r18	; 0x03
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	d1 f0       	breq	.+52     	; 0xf9e <GPIO_voidSetPortValue+0x58>
     f6a:	2b 81       	ldd	r18, Y+3	; 0x03
     f6c:	3c 81       	ldd	r19, Y+4	; 0x04
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	2c f4       	brge	.+10     	; 0xf7e <GPIO_voidSetPortValue+0x38>
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	61 f0       	breq	.+24     	; 0xf94 <GPIO_voidSetPortValue+0x4e>
     f7c:	1e c0       	rjmp	.+60     	; 0xfba <GPIO_voidSetPortValue+0x74>
     f7e:	2b 81       	ldd	r18, Y+3	; 0x03
     f80:	3c 81       	ldd	r19, Y+4	; 0x04
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	81 f0       	breq	.+32     	; 0xfa8 <GPIO_voidSetPortValue+0x62>
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	81 f0       	breq	.+32     	; 0xfb2 <GPIO_voidSetPortValue+0x6c>
     f92:	13 c0       	rjmp	.+38     	; 0xfba <GPIO_voidSetPortValue+0x74>
		case PORTA :
			GPIO_PORTA = value ;
     f94:	eb e3       	ldi	r30, 0x3B	; 59
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	80 83       	st	Z, r24
     f9c:	0e c0       	rjmp	.+28     	; 0xfba <GPIO_voidSetPortValue+0x74>
			break;

		case PORTB :
			GPIO_PORTB = value ;
     f9e:	e8 e3       	ldi	r30, 0x38	; 56
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <GPIO_voidSetPortValue+0x74>
			break;

		case PORTC :
			GPIO_PORTC = value ;
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	80 83       	st	Z, r24
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <GPIO_voidSetPortValue+0x74>
			break;

		case PORTD :
			GPIO_PORTD = value ;
     fb2:	e2 e3       	ldi	r30, 0x32	; 50
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <GPIO_voidSetPortDirection>:

void GPIO_voidSetPortDirection(u8 port_id , u8 dirc)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <GPIO_voidSetPortDirection+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <GPIO_voidSetPortDirection+0x8>
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <GPIO_voidSetPortDirection+0xa>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	6a 83       	std	Y+2, r22	; 0x02
	if (dirc == OUTPUT)
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	99 f5       	brne	.+102    	; 0x1046 <GPIO_voidSetPortDirection+0x7e>
	{
		switch (port_id){
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3e 83       	std	Y+6, r19	; 0x06
     fe8:	2d 83       	std	Y+5, r18	; 0x05
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	d1 f0       	breq	.+52     	; 0x1028 <GPIO_voidSetPortDirection+0x60>
     ff4:	2d 81       	ldd	r18, Y+5	; 0x05
     ff6:	3e 81       	ldd	r19, Y+6	; 0x06
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	2c f4       	brge	.+10     	; 0x1008 <GPIO_voidSetPortDirection+0x40>
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	61 f0       	breq	.+24     	; 0x101e <GPIO_voidSetPortDirection+0x56>
    1006:	50 c0       	rjmp	.+160    	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
    1008:	2d 81       	ldd	r18, Y+5	; 0x05
    100a:	3e 81       	ldd	r19, Y+6	; 0x06
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	81 f0       	breq	.+32     	; 0x1032 <GPIO_voidSetPortDirection+0x6a>
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	81 f0       	breq	.+32     	; 0x103c <GPIO_voidSetPortDirection+0x74>
    101c:	45 c0       	rjmp	.+138    	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 255;
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	80 83       	st	Z, r24
    1026:	40 c0       	rjmp	.+128    	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTB :
				GPIO_DDRB = 255;
    1028:	e7 e3       	ldi	r30, 0x37	; 55
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	80 83       	st	Z, r24
    1030:	3b c0       	rjmp	.+118    	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTC :
				GPIO_DDRC = 255;
    1032:	e4 e3       	ldi	r30, 0x34	; 52
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	80 83       	st	Z, r24
    103a:	36 c0       	rjmp	.+108    	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTD :
				GPIO_DDRD = 255;
    103c:	e1 e3       	ldi	r30, 0x31	; 49
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	80 83       	st	Z, r24
    1044:	31 c0       	rjmp	.+98     	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
				break;
			default:
				break;
		}
	}
	else if (dirc == INPUT)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 23       	and	r24, r24
    104a:	71 f5       	brne	.+92     	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
	{
		switch (port_id){
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3c 83       	std	Y+4, r19	; 0x04
    1054:	2b 83       	std	Y+3, r18	; 0x03
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	91 05       	cpc	r25, r1
    105e:	c9 f0       	breq	.+50     	; 0x1092 <GPIO_voidSetPortDirection+0xca>
    1060:	2b 81       	ldd	r18, Y+3	; 0x03
    1062:	3c 81       	ldd	r19, Y+4	; 0x04
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	2c f4       	brge	.+10     	; 0x1074 <GPIO_voidSetPortDirection+0xac>
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	61 f0       	breq	.+24     	; 0x108a <GPIO_voidSetPortDirection+0xc2>
    1072:	1a c0       	rjmp	.+52     	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
    1074:	2b 81       	ldd	r18, Y+3	; 0x03
    1076:	3c 81       	ldd	r19, Y+4	; 0x04
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	71 f0       	breq	.+28     	; 0x109a <GPIO_voidSetPortDirection+0xd2>
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	91 05       	cpc	r25, r1
    1086:	69 f0       	breq	.+26     	; 0x10a2 <GPIO_voidSetPortDirection+0xda>
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 0;
    108a:	ea e3       	ldi	r30, 0x3A	; 58
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	10 82       	st	Z, r1
    1090:	0b c0       	rjmp	.+22     	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTB :
				GPIO_DDRB = 0;
    1092:	e7 e3       	ldi	r30, 0x37	; 55
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	10 82       	st	Z, r1
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTC :
				GPIO_DDRC = 0;
    109a:	e4 e3       	ldi	r30, 0x34	; 52
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	10 82       	st	Z, r1
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTD :
				GPIO_DDRD = 0;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	10 82       	st	Z, r1
		}
	}
	else {

	}
}
    10a8:	26 96       	adiw	r28, 0x06	; 6
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue(u8 port_id , u8 pin)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_u8GetPinValue+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <GPIO_u8GetPinValue+0x8>
    10c2:	0f 92       	push	r0
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 value ;
	switch (port_id)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3d 83       	std	Y+5, r19	; 0x05
    10d4:	2c 83       	std	Y+4, r18	; 0x04
    10d6:	4c 81       	ldd	r20, Y+4	; 0x04
    10d8:	5d 81       	ldd	r21, Y+5	; 0x05
    10da:	41 30       	cpi	r20, 0x01	; 1
    10dc:	51 05       	cpc	r21, r1
    10de:	41 f1       	breq	.+80     	; 0x1130 <GPIO_u8GetPinValue+0x76>
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <GPIO_u8GetPinValue+0x3c>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_u8GetPinValue+0x52>
    10f4:	52 c0       	rjmp	.+164    	; 0x119a <GPIO_u8GetPinValue+0xe0>
    10f6:	4c 81       	ldd	r20, Y+4	; 0x04
    10f8:	5d 81       	ldd	r21, Y+5	; 0x05
    10fa:	42 30       	cpi	r20, 0x02	; 2
    10fc:	51 05       	cpc	r21, r1
    10fe:	51 f1       	breq	.+84     	; 0x1154 <GPIO_u8GetPinValue+0x9a>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	b9 f1       	breq	.+110    	; 0x1178 <GPIO_u8GetPinValue+0xbe>
    110a:	47 c0       	rjmp	.+142    	; 0x119a <GPIO_u8GetPinValue+0xe0>
	{
		case PORTA :
		value = GET_BIT(GPIO_PINA , pin);
    110c:	e9 e3       	ldi	r30, 0x39	; 57
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_u8GetPinValue+0x6a>
    1120:	55 95       	asr	r21
    1122:	47 95       	ror	r20
    1124:	8a 95       	dec	r24
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_u8GetPinValue+0x66>
    1128:	ca 01       	movw	r24, r20
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	35 c0       	rjmp	.+106    	; 0x119a <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTB :
		value = GET_BIT(GPIO_PINB , pin);
    1130:	e6 e3       	ldi	r30, 0x36	; 54
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_u8GetPinValue+0x8e>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_u8GetPinValue+0x8a>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	23 c0       	rjmp	.+70     	; 0x119a <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTC :
		value = GET_BIT(GPIO_PINC , pin);
    1154:	e3 e3       	ldi	r30, 0x33	; 51
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <GPIO_u8GetPinValue+0xb2>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <GPIO_u8GetPinValue+0xae>
    1170:	ca 01       	movw	r24, r20
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	11 c0       	rjmp	.+34     	; 0x119a <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTD :
		value = GET_BIT(GPIO_PIND , pin);
    1178:	e0 e3       	ldi	r30, 0x30	; 48
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_u8GetPinValue+0xd6>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_u8GetPinValue+0xd2>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
		break;

		default:
		break;
	}
	return value ;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <KPD_voidInitPins>:
#include "KPD_Private.h"
#include "KPD_Cfg.h"


void KPD_voidInitPins(void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <KPD_voidInitPins+0x6>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	/* Init Rows */
	for (u8 loc_counter = 0 ; loc_counter < ROWS_NUMBER ; loc_counter++ )
    11b6:	1a 82       	std	Y+2, r1	; 0x02
    11b8:	29 c0       	rjmp	.+82     	; 0x120c <KPD_voidInitPins+0x60>
	{
		/* Set Rows as output */
		GPIO_voidSetPinDirection(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,OUTPUT );
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	fc 01       	movw	r30, r24
    11c2:	e1 57       	subi	r30, 0x71	; 113
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	20 81       	ld	r18, Z
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	fc 01       	movw	r30, r24
    11d0:	ed 56       	subi	r30, 0x6D	; 109
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	90 81       	ld	r25, Z
    11d6:	82 2f       	mov	r24, r18
    11d8:	69 2f       	mov	r22, r25
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_voidSetPinDirection>
		/* Init Rows with High */
		GPIO_voidSetPinValue(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,HIGH );
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	fc 01       	movw	r30, r24
    11e8:	e1 57       	subi	r30, 0x71	; 113
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	20 81       	ld	r18, Z
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	fc 01       	movw	r30, r24
    11f6:	ed 56       	subi	r30, 0x6D	; 109
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	90 81       	ld	r25, Z
    11fc:	82 2f       	mov	r24, r18
    11fe:	69 2f       	mov	r22, r25
    1200:	41 e0       	ldi	r20, 0x01	; 1
    1202:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>


void KPD_voidInitPins(void)
{
	/* Init Rows */
	for (u8 loc_counter = 0 ; loc_counter < ROWS_NUMBER ; loc_counter++ )
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	8a 83       	std	Y+2, r24	; 0x02
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	a0 f2       	brcs	.-88     	; 0x11ba <KPD_voidInitPins+0xe>
		/* Init Rows with High */
		GPIO_voidSetPinValue(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,HIGH );
	}

	/* Init Columns */
	for (u8 loc_counter = 0 ; loc_counter < COLUMNS_NUMBER ; loc_counter++)
    1212:	19 82       	std	Y+1, r1	; 0x01
    1214:	29 c0       	rjmp	.+82     	; 0x1268 <KPD_voidInitPins+0xbc>
	{
		/* Set columns as input*/
		GPIO_voidSetPinDirection(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,INPUT );
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	fc 01       	movw	r30, r24
    121e:	e9 56       	subi	r30, 0x69	; 105
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	20 81       	ld	r18, Z
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	fc 01       	movw	r30, r24
    122c:	e5 56       	subi	r30, 0x65	; 101
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	90 81       	ld	r25, Z
    1232:	82 2f       	mov	r24, r18
    1234:	69 2f       	mov	r22, r25
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_voidSetPinDirection>
		/* Enable pull up*/
		GPIO_voidSetPinValue(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,HIGH );
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	fc 01       	movw	r30, r24
    1244:	e9 56       	subi	r30, 0x69	; 105
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	20 81       	ld	r18, Z
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	fc 01       	movw	r30, r24
    1252:	e5 56       	subi	r30, 0x65	; 101
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	90 81       	ld	r25, Z
    1258:	82 2f       	mov	r24, r18
    125a:	69 2f       	mov	r22, r25
    125c:	41 e0       	ldi	r20, 0x01	; 1
    125e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>
		/* Init Rows with High */
		GPIO_voidSetPinValue(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,HIGH );
	}

	/* Init Columns */
	for (u8 loc_counter = 0 ; loc_counter < COLUMNS_NUMBER ; loc_counter++)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	84 30       	cpi	r24, 0x04	; 4
    126c:	a0 f2       	brcs	.-88     	; 0x1216 <KPD_voidInitPins+0x6a>
		/* Set columns as input*/
		GPIO_voidSetPinDirection(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,INPUT );
		/* Enable pull up*/
		GPIO_voidSetPinValue(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,HIGH );
	}
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	62 97       	sbiw	r28, 0x12	; 18
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
	s8 loc_pressed_key = 0 ;
    128c:	1a 8a       	std	Y+18, r1	; 0x12
	u8 loc_keyState ;

	for (u8 loc_row = 0 ; loc_row < ROWS_NUMBER ; loc_row++ )
    128e:	18 8a       	std	Y+16, r1	; 0x10
    1290:	e3 c0       	rjmp	.+454    	; 0x1458 <KPD_u8GetPressedKey+0x1e0>
	{
		/* Activate one row */
		GPIO_voidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , LOW);
    1292:	88 89       	ldd	r24, Y+16	; 0x10
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	fc 01       	movw	r30, r24
    129a:	e1 57       	subi	r30, 0x71	; 113
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	20 81       	ld	r18, Z
    12a0:	88 89       	ldd	r24, Y+16	; 0x10
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	fc 01       	movw	r30, r24
    12a8:	ed 56       	subi	r30, 0x6D	; 109
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	90 81       	ld	r25, Z
    12ae:	82 2f       	mov	r24, r18
    12b0:	69 2f       	mov	r22, r25
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>

		/* Check on columns */
		for (u8 loc_col = 0 ; loc_col < COLUMNS_NUMBER ; loc_col++ )
    12b8:	1f 86       	std	Y+15, r1	; 0x0f
    12ba:	b4 c0       	rjmp	.+360    	; 0x1424 <KPD_u8GetPressedKey+0x1ac>
		{
			loc_keyState = GPIO_u8GetPinValue(KPD_coloumsPort[loc_col] ,KPD_coloumsPins[loc_col] );
    12bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fc 01       	movw	r30, r24
    12c4:	e9 56       	subi	r30, 0x69	; 105
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	20 81       	ld	r18, Z
    12ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	fc 01       	movw	r30, r24
    12d2:	e5 56       	subi	r30, 0x65	; 101
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	90 81       	ld	r25, Z
    12d8:	82 2f       	mov	r24, r18
    12da:	69 2f       	mov	r22, r25
    12dc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_u8GetPinValue>
    12e0:	89 8b       	std	Y+17, r24	; 0x11
			/* Check on column */
			if (loc_keyState == 0)
    12e2:	89 89       	ldd	r24, Y+17	; 0x11
    12e4:	88 23       	and	r24, r24
    12e6:	31 f5       	brne	.+76     	; 0x1334 <KPD_u8GetPressedKey+0xbc>
			{
				loc_pressed_key = KPD_SwitchVal[loc_row][loc_col];
    12e8:	88 89       	ldd	r24, Y+16	; 0x10
    12ea:	48 2f       	mov	r20, r24
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	ca 01       	movw	r24, r20
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	82 0f       	add	r24, r18
    1300:	93 1f       	adc	r25, r19
    1302:	fc 01       	movw	r30, r24
    1304:	e1 58       	subi	r30, 0x81	; 129
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	8a 8b       	std	Y+18, r24	; 0x12
    130c:	13 c0       	rjmp	.+38     	; 0x1334 <KPD_u8GetPressedKey+0xbc>
			}

			/* Wait to release the key */
			while (loc_keyState == 0)
			{
				loc_keyState = GPIO_u8GetPinValue(KPD_coloumsPort[loc_col] ,KPD_coloumsPins[loc_col] );
    130e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	fc 01       	movw	r30, r24
    1316:	e9 56       	subi	r30, 0x69	; 105
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	20 81       	ld	r18, Z
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	e5 56       	subi	r30, 0x65	; 101
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	90 81       	ld	r25, Z
    132a:	82 2f       	mov	r24, r18
    132c:	69 2f       	mov	r22, r25
    132e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GPIO_u8GetPinValue>
    1332:	89 8b       	std	Y+17, r24	; 0x11
			{
				loc_pressed_key = KPD_SwitchVal[loc_row][loc_col];
			}

			/* Wait to release the key */
			while (loc_keyState == 0)
    1334:	89 89       	ldd	r24, Y+17	; 0x11
    1336:	88 23       	and	r24, r24
    1338:	51 f3       	breq	.-44     	; 0x130e <KPD_u8GetPressedKey+0x96>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a0 e2       	ldi	r26, 0x20	; 32
    1340:	b1 e4       	ldi	r27, 0x41	; 65
    1342:	8b 87       	std	Y+11, r24	; 0x0b
    1344:	9c 87       	std	Y+12, r25	; 0x0c
    1346:	ad 87       	std	Y+13, r26	; 0x0d
    1348:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134a:	6b 85       	ldd	r22, Y+11	; 0x0b
    134c:	7c 85       	ldd	r23, Y+12	; 0x0c
    134e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1350:	9e 85       	ldd	r25, Y+14	; 0x0e
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	4a ef       	ldi	r20, 0xFA	; 250
    1358:	54 e4       	ldi	r21, 0x44	; 68
    135a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	8f 83       	std	Y+7, r24	; 0x07
    1364:	98 87       	std	Y+8, r25	; 0x08
    1366:	a9 87       	std	Y+9, r26	; 0x09
    1368:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    136a:	6f 81       	ldd	r22, Y+7	; 0x07
    136c:	78 85       	ldd	r23, Y+8	; 0x08
    136e:	89 85       	ldd	r24, Y+9	; 0x09
    1370:	9a 85       	ldd	r25, Y+10	; 0x0a
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e8       	ldi	r20, 0x80	; 128
    1378:	5f e3       	ldi	r21, 0x3F	; 63
    137a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137e:	88 23       	and	r24, r24
    1380:	2c f4       	brge	.+10     	; 0x138c <KPD_u8GetPressedKey+0x114>
		__ticks = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	3f c0       	rjmp	.+126    	; 0x140a <KPD_u8GetPressedKey+0x192>
	else if (__tmp > 65535)
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	4c f5       	brge	.+82     	; 0x13f6 <KPD_u8GetPressedKey+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e2       	ldi	r20, 0x20	; 32
    13b2:	51 e4       	ldi	r21, 0x41	; 65
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	bc 01       	movw	r22, r24
    13be:	cd 01       	movw	r24, r26
    13c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	9e 83       	std	Y+6, r25	; 0x06
    13ca:	8d 83       	std	Y+5, r24	; 0x05
    13cc:	0f c0       	rjmp	.+30     	; 0x13ec <KPD_u8GetPressedKey+0x174>
    13ce:	88 ec       	ldi	r24, 0xC8	; 200
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9c 83       	std	Y+4, r25	; 0x04
    13d4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <KPD_u8GetPressedKey+0x162>
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	69 f7       	brne	.-38     	; 0x13ce <KPD_u8GetPressedKey+0x156>
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <KPD_u8GetPressedKey+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f6:	6f 81       	ldd	r22, Y+7	; 0x07
    13f8:	78 85       	ldd	r23, Y+8	; 0x08
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	9a 83       	std	Y+2, r25	; 0x02
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <KPD_u8GetPressedKey+0x19e>
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Activate one row */
		GPIO_voidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , LOW);

		/* Check on columns */
		for (u8 loc_col = 0 ; loc_col < COLUMNS_NUMBER ; loc_col++ )
    141e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	8f 87       	std	Y+15, r24	; 0x0f
    1424:	8f 85       	ldd	r24, Y+15	; 0x0f
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	08 f4       	brcc	.+2      	; 0x142c <KPD_u8GetPressedKey+0x1b4>
    142a:	48 cf       	rjmp	.-368    	; 0x12bc <KPD_u8GetPressedKey+0x44>
			_delay_ms(10);

		}

		/* Deactivate the row */
		GPIO_voidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , HIGH);
    142c:	88 89       	ldd	r24, Y+16	; 0x10
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	fc 01       	movw	r30, r24
    1434:	e1 57       	subi	r30, 0x71	; 113
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	20 81       	ld	r18, Z
    143a:	88 89       	ldd	r24, Y+16	; 0x10
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	fc 01       	movw	r30, r24
    1442:	ed 56       	subi	r30, 0x6D	; 109
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	90 81       	ld	r25, Z
    1448:	82 2f       	mov	r24, r18
    144a:	69 2f       	mov	r22, r25
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>
u8 KPD_u8GetPressedKey(void)
{
	s8 loc_pressed_key = 0 ;
	u8 loc_keyState ;

	for (u8 loc_row = 0 ; loc_row < ROWS_NUMBER ; loc_row++ )
    1452:	88 89       	ldd	r24, Y+16	; 0x10
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	88 8b       	std	Y+16, r24	; 0x10
    1458:	88 89       	ldd	r24, Y+16	; 0x10
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	08 f4       	brcc	.+2      	; 0x1460 <KPD_u8GetPressedKey+0x1e8>
    145e:	19 cf       	rjmp	.-462    	; 0x1292 <KPD_u8GetPressedKey+0x1a>
		}

		/* Deactivate the row */
		GPIO_voidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , HIGH);
	}
	return loc_pressed_key ;
    1460:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1462:	62 96       	adiw	r28, 0x12	; 18
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <LCD_voidInit>:
#include "LCD_Private.h"
#include "LCD_Cfg.h"


void LCD_voidInit(void)
{
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	c4 55       	subi	r28, 0x54	; 84
    1482:	d0 40       	sbci	r29, 0x00	; 0
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the Pins */
	GPIO_voidSetPinDirection(LCD_RS_PORT , LCD_RS_PIN , OUTPUT);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_RW_PORT ,LCD_RW_PIN , OUTPUT );
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_E_PORT ,LCD_E_PIN , OUTPUT );
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	62 e0       	ldi	r22, 0x02	; 2
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_voidSetPinDirection>
	GPIO_voidSetPortDirection(LCD_DATA_PORT , OUTPUT);
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <GPIO_voidSetPortDirection>
    14b4:	fe 01       	movw	r30, r28
    14b6:	ef 5a       	subi	r30, 0xAF	; 175
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 ef       	ldi	r26, 0xF0	; 240
    14c0:	b1 e4       	ldi	r27, 0x41	; 65
    14c2:	80 83       	st	Z, r24
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	a2 83       	std	Z+2, r26	; 0x02
    14c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	8e 01       	movw	r16, r28
    14cc:	03 5b       	subi	r16, 0xB3	; 179
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	fe 01       	movw	r30, r28
    14d2:	ef 5a       	subi	r30, 0xAF	; 175
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a ef       	ldi	r20, 0xFA	; 250
    14e4:	54 e4       	ldi	r21, 0x44	; 68
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	f8 01       	movw	r30, r16
    14f0:	80 83       	st	Z, r24
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	a2 83       	std	Z+2, r26	; 0x02
    14f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14f8:	fe 01       	movw	r30, r28
    14fa:	e3 5b       	subi	r30, 0xB3	; 179
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	44 f4       	brge	.+16     	; 0x1526 <LCD_voidInit+0xb2>
		__ticks = 1;
    1516:	fe 01       	movw	r30, r28
    1518:	e5 5b       	subi	r30, 0xB5	; 181
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
    1524:	64 c0       	rjmp	.+200    	; 0x15ee <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1526:	fe 01       	movw	r30, r28
    1528:	e3 5b       	subi	r30, 0xB3	; 179
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	0c f0       	brlt	.+2      	; 0x1546 <LCD_voidInit+0xd2>
    1544:	43 c0       	rjmp	.+134    	; 0x15cc <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1546:	fe 01       	movw	r30, r28
    1548:	ef 5a       	subi	r30, 0xAF	; 175
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	8e 01       	movw	r16, r28
    1566:	05 5b       	subi	r16, 0xB5	; 181
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	f8 01       	movw	r30, r16
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
    157c:	1f c0       	rjmp	.+62     	; 0x15bc <LCD_voidInit+0x148>
    157e:	fe 01       	movw	r30, r28
    1580:	e7 5b       	subi	r30, 0xB7	; 183
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	88 ec       	ldi	r24, 0xC8	; 200
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
    158c:	fe 01       	movw	r30, r28
    158e:	e7 5b       	subi	r30, 0xB7	; 183
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_voidInit+0x122>
    159a:	fe 01       	movw	r30, r28
    159c:	e7 5b       	subi	r30, 0xB7	; 183
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	de 01       	movw	r26, r28
    15a6:	a5 5b       	subi	r26, 0xB5	; 181
    15a8:	bf 4f       	sbci	r27, 0xFF	; 255
    15aa:	fe 01       	movw	r30, r28
    15ac:	e5 5b       	subi	r30, 0xB5	; 181
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	11 96       	adiw	r26, 0x01	; 1
    15b8:	9c 93       	st	X, r25
    15ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15bc:	fe 01       	movw	r30, r28
    15be:	e5 5b       	subi	r30, 0xB5	; 181
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	d1 f6       	brne	.-76     	; 0x157e <LCD_voidInit+0x10a>
    15ca:	27 c0       	rjmp	.+78     	; 0x161a <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	8e 01       	movw	r16, r28
    15ce:	05 5b       	subi	r16, 0xB5	; 181
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	fe 01       	movw	r30, r28
    15d4:	e3 5b       	subi	r30, 0xB3	; 179
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	60 81       	ld	r22, Z
    15da:	71 81       	ldd	r23, Z+1	; 0x01
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	f8 01       	movw	r30, r16
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	de 01       	movw	r26, r28
    15f0:	a9 5b       	subi	r26, 0xB9	; 185
    15f2:	bf 4f       	sbci	r27, 0xFF	; 255
    15f4:	fe 01       	movw	r30, r28
    15f6:	e5 5b       	subi	r30, 0xB5	; 181
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	8d 93       	st	X+, r24
    1600:	9c 93       	st	X, r25
    1602:	fe 01       	movw	r30, r28
    1604:	e9 5b       	subi	r30, 0xB9	; 185
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_voidInit+0x198>
    1610:	fe 01       	movw	r30, r28
    1612:	e9 5b       	subi	r30, 0xB9	; 185
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	80 83       	st	Z, r24

	_delay_ms(30);

	/* Send command function set */
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    161a:	88 e3       	ldi	r24, 0x38	; 56
    161c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
    1620:	fe 01       	movw	r30, r28
    1622:	ed 5b       	subi	r30, 0xBD	; 189
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 e2       	ldi	r26, 0x20	; 32
    162c:	b1 e4       	ldi	r27, 0x41	; 65
    162e:	80 83       	st	Z, r24
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	a2 83       	std	Z+2, r26	; 0x02
    1634:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1636:	8e 01       	movw	r16, r28
    1638:	01 5c       	subi	r16, 0xC1	; 193
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	fe 01       	movw	r30, r28
    163e:	ed 5b       	subi	r30, 0xBD	; 189
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	f8 01       	movw	r30, r16
    165c:	80 83       	st	Z, r24
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	a2 83       	std	Z+2, r26	; 0x02
    1662:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1664:	fe 01       	movw	r30, r28
    1666:	ff 96       	adiw	r30, 0x3f	; 63
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	5f e3       	ldi	r21, 0x3F	; 63
    1678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <LCD_voidInit+0x216>
		__ticks = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9e af       	std	Y+62, r25	; 0x3e
    1686:	8d af       	std	Y+61, r24	; 0x3d
    1688:	46 c0       	rjmp	.+140    	; 0x1716 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    168a:	fe 01       	movw	r30, r28
    168c:	ff 96       	adiw	r30, 0x3f	; 63
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	64 f5       	brge	.+88     	; 0x16fe <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	fe 01       	movw	r30, r28
    16a8:	ed 5b       	subi	r30, 0xBD	; 189
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9e af       	std	Y+62, r25	; 0x3e
    16d2:	8d af       	std	Y+61, r24	; 0x3d
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <LCD_voidInit+0x280>
    16d6:	88 ec       	ldi	r24, 0xC8	; 200
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c af       	std	Y+60, r25	; 0x3c
    16dc:	8b af       	std	Y+59, r24	; 0x3b
    16de:	8b ad       	ldd	r24, Y+59	; 0x3b
    16e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <LCD_voidInit+0x26e>
    16e6:	9c af       	std	Y+60, r25	; 0x3c
    16e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	9e af       	std	Y+62, r25	; 0x3e
    16f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	69 f7       	brne	.-38     	; 0x16d6 <LCD_voidInit+0x262>
    16fc:	16 c0       	rjmp	.+44     	; 0x172a <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fe:	fe 01       	movw	r30, r28
    1700:	ff 96       	adiw	r30, 0x3f	; 63
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e af       	std	Y+62, r25	; 0x3e
    1714:	8d af       	std	Y+61, r24	; 0x3d
    1716:	8d ad       	ldd	r24, Y+61	; 0x3d
    1718:	9e ad       	ldd	r25, Y+62	; 0x3e
    171a:	9a af       	std	Y+58, r25	; 0x3a
    171c:	89 af       	std	Y+57, r24	; 0x39
    171e:	89 ad       	ldd	r24, Y+57	; 0x39
    1720:	9a ad       	ldd	r25, Y+58	; 0x3a
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_voidInit+0x2ae>
    1726:	9a af       	std	Y+58, r25	; 0x3a
    1728:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);

	/* Send command dispaly on */
	LCD_voidSendCommand(lcd_DisplayOn);
    172a:	8c e0       	ldi	r24, 0x0C	; 12
    172c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a0 e2       	ldi	r26, 0x20	; 32
    1736:	b1 e4       	ldi	r27, 0x41	; 65
    1738:	8d ab       	std	Y+53, r24	; 0x35
    173a:	9e ab       	std	Y+54, r25	; 0x36
    173c:	af ab       	std	Y+55, r26	; 0x37
    173e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1740:	6d a9       	ldd	r22, Y+53	; 0x35
    1742:	7e a9       	ldd	r23, Y+54	; 0x36
    1744:	8f a9       	ldd	r24, Y+55	; 0x37
    1746:	98 ad       	ldd	r25, Y+56	; 0x38
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a ef       	ldi	r20, 0xFA	; 250
    174e:	54 e4       	ldi	r21, 0x44	; 68
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	89 ab       	std	Y+49, r24	; 0x31
    175a:	9a ab       	std	Y+50, r25	; 0x32
    175c:	ab ab       	std	Y+51, r26	; 0x33
    175e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1760:	69 a9       	ldd	r22, Y+49	; 0x31
    1762:	7a a9       	ldd	r23, Y+50	; 0x32
    1764:	8b a9       	ldd	r24, Y+51	; 0x33
    1766:	9c a9       	ldd	r25, Y+52	; 0x34
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1774:	88 23       	and	r24, r24
    1776:	2c f4       	brge	.+10     	; 0x1782 <LCD_voidInit+0x30e>
		__ticks = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	98 ab       	std	Y+48, r25	; 0x30
    177e:	8f a7       	std	Y+47, r24	; 0x2f
    1780:	3f c0       	rjmp	.+126    	; 0x1800 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1782:	69 a9       	ldd	r22, Y+49	; 0x31
    1784:	7a a9       	ldd	r23, Y+50	; 0x32
    1786:	8b a9       	ldd	r24, Y+51	; 0x33
    1788:	9c a9       	ldd	r25, Y+52	; 0x34
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1796:	18 16       	cp	r1, r24
    1798:	4c f5       	brge	.+82     	; 0x17ec <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179a:	6d a9       	ldd	r22, Y+53	; 0x35
    179c:	7e a9       	ldd	r23, Y+54	; 0x36
    179e:	8f a9       	ldd	r24, Y+55	; 0x37
    17a0:	98 ad       	ldd	r25, Y+56	; 0x38
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	98 ab       	std	Y+48, r25	; 0x30
    17c0:	8f a7       	std	Y+47, r24	; 0x2f
    17c2:	0f c0       	rjmp	.+30     	; 0x17e2 <LCD_voidInit+0x36e>
    17c4:	88 ec       	ldi	r24, 0xC8	; 200
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9e a7       	std	Y+46, r25	; 0x2e
    17ca:	8d a7       	std	Y+45, r24	; 0x2d
    17cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    17ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_voidInit+0x35c>
    17d4:	9e a7       	std	Y+46, r25	; 0x2e
    17d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17da:	98 a9       	ldd	r25, Y+48	; 0x30
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	98 ab       	std	Y+48, r25	; 0x30
    17e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e4:	98 a9       	ldd	r25, Y+48	; 0x30
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	69 f7       	brne	.-38     	; 0x17c4 <LCD_voidInit+0x350>
    17ea:	14 c0       	rjmp	.+40     	; 0x1814 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ec:	69 a9       	ldd	r22, Y+49	; 0x31
    17ee:	7a a9       	ldd	r23, Y+50	; 0x32
    17f0:	8b a9       	ldd	r24, Y+51	; 0x33
    17f2:	9c a9       	ldd	r25, Y+52	; 0x34
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	98 ab       	std	Y+48, r25	; 0x30
    17fe:	8f a7       	std	Y+47, r24	; 0x2f
    1800:	8f a5       	ldd	r24, Y+47	; 0x2f
    1802:	98 a9       	ldd	r25, Y+48	; 0x30
    1804:	9c a7       	std	Y+44, r25	; 0x2c
    1806:	8b a7       	std	Y+43, r24	; 0x2b
    1808:	8b a5       	ldd	r24, Y+43	; 0x2b
    180a:	9c a5       	ldd	r25, Y+44	; 0x2c
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_voidInit+0x398>
    1810:	9c a7       	std	Y+44, r25	; 0x2c
    1812:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	/* Clear the display  */
	LCD_voidSendCommand(lcd_Clear);
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 e2       	ldi	r26, 0x20	; 32
    1820:	b1 e4       	ldi	r27, 0x41	; 65
    1822:	8f a3       	std	Y+39, r24	; 0x27
    1824:	98 a7       	std	Y+40, r25	; 0x28
    1826:	a9 a7       	std	Y+41, r26	; 0x29
    1828:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	6f a1       	ldd	r22, Y+39	; 0x27
    182c:	78 a5       	ldd	r23, Y+40	; 0x28
    182e:	89 a5       	ldd	r24, Y+41	; 0x29
    1830:	9a a5       	ldd	r25, Y+42	; 0x2a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a ef       	ldi	r20, 0xFA	; 250
    1838:	54 e4       	ldi	r21, 0x44	; 68
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8b a3       	std	Y+35, r24	; 0x23
    1844:	9c a3       	std	Y+36, r25	; 0x24
    1846:	ad a3       	std	Y+37, r26	; 0x25
    1848:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    184a:	6b a1       	ldd	r22, Y+35	; 0x23
    184c:	7c a1       	ldd	r23, Y+36	; 0x24
    184e:	8d a1       	ldd	r24, Y+37	; 0x25
    1850:	9e a1       	ldd	r25, Y+38	; 0x26
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <LCD_voidInit+0x3f8>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9a a3       	std	Y+34, r25	; 0x22
    1868:	89 a3       	std	Y+33, r24	; 0x21
    186a:	3f c0       	rjmp	.+126    	; 0x18ea <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    186c:	6b a1       	ldd	r22, Y+35	; 0x23
    186e:	7c a1       	ldd	r23, Y+36	; 0x24
    1870:	8d a1       	ldd	r24, Y+37	; 0x25
    1872:	9e a1       	ldd	r25, Y+38	; 0x26
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	4c f5       	brge	.+82     	; 0x18d6 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	6f a1       	ldd	r22, Y+39	; 0x27
    1886:	78 a5       	ldd	r23, Y+40	; 0x28
    1888:	89 a5       	ldd	r24, Y+41	; 0x29
    188a:	9a a5       	ldd	r25, Y+42	; 0x2a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9a a3       	std	Y+34, r25	; 0x22
    18aa:	89 a3       	std	Y+33, r24	; 0x21
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <LCD_voidInit+0x458>
    18ae:	88 ec       	ldi	r24, 0xC8	; 200
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	98 a3       	std	Y+32, r25	; 0x20
    18b4:	8f 8f       	std	Y+31, r24	; 0x1f
    18b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b8:	98 a1       	ldd	r25, Y+32	; 0x20
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_voidInit+0x446>
    18be:	98 a3       	std	Y+32, r25	; 0x20
    18c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c2:	89 a1       	ldd	r24, Y+33	; 0x21
    18c4:	9a a1       	ldd	r25, Y+34	; 0x22
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	9a a3       	std	Y+34, r25	; 0x22
    18ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	89 a1       	ldd	r24, Y+33	; 0x21
    18ce:	9a a1       	ldd	r25, Y+34	; 0x22
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f7       	brne	.-38     	; 0x18ae <LCD_voidInit+0x43a>
    18d4:	14 c0       	rjmp	.+40     	; 0x18fe <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	6b a1       	ldd	r22, Y+35	; 0x23
    18d8:	7c a1       	ldd	r23, Y+36	; 0x24
    18da:	8d a1       	ldd	r24, Y+37	; 0x25
    18dc:	9e a1       	ldd	r25, Y+38	; 0x26
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9a a3       	std	Y+34, r25	; 0x22
    18e8:	89 a3       	std	Y+33, r24	; 0x21
    18ea:	89 a1       	ldd	r24, Y+33	; 0x21
    18ec:	9a a1       	ldd	r25, Y+34	; 0x22
    18ee:	9e 8f       	std	Y+30, r25	; 0x1e
    18f0:	8d 8f       	std	Y+29, r24	; 0x1d
    18f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_voidInit+0x482>
    18fa:	9e 8f       	std	Y+30, r25	; 0x1e
    18fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	/* Entry mode set  */
	LCD_voidSendCommand(lcd_EntryMode);
    18fe:	86 e0       	ldi	r24, 0x06	; 6
    1900:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e2       	ldi	r26, 0x20	; 32
    190a:	b1 e4       	ldi	r27, 0x41	; 65
    190c:	89 8f       	std	Y+25, r24	; 0x19
    190e:	9a 8f       	std	Y+26, r25	; 0x1a
    1910:	ab 8f       	std	Y+27, r26	; 0x1b
    1912:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	69 8d       	ldd	r22, Y+25	; 0x19
    1916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a ef       	ldi	r20, 0xFA	; 250
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8d 8b       	std	Y+21, r24	; 0x15
    192e:	9e 8b       	std	Y+22, r25	; 0x16
    1930:	af 8b       	std	Y+23, r26	; 0x17
    1932:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <LCD_voidInit+0x4e2>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	69 8d       	ldd	r22, Y+25	; 0x19
    1970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9c 8b       	std	Y+20, r25	; 0x14
    1994:	8b 8b       	std	Y+19, r24	; 0x13
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <LCD_voidInit+0x542>
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
    19a0:	89 89       	ldd	r24, Y+17	; 0x11
    19a2:	9a 89       	ldd	r25, Y+18	; 0x12
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_voidInit+0x530>
    19a8:	9a 8b       	std	Y+18, r25	; 0x12
    19aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8b 89       	ldd	r24, Y+19	; 0x13
    19b8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <LCD_voidInit+0x524>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
    19dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19de:	98 89       	ldd	r25, Y+16	; 0x10
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_voidInit+0x56c>
    19e4:	98 8b       	std	Y+16, r25	; 0x10
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	/* Set cursor home */
	LCD_voidSendCommand(lcd_Home);
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e2       	ldi	r26, 0x20	; 32
    19f4:	b1 e4       	ldi	r27, 0x41	; 65
    19f6:	8b 87       	std	Y+11, r24	; 0x0b
    19f8:	9c 87       	std	Y+12, r25	; 0x0c
    19fa:	ad 87       	std	Y+13, r26	; 0x0d
    19fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8f 83       	std	Y+7, r24	; 0x07
    1a18:	98 87       	std	Y+8, r25	; 0x08
    1a1a:	a9 87       	std	Y+9, r26	; 0x09
    1a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a20:	78 85       	ldd	r23, Y+8	; 0x08
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	4c f5       	brge	.+82     	; 0x1aaa <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_voidInit+0x62c>
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_voidInit+0x61a>
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <LCD_voidInit+0x60e>
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_voidInit+0x656>
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1ad2:	cc 5a       	subi	r28, 0xAC	; 172
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	08 95       	ret

00001aea <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Cpy_command )
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	6d 97       	sbiw	r28, 0x1d	; 29
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RS and RW */
	GPIO_voidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , LOW);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>

	/* Write the command to data port */
	GPIO_voidSetPortValue(LCD_DATA_PORT , Cpy_command);
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_voidSetPortValue>

	/* Send Enable signal */
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e8       	ldi	r26, 0x80	; 128
    1b2c:	bf e3       	ldi	r27, 0x3F	; 63
    1b2e:	89 8f       	std	Y+25, r24	; 0x19
    1b30:	9a 8f       	std	Y+26, r25	; 0x1a
    1b32:	ab 8f       	std	Y+27, r26	; 0x1b
    1b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	69 8d       	ldd	r22, Y+25	; 0x19
    1b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a ef       	ldi	r20, 0xFA	; 250
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8d 8b       	std	Y+21, r24	; 0x15
    1b50:	9e 8b       	std	Y+22, r25	; 0x16
    1b52:	af 8b       	std	Y+23, r26	; 0x17
    1b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b56:	6d 89       	ldd	r22, Y+21	; 0x15
    1b58:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	69 8d       	ldd	r22, Y+25	; 0x19
    1b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <LCD_voidSendCommand+0xee>
    1bba:	88 ec       	ldi	r24, 0xC8	; 200
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9a 8b       	std	Y+18, r25	; 0x12
    1bc0:	89 8b       	std	Y+17, r24	; 0x11
    1bc2:	89 89       	ldd	r24, Y+17	; 0x11
    1bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_voidSendCommand+0xdc>
    1bca:	9a 8b       	std	Y+18, r25	; 0x12
    1bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <LCD_voidSendCommand+0xd0>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6d 89       	ldd	r22, Y+21	; 0x15
    1be4:	7e 89       	ldd	r23, Y+22	; 0x16
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	98 8b       	std	Y+16, r25	; 0x10
    1bfc:	8f 87       	std	Y+15, r24	; 0x0f
    1bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c00:	98 89       	ldd	r25, Y+16	; 0x10
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_voidSendCommand+0x118>
    1c06:	98 8b       	std	Y+16, r25	; 0x10
    1c08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e2       	ldi	r26, 0x20	; 32
    1c1a:	b1 e4       	ldi	r27, 0x41	; 65
    1c1c:	8b 87       	std	Y+11, r24	; 0x0b
    1c1e:	9c 87       	std	Y+12, r25	; 0x0c
    1c20:	ad 87       	std	Y+13, r26	; 0x0d
    1c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a ef       	ldi	r20, 0xFA	; 250
    1c32:	54 e4       	ldi	r21, 0x44	; 68
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f 83       	std	Y+7, r24	; 0x07
    1c3e:	98 87       	std	Y+8, r25	; 0x08
    1c40:	a9 87       	std	Y+9, r26	; 0x09
    1c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	3f c0       	rjmp	.+126    	; 0x1ce4 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	4c f5       	brge	.+82     	; 0x1cd0 <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <LCD_voidSendCommand+0x1dc>
    1ca8:	88 ec       	ldi	r24, 0xC8	; 200
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_voidSendCommand+0x1ca>
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <LCD_voidSendCommand+0x1be>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_voidSendCommand+0x206>
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1cf8:	6d 96       	adiw	r28, 0x1d	; 29
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Cpy_data)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	6d 97       	sbiw	r28, 0x1d	; 29
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RW */
	GPIO_voidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>

	/* Set RS */
	GPIO_voidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , HIGH);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>

	/* Write the command to data port */
	GPIO_voidSetPortValue(LCD_DATA_PORT , Cpy_data);
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d38:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_voidSetPortValue>

	/* Send Enable signal */
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e8       	ldi	r26, 0x80	; 128
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	89 8f       	std	Y+25, r24	; 0x19
    1d50:	9a 8f       	std	Y+26, r25	; 0x1a
    1d52:	ab 8f       	std	Y+27, r26	; 0x1b
    1d54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	69 8d       	ldd	r22, Y+25	; 0x19
    1d58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a ef       	ldi	r20, 0xFA	; 250
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8d 8b       	std	Y+21, r24	; 0x15
    1d70:	9e 8b       	std	Y+22, r25	; 0x16
    1d72:	af 8b       	std	Y+23, r26	; 0x17
    1d74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d76:	6d 89       	ldd	r22, Y+21	; 0x15
    1d78:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
    1d96:	3f c0       	rjmp	.+126    	; 0x1e16 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1d98:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f5       	brge	.+82     	; 0x1e02 <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	69 8d       	ldd	r22, Y+25	; 0x19
    1db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <LCD_voidSendChar+0xee>
    1dda:	88 ec       	ldi	r24, 0xC8	; 200
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a 8b       	std	Y+18, r25	; 0x12
    1de0:	89 8b       	std	Y+17, r24	; 0x11
    1de2:	89 89       	ldd	r24, Y+17	; 0x11
    1de4:	9a 89       	ldd	r25, Y+18	; 0x12
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_voidSendChar+0xdc>
    1dea:	9a 8b       	std	Y+18, r25	; 0x12
    1dec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8b 89       	ldd	r24, Y+19	; 0x13
    1df0:	9c 89       	ldd	r25, Y+20	; 0x14
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <LCD_voidSendChar+0xd0>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	6d 89       	ldd	r22, Y+21	; 0x15
    1e04:	7e 89       	ldd	r23, Y+22	; 0x16
    1e06:	8f 89       	ldd	r24, Y+23	; 0x17
    1e08:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	98 8b       	std	Y+16, r25	; 0x10
    1e1c:	8f 87       	std	Y+15, r24	; 0x0f
    1e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e20:	98 89       	ldd	r25, Y+16	; 0x10
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_voidSendChar+0x118>
    1e26:	98 8b       	std	Y+16, r25	; 0x10
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	62 e0       	ldi	r22, 0x02	; 2
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinValue>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 e2       	ldi	r26, 0x20	; 32
    1e3a:	b1 e4       	ldi	r27, 0x41	; 65
    1e3c:	8b 87       	std	Y+11, r24	; 0x0b
    1e3e:	9c 87       	std	Y+12, r25	; 0x0c
    1e40:	ad 87       	std	Y+13, r26	; 0x0d
    1e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a ef       	ldi	r20, 0xFA	; 250
    1e52:	54 e4       	ldi	r21, 0x44	; 68
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	8f 83       	std	Y+7, r24	; 0x07
    1e5e:	98 87       	std	Y+8, r25	; 0x08
    1e60:	a9 87       	std	Y+9, r26	; 0x09
    1e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_voidSendChar+0x17c>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <LCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    1e86:	6f 81       	ldd	r22, Y+7	; 0x07
    1e88:	78 85       	ldd	r23, Y+8	; 0x08
    1e8a:	89 85       	ldd	r24, Y+9	; 0x09
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	57 e4       	ldi	r21, 0x47	; 71
    1e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	4c f5       	brge	.+82     	; 0x1ef0 <LCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <LCD_voidSendChar+0x1dc>
    1ec8:	88 ec       	ldi	r24, 0xC8	; 200
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9c 83       	std	Y+4, r25	; 0x04
    1ece:	8b 83       	std	Y+3, r24	; 0x03
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_voidSendChar+0x1ca>
    1ed8:	9c 83       	std	Y+4, r25	; 0x04
    1eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f7       	brne	.-38     	; 0x1ec8 <LCD_voidSendChar+0x1be>
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <LCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_voidSendChar+0x206>
    1f14:	9a 83       	std	Y+2, r25	; 0x02
    1f16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1f18:	6d 96       	adiw	r28, 0x1d	; 29
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <LCD_voidWriteString>:


void LCD_voidWriteString(const u8 *Cpy_str)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	60 97       	sbiw	r28, 0x10	; 16
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	98 8b       	std	Y+16, r25	; 0x10
    1f40:	8f 87       	std	Y+15, r24	; 0x0f
    1f42:	7c c0       	rjmp	.+248    	; 0x203c <LCD_voidWriteString+0x112>
	while ( (*Cpy_str) != NULL)
	{
		LCD_voidSendChar(*Cpy_str);
    1f44:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f46:	f8 89       	ldd	r31, Y+16	; 0x10
    1f48:	80 81       	ld	r24, Z
    1f4a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_voidSendChar>
		Cpy_str++;
    1f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f50:	98 89       	ldd	r25, Y+16	; 0x10
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	98 8b       	std	Y+16, r25	; 0x10
    1f56:	8f 87       	std	Y+15, r24	; 0x0f
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f5e:	b0 e4       	ldi	r27, 0x40	; 64
    1f60:	8b 87       	std	Y+11, r24	; 0x0b
    1f62:	9c 87       	std	Y+12, r25	; 0x0c
    1f64:	ad 87       	std	Y+13, r26	; 0x0d
    1f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4a ef       	ldi	r20, 0xFA	; 250
    1f76:	54 e4       	ldi	r21, 0x44	; 68
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8f 83       	std	Y+7, r24	; 0x07
    1f82:	98 87       	std	Y+8, r25	; 0x08
    1f84:	a9 87       	std	Y+9, r26	; 0x09
    1f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <LCD_voidWriteString+0x80>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <LCD_voidWriteString+0xfe>
	else if (__tmp > 65535)
    1faa:	6f 81       	ldd	r22, Y+7	; 0x07
    1fac:	78 85       	ldd	r23, Y+8	; 0x08
    1fae:	89 85       	ldd	r24, Y+9	; 0x09
    1fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <LCD_voidWriteString+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <LCD_voidWriteString+0xe0>
    1fec:	88 ec       	ldi	r24, 0xC8	; 200
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_voidWriteString+0xce>
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	69 f7       	brne	.-38     	; 0x1fec <LCD_voidWriteString+0xc2>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <LCD_voidWriteString+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	9e 81       	ldd	r25, Y+6	; 0x06
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_voidWriteString+0x10a>
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_voidWriteString(const u8 *Cpy_str)
{
	while ( (*Cpy_str) != NULL)
    203c:	ef 85       	ldd	r30, Y+15	; 0x0f
    203e:	f8 89       	ldd	r31, Y+16	; 0x10
    2040:	80 81       	ld	r24, Z
    2042:	88 23       	and	r24, r24
    2044:	09 f0       	breq	.+2      	; 0x2048 <LCD_voidWriteString+0x11e>
    2046:	7e cf       	rjmp	.-260    	; 0x1f44 <LCD_voidWriteString+0x1a>
	{
		LCD_voidSendChar(*Cpy_str);
		Cpy_str++;
		_delay_ms(5);
	}
}
    2048:	60 96       	adiw	r28, 0x10	; 16
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <LCD_voidGoTo>:

void LCD_voidGoTo(u8 Cpy_row , u8 Cpy_column)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <LCD_voidGoTo+0x6>
    2060:	00 d0       	rcall	.+0      	; 0x2062 <LCD_voidGoTo+0x8>
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	6a 83       	std	Y+2, r22	; 0x02
	if ((Cpy_row>0) && (Cpy_column<=16))
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	88 23       	and	r24, r24
    206e:	e1 f0       	breq	.+56     	; 0x20a8 <LCD_voidGoTo+0x4e>
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	81 31       	cpi	r24, 0x11	; 17
    2074:	c8 f4       	brcc	.+50     	; 0x20a8 <LCD_voidGoTo+0x4e>
	{
	    switch(Cpy_row)
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	3c 83       	std	Y+4, r19	; 0x04
    207e:	2b 83       	std	Y+3, r18	; 0x03
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	91 05       	cpc	r25, r1
    2088:	31 f0       	breq	.+12     	; 0x2096 <LCD_voidGoTo+0x3c>
    208a:	2b 81       	ldd	r18, Y+3	; 0x03
    208c:	3c 81       	ldd	r19, Y+4	; 0x04
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	31 05       	cpc	r19, r1
    2092:	31 f0       	breq	.+12     	; 0x20a0 <LCD_voidGoTo+0x46>
    2094:	09 c0       	rjmp	.+18     	; 0x20a8 <LCD_voidGoTo+0x4e>
	    {
		    case 1:
		    	LCD_voidSendCommand(Cpy_column+127);
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	81 58       	subi	r24, 0x81	; 129
    209a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <LCD_voidGoTo+0x4e>
		    break;

		    case 2:
		    	LCD_voidSendCommand(Cpy_column+191);
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	81 54       	subi	r24, 0x41	; 65
    20a4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>

		    default:
		    break;
	    }
	}
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <LCD_voidAddNewPattern>:

void LCD_voidAddNewPattern (u8 *Cpy_patternArray , u8 Cpy_blockNumber)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <LCD_voidAddNewPattern+0x6>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <LCD_voidAddNewPattern+0x8>
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
    20c8:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	08 96       	adiw	r24, 0x08	; 8
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	8a 83       	std	Y+2, r24	; 0x02
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	88 30       	cpi	r24, 0x08	; 8
    20e4:	b0 f4       	brcc	.+44     	; 0x2112 <LCD_voidAddNewPattern+0x5c>
	{
		LCD_voidSendCommand(local_CGAdress);
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    20ec:	19 82       	std	Y+1, r1	; 0x01
    20ee:	0e c0       	rjmp	.+28     	; 0x210c <LCD_voidAddNewPattern+0x56>
		{
			LCD_voidSendChar(Cpy_patternArray[i]);
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	fc 01       	movw	r30, r24
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	80 81       	ld	r24, Z
    2102:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_voidSendChar>
{
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
	{
		LCD_voidSendCommand(local_CGAdress);
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	8f 5f       	subi	r24, 0xFF	; 255
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	88 30       	cpi	r24, 0x08	; 8
    2110:	78 f3       	brcs	.-34     	; 0x20f0 <LCD_voidAddNewPattern+0x3a>
	}
	else
	{
		/* Error */
	}
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <LCD_voidWritePattern>:

void LCD_voidWritePattern (u8 Cpy_blockNumber , u8 Cpy_row , u8 Cpy_column)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <LCD_voidWritePattern+0x6>
    2128:	0f 92       	push	r0
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	6a 83       	std	Y+2, r22	; 0x02
    2132:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	88 30       	cpi	r24, 0x08	; 8
    2138:	38 f4       	brcc	.+14     	; 0x2148 <LCD_voidWritePattern+0x26>
	{
		LCD_voidGoTo(Cpy_row , Cpy_column);
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	6b 81       	ldd	r22, Y+3	; 0x03
    213e:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_voidGoTo>
		LCD_voidSendChar(Cpy_blockNumber);
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_voidSendChar>
	}
	else
	{
		/* Error */
	}
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <main>:
s8 global_u8Sum;
u8 global_u8WrongFlag ;
u8 global_u8StrArr[10];

void main ()
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <main+0x6>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62

	/* Init HAL modules */
	LCD_voidInit();
    215e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_voidInit>
	KPD_voidInitPins();
    2162:	0e 94 d6 08 	call	0x11ac	; 0x11ac <KPD_voidInitPins>

	while(1)
	{
		/* Clear screen at the start of every operation */
		LCD_voidSendCommand(lcd_Clear);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_voidSendCommand>
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <main+0x22>
		/************** To Enter first operand ******************/

		/* Wait till button is pressed */
		while (global_u8Num1 == 0)
		{
			global_u8Num1 = KPD_u8GetPressedKey();
    216e:	0e 94 3c 09 	call	0x1278	; 0x1278 <KPD_u8GetPressedKey>
    2172:	80 93 a0 00 	sts	0x00A0, r24
		LCD_voidSendCommand(lcd_Clear);

		/************** To Enter first operand ******************/

		/* Wait till button is pressed */
		while (global_u8Num1 == 0)
    2176:	80 91 a0 00 	lds	r24, 0x00A0
    217a:	88 23       	and	r24, r24
    217c:	c1 f3       	breq	.-16     	; 0x216e <main+0x1a>
		{
			global_u8Num1 = KPD_u8GetPressedKey();
		}

		/* Print the number on screen first */
		LCD_voidSendChar(global_u8Num1);
    217e:	80 91 a0 00 	lds	r24, 0x00A0
    2182:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_voidSendChar>

		/* Then convert from Ascii to integer */
		global_u8Num1 -= 48 ;
    2186:	80 91 a0 00 	lds	r24, 0x00A0
    218a:	80 53       	subi	r24, 0x30	; 48
    218c:	80 93 a0 00 	sts	0x00A0, r24
    2190:	04 c0       	rjmp	.+8      	; 0x219a <main+0x46>


		/********************* To Enter Operation ****************/
		while (global_u8Operation == 0)
		{
			global_u8Operation = KPD_u8GetPressedKey();
    2192:	0e 94 3c 09 	call	0x1278	; 0x1278 <KPD_u8GetPressedKey>
    2196:	80 93 ad 00 	sts	0x00AD, r24
		/* Then convert from Ascii to integer */
		global_u8Num1 -= 48 ;


		/********************* To Enter Operation ****************/
		while (global_u8Operation == 0)
    219a:	80 91 ad 00 	lds	r24, 0x00AD
    219e:	88 23       	and	r24, r24
    21a0:	c1 f3       	breq	.-16     	; 0x2192 <main+0x3e>
		{
			global_u8Operation = KPD_u8GetPressedKey();
		}
		LCD_voidSendChar(global_u8Operation);
    21a2:	80 91 ad 00 	lds	r24, 0x00AD
    21a6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_voidSendChar>
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <main+0x60>
		/********************** To Enter second operand *************/

		/* Wait till button is pressed */
		while (global_u8Num2 == 0)
		{
			global_u8Num2 = KPD_u8GetPressedKey();
    21ac:	0e 94 3c 09 	call	0x1278	; 0x1278 <KPD_u8GetPressedKey>
    21b0:	80 93 ac 00 	sts	0x00AC, r24


		/********************** To Enter second operand *************/

		/* Wait till button is pressed */
		while (global_u8Num2 == 0)
    21b4:	80 91 ac 00 	lds	r24, 0x00AC
    21b8:	88 23       	and	r24, r24
    21ba:	c1 f3       	breq	.-16     	; 0x21ac <main+0x58>
		{
			global_u8Num2 = KPD_u8GetPressedKey();
		}

		/* Print the number on screen first */
		LCD_voidSendChar(global_u8Num2);
    21bc:	80 91 ac 00 	lds	r24, 0x00AC
    21c0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_voidSendChar>

		/* Then convert from Ascii to integer */
		global_u8Num2 -= 48 ;
    21c4:	80 91 ac 00 	lds	r24, 0x00AC
    21c8:	80 53       	subi	r24, 0x30	; 48
    21ca:	80 93 ac 00 	sts	0x00AC, r24



		/****************** Wait to enter equal *********************/
		while ('=' != KPD_u8GetPressedKey());
    21ce:	0e 94 3c 09 	call	0x1278	; 0x1278 <KPD_u8GetPressedKey>
    21d2:	8d 33       	cpi	r24, 0x3D	; 61
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <main+0x7a>


		/****************** Calculate Answer ************************/
		switch (global_u8Operation)
    21d6:	80 91 ad 00 	lds	r24, 0x00AD
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3a 83       	std	Y+2, r19	; 0x02
    21e0:	29 83       	std	Y+1, r18	; 0x01
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	8b 32       	cpi	r24, 0x2B	; 43
    21e8:	91 05       	cpc	r25, r1
    21ea:	b1 f0       	breq	.+44     	; 0x2218 <main+0xc4>
    21ec:	29 81       	ldd	r18, Y+1	; 0x01
    21ee:	3a 81       	ldd	r19, Y+2	; 0x02
    21f0:	2c 32       	cpi	r18, 0x2C	; 44
    21f2:	31 05       	cpc	r19, r1
    21f4:	34 f4       	brge	.+12     	; 0x2202 <main+0xae>
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	8a 32       	cpi	r24, 0x2A	; 42
    21fc:	91 05       	cpc	r25, r1
    21fe:	f1 f0       	breq	.+60     	; 0x223c <main+0xe8>
    2200:	38 c0       	rjmp	.+112    	; 0x2272 <main+0x11e>
    2202:	29 81       	ldd	r18, Y+1	; 0x01
    2204:	3a 81       	ldd	r19, Y+2	; 0x02
    2206:	2d 32       	cpi	r18, 0x2D	; 45
    2208:	31 05       	cpc	r19, r1
    220a:	71 f0       	breq	.+28     	; 0x2228 <main+0xd4>
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	8f 32       	cpi	r24, 0x2F	; 47
    2212:	91 05       	cpc	r25, r1
    2214:	e9 f0       	breq	.+58     	; 0x2250 <main+0xfc>
    2216:	2d c0       	rjmp	.+90     	; 0x2272 <main+0x11e>
		{
			case '+' : global_u8Sum = global_u8Num1 + global_u8Num2; break ;
    2218:	90 91 a0 00 	lds	r25, 0x00A0
    221c:	80 91 ac 00 	lds	r24, 0x00AC
    2220:	89 0f       	add	r24, r25
    2222:	80 93 ae 00 	sts	0x00AE, r24
    2226:	25 c0       	rjmp	.+74     	; 0x2272 <main+0x11e>
			case '-' : global_u8Sum = global_u8Num1 - global_u8Num2; break ;
    2228:	90 91 a0 00 	lds	r25, 0x00A0
    222c:	80 91 ac 00 	lds	r24, 0x00AC
    2230:	29 2f       	mov	r18, r25
    2232:	28 1b       	sub	r18, r24
    2234:	82 2f       	mov	r24, r18
    2236:	80 93 ae 00 	sts	0x00AE, r24
    223a:	1b c0       	rjmp	.+54     	; 0x2272 <main+0x11e>
			case '*' : global_u8Sum = global_u8Num1 * global_u8Num2; break ;
    223c:	90 91 a0 00 	lds	r25, 0x00A0
    2240:	80 91 ac 00 	lds	r24, 0x00AC
    2244:	98 9f       	mul	r25, r24
    2246:	80 2d       	mov	r24, r0
    2248:	11 24       	eor	r1, r1
    224a:	80 93 ae 00 	sts	0x00AE, r24
    224e:	11 c0       	rjmp	.+34     	; 0x2272 <main+0x11e>
			case '/' :
				if (global_u8Num2 == 0)
    2250:	80 91 ac 00 	lds	r24, 0x00AC
    2254:	88 23       	and	r24, r24
    2256:	21 f4       	brne	.+8      	; 0x2260 <main+0x10c>
				{
					global_u8WrongFlag = 1 ;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	80 93 ab 00 	sts	0x00AB, r24
    225e:	09 c0       	rjmp	.+18     	; 0x2272 <main+0x11e>
				}
				else
				{
					global_u8Sum = global_u8Num1 / global_u8Num2;
    2260:	80 91 a0 00 	lds	r24, 0x00A0
    2264:	90 91 ac 00 	lds	r25, 0x00AC
    2268:	69 2f       	mov	r22, r25
    226a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__udivmodqi4>
    226e:	80 93 ae 00 	sts	0x00AE, r24
				break ;
		}


		/******************* Print the result ********************/
		LCD_voidGoTo(2 , 6);   /* Move to second line */
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	66 e0       	ldi	r22, 0x06	; 6
    2276:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_voidGoTo>

		/* Check for any operation errors */
		if (global_u8WrongFlag == 0)
    227a:	80 91 ab 00 	lds	r24, 0x00AB
    227e:	88 23       	and	r24, r24
    2280:	49 f5       	brne	.+82     	; 0x22d4 <main+0x180>
		{
			/* View answer */
			LCD_voidWriteString("Result = ");
    2282:	80 e6       	ldi	r24, 0x60	; 96
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_voidWriteString>
			/* Convert to string */
			sprintf(global_u8StrArr , "%d", global_u8Sum);
    228a:	80 91 ae 00 	lds	r24, 0x00AE
    228e:	28 2f       	mov	r18, r24
    2290:	33 27       	eor	r19, r19
    2292:	27 fd       	sbrc	r18, 7
    2294:	30 95       	com	r19
    2296:	00 d0       	rcall	.+0      	; 0x2298 <main+0x144>
    2298:	00 d0       	rcall	.+0      	; 0x229a <main+0x146>
    229a:	00 d0       	rcall	.+0      	; 0x229c <main+0x148>
    229c:	ed b7       	in	r30, 0x3d	; 61
    229e:	fe b7       	in	r31, 0x3e	; 62
    22a0:	31 96       	adiw	r30, 0x01	; 1
    22a2:	81 ea       	ldi	r24, 0xA1	; 161
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	80 83       	st	Z, r24
    22aa:	8a e6       	ldi	r24, 0x6A	; 106
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	93 83       	std	Z+3, r25	; 0x03
    22b0:	82 83       	std	Z+2, r24	; 0x02
    22b2:	35 83       	std	Z+5, r19	; 0x05
    22b4:	24 83       	std	Z+4, r18	; 0x04
    22b6:	0e 94 bc 11 	call	0x2378	; 0x2378 <sprintf>
    22ba:	8d b7       	in	r24, 0x3d	; 61
    22bc:	9e b7       	in	r25, 0x3e	; 62
    22be:	06 96       	adiw	r24, 0x06	; 6
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	9e bf       	out	0x3e, r25	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	8d bf       	out	0x3d, r24	; 61
			LCD_voidWriteString(global_u8StrArr);
    22ca:	81 ea       	ldi	r24, 0xA1	; 161
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_voidWriteString>
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <main+0x188>
		}
		else
		{
			LCD_voidWriteString("Error !!!");
    22d4:	8d e6       	ldi	r24, 0x6D	; 109
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_voidWriteString>
		}

		/****************** Re init variables ***************/
		global_u8Num1 = 0 ;
    22dc:	10 92 a0 00 	sts	0x00A0, r1
		global_u8Num2 = 0 ;
    22e0:	10 92 ac 00 	sts	0x00AC, r1
		global_u8Operation = 0 ;
    22e4:	10 92 ad 00 	sts	0x00AD, r1

		/********* Wait User to enter any key to start new operation  ******/
		while ( ! (KPD_u8GetPressedKey()) );
    22e8:	0e 94 3c 09 	call	0x1278	; 0x1278 <KPD_u8GetPressedKey>
    22ec:	88 23       	and	r24, r24
    22ee:	e1 f3       	breq	.-8      	; 0x22e8 <main+0x194>
    22f0:	3a cf       	rjmp	.-396    	; 0x2166 <main+0x12>

000022f2 <__udivmodqi4>:
    22f2:	99 1b       	sub	r25, r25
    22f4:	79 e0       	ldi	r23, 0x09	; 9
    22f6:	04 c0       	rjmp	.+8      	; 0x2300 <__udivmodqi4_ep>

000022f8 <__udivmodqi4_loop>:
    22f8:	99 1f       	adc	r25, r25
    22fa:	96 17       	cp	r25, r22
    22fc:	08 f0       	brcs	.+2      	; 0x2300 <__udivmodqi4_ep>
    22fe:	96 1b       	sub	r25, r22

00002300 <__udivmodqi4_ep>:
    2300:	88 1f       	adc	r24, r24
    2302:	7a 95       	dec	r23
    2304:	c9 f7       	brne	.-14     	; 0x22f8 <__udivmodqi4_loop>
    2306:	80 95       	com	r24
    2308:	08 95       	ret

0000230a <__prologue_saves__>:
    230a:	2f 92       	push	r2
    230c:	3f 92       	push	r3
    230e:	4f 92       	push	r4
    2310:	5f 92       	push	r5
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	8f 92       	push	r8
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	ca 1b       	sub	r28, r26
    2334:	db 0b       	sbc	r29, r27
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	09 94       	ijmp

00002342 <__epilogue_restores__>:
    2342:	2a 88       	ldd	r2, Y+18	; 0x12
    2344:	39 88       	ldd	r3, Y+17	; 0x11
    2346:	48 88       	ldd	r4, Y+16	; 0x10
    2348:	5f 84       	ldd	r5, Y+15	; 0x0f
    234a:	6e 84       	ldd	r6, Y+14	; 0x0e
    234c:	7d 84       	ldd	r7, Y+13	; 0x0d
    234e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2350:	9b 84       	ldd	r9, Y+11	; 0x0b
    2352:	aa 84       	ldd	r10, Y+10	; 0x0a
    2354:	b9 84       	ldd	r11, Y+9	; 0x09
    2356:	c8 84       	ldd	r12, Y+8	; 0x08
    2358:	df 80       	ldd	r13, Y+7	; 0x07
    235a:	ee 80       	ldd	r14, Y+6	; 0x06
    235c:	fd 80       	ldd	r15, Y+5	; 0x05
    235e:	0c 81       	ldd	r16, Y+4	; 0x04
    2360:	1b 81       	ldd	r17, Y+3	; 0x03
    2362:	aa 81       	ldd	r26, Y+2	; 0x02
    2364:	b9 81       	ldd	r27, Y+1	; 0x01
    2366:	ce 0f       	add	r28, r30
    2368:	d1 1d       	adc	r29, r1
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	ed 01       	movw	r28, r26
    2376:	08 95       	ret

00002378 <sprintf>:
    2378:	ae e0       	ldi	r26, 0x0E	; 14
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e2 ec       	ldi	r30, 0xC2	; 194
    237e:	f1 e1       	ldi	r31, 0x11	; 17
    2380:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__prologue_saves__+0x1c>
    2384:	0d 89       	ldd	r16, Y+21	; 0x15
    2386:	1e 89       	ldd	r17, Y+22	; 0x16
    2388:	86 e0       	ldi	r24, 0x06	; 6
    238a:	8c 83       	std	Y+4, r24	; 0x04
    238c:	1a 83       	std	Y+2, r17	; 0x02
    238e:	09 83       	std	Y+1, r16	; 0x01
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	9f e7       	ldi	r25, 0x7F	; 127
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	9e 01       	movw	r18, r28
    239a:	27 5e       	subi	r18, 0xE7	; 231
    239c:	3f 4f       	sbci	r19, 0xFF	; 255
    239e:	ce 01       	movw	r24, r28
    23a0:	01 96       	adiw	r24, 0x01	; 1
    23a2:	6f 89       	ldd	r22, Y+23	; 0x17
    23a4:	78 8d       	ldd	r23, Y+24	; 0x18
    23a6:	a9 01       	movw	r20, r18
    23a8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <vfprintf>
    23ac:	2f 81       	ldd	r18, Y+7	; 0x07
    23ae:	38 85       	ldd	r19, Y+8	; 0x08
    23b0:	02 0f       	add	r16, r18
    23b2:	13 1f       	adc	r17, r19
    23b4:	f8 01       	movw	r30, r16
    23b6:	10 82       	st	Z, r1
    23b8:	2e 96       	adiw	r28, 0x0e	; 14
    23ba:	e4 e0       	ldi	r30, 0x04	; 4
    23bc:	0c 94 af 11 	jmp	0x235e	; 0x235e <__epilogue_restores__+0x1c>

000023c0 <vfprintf>:
    23c0:	ab e0       	ldi	r26, 0x0B	; 11
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e6 ee       	ldi	r30, 0xE6	; 230
    23c6:	f1 e1       	ldi	r31, 0x11	; 17
    23c8:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__>
    23cc:	3c 01       	movw	r6, r24
    23ce:	2b 01       	movw	r4, r22
    23d0:	5a 01       	movw	r10, r20
    23d2:	fc 01       	movw	r30, r24
    23d4:	17 82       	std	Z+7, r1	; 0x07
    23d6:	16 82       	std	Z+6, r1	; 0x06
    23d8:	83 81       	ldd	r24, Z+3	; 0x03
    23da:	81 fd       	sbrc	r24, 1
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <vfprintf+0x24>
    23de:	6f ef       	ldi	r22, 0xFF	; 255
    23e0:	7f ef       	ldi	r23, 0xFF	; 255
    23e2:	c6 c1       	rjmp	.+908    	; 0x2770 <vfprintf+0x3b0>
    23e4:	9a e0       	ldi	r25, 0x0A	; 10
    23e6:	89 2e       	mov	r8, r25
    23e8:	1e 01       	movw	r2, r28
    23ea:	08 94       	sec
    23ec:	21 1c       	adc	r2, r1
    23ee:	31 1c       	adc	r3, r1
    23f0:	f3 01       	movw	r30, r6
    23f2:	23 81       	ldd	r18, Z+3	; 0x03
    23f4:	f2 01       	movw	r30, r4
    23f6:	23 fd       	sbrc	r18, 3
    23f8:	85 91       	lpm	r24, Z+
    23fa:	23 ff       	sbrs	r18, 3
    23fc:	81 91       	ld	r24, Z+
    23fe:	2f 01       	movw	r4, r30
    2400:	88 23       	and	r24, r24
    2402:	09 f4       	brne	.+2      	; 0x2406 <vfprintf+0x46>
    2404:	b2 c1       	rjmp	.+868    	; 0x276a <vfprintf+0x3aa>
    2406:	85 32       	cpi	r24, 0x25	; 37
    2408:	39 f4       	brne	.+14     	; 0x2418 <vfprintf+0x58>
    240a:	23 fd       	sbrc	r18, 3
    240c:	85 91       	lpm	r24, Z+
    240e:	23 ff       	sbrs	r18, 3
    2410:	81 91       	ld	r24, Z+
    2412:	2f 01       	movw	r4, r30
    2414:	85 32       	cpi	r24, 0x25	; 37
    2416:	29 f4       	brne	.+10     	; 0x2422 <vfprintf+0x62>
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	b3 01       	movw	r22, r6
    241c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2420:	e7 cf       	rjmp	.-50     	; 0x23f0 <vfprintf+0x30>
    2422:	98 2f       	mov	r25, r24
    2424:	ff 24       	eor	r15, r15
    2426:	ee 24       	eor	r14, r14
    2428:	99 24       	eor	r9, r9
    242a:	ff e1       	ldi	r31, 0x1F	; 31
    242c:	ff 15       	cp	r31, r15
    242e:	d0 f0       	brcs	.+52     	; 0x2464 <vfprintf+0xa4>
    2430:	9b 32       	cpi	r25, 0x2B	; 43
    2432:	69 f0       	breq	.+26     	; 0x244e <vfprintf+0x8e>
    2434:	9c 32       	cpi	r25, 0x2C	; 44
    2436:	28 f4       	brcc	.+10     	; 0x2442 <vfprintf+0x82>
    2438:	90 32       	cpi	r25, 0x20	; 32
    243a:	59 f0       	breq	.+22     	; 0x2452 <vfprintf+0x92>
    243c:	93 32       	cpi	r25, 0x23	; 35
    243e:	91 f4       	brne	.+36     	; 0x2464 <vfprintf+0xa4>
    2440:	0e c0       	rjmp	.+28     	; 0x245e <vfprintf+0x9e>
    2442:	9d 32       	cpi	r25, 0x2D	; 45
    2444:	49 f0       	breq	.+18     	; 0x2458 <vfprintf+0x98>
    2446:	90 33       	cpi	r25, 0x30	; 48
    2448:	69 f4       	brne	.+26     	; 0x2464 <vfprintf+0xa4>
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	24 c0       	rjmp	.+72     	; 0x2496 <vfprintf+0xd6>
    244e:	52 e0       	ldi	r21, 0x02	; 2
    2450:	f5 2a       	or	r15, r21
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	f8 2a       	or	r15, r24
    2456:	28 c0       	rjmp	.+80     	; 0x24a8 <vfprintf+0xe8>
    2458:	98 e0       	ldi	r25, 0x08	; 8
    245a:	f9 2a       	or	r15, r25
    245c:	25 c0       	rjmp	.+74     	; 0x24a8 <vfprintf+0xe8>
    245e:	e0 e1       	ldi	r30, 0x10	; 16
    2460:	fe 2a       	or	r15, r30
    2462:	22 c0       	rjmp	.+68     	; 0x24a8 <vfprintf+0xe8>
    2464:	f7 fc       	sbrc	r15, 7
    2466:	29 c0       	rjmp	.+82     	; 0x24ba <vfprintf+0xfa>
    2468:	89 2f       	mov	r24, r25
    246a:	80 53       	subi	r24, 0x30	; 48
    246c:	8a 30       	cpi	r24, 0x0A	; 10
    246e:	70 f4       	brcc	.+28     	; 0x248c <vfprintf+0xcc>
    2470:	f6 fe       	sbrs	r15, 6
    2472:	05 c0       	rjmp	.+10     	; 0x247e <vfprintf+0xbe>
    2474:	98 9c       	mul	r9, r8
    2476:	90 2c       	mov	r9, r0
    2478:	11 24       	eor	r1, r1
    247a:	98 0e       	add	r9, r24
    247c:	15 c0       	rjmp	.+42     	; 0x24a8 <vfprintf+0xe8>
    247e:	e8 9c       	mul	r14, r8
    2480:	e0 2c       	mov	r14, r0
    2482:	11 24       	eor	r1, r1
    2484:	e8 0e       	add	r14, r24
    2486:	f0 e2       	ldi	r31, 0x20	; 32
    2488:	ff 2a       	or	r15, r31
    248a:	0e c0       	rjmp	.+28     	; 0x24a8 <vfprintf+0xe8>
    248c:	9e 32       	cpi	r25, 0x2E	; 46
    248e:	29 f4       	brne	.+10     	; 0x249a <vfprintf+0xda>
    2490:	f6 fc       	sbrc	r15, 6
    2492:	6b c1       	rjmp	.+726    	; 0x276a <vfprintf+0x3aa>
    2494:	40 e4       	ldi	r20, 0x40	; 64
    2496:	f4 2a       	or	r15, r20
    2498:	07 c0       	rjmp	.+14     	; 0x24a8 <vfprintf+0xe8>
    249a:	9c 36       	cpi	r25, 0x6C	; 108
    249c:	19 f4       	brne	.+6      	; 0x24a4 <vfprintf+0xe4>
    249e:	50 e8       	ldi	r21, 0x80	; 128
    24a0:	f5 2a       	or	r15, r21
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <vfprintf+0xe8>
    24a4:	98 36       	cpi	r25, 0x68	; 104
    24a6:	49 f4       	brne	.+18     	; 0x24ba <vfprintf+0xfa>
    24a8:	f2 01       	movw	r30, r4
    24aa:	23 fd       	sbrc	r18, 3
    24ac:	95 91       	lpm	r25, Z+
    24ae:	23 ff       	sbrs	r18, 3
    24b0:	91 91       	ld	r25, Z+
    24b2:	2f 01       	movw	r4, r30
    24b4:	99 23       	and	r25, r25
    24b6:	09 f0       	breq	.+2      	; 0x24ba <vfprintf+0xfa>
    24b8:	b8 cf       	rjmp	.-144    	; 0x242a <vfprintf+0x6a>
    24ba:	89 2f       	mov	r24, r25
    24bc:	85 54       	subi	r24, 0x45	; 69
    24be:	83 30       	cpi	r24, 0x03	; 3
    24c0:	18 f0       	brcs	.+6      	; 0x24c8 <vfprintf+0x108>
    24c2:	80 52       	subi	r24, 0x20	; 32
    24c4:	83 30       	cpi	r24, 0x03	; 3
    24c6:	38 f4       	brcc	.+14     	; 0x24d6 <vfprintf+0x116>
    24c8:	44 e0       	ldi	r20, 0x04	; 4
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	a4 0e       	add	r10, r20
    24ce:	b5 1e       	adc	r11, r21
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	59 83       	std	Y+1, r21	; 0x01
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <vfprintf+0x134>
    24d6:	93 36       	cpi	r25, 0x63	; 99
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <vfprintf+0x126>
    24da:	93 37       	cpi	r25, 0x73	; 115
    24dc:	79 f0       	breq	.+30     	; 0x24fc <vfprintf+0x13c>
    24de:	93 35       	cpi	r25, 0x53	; 83
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <vfprintf+0x124>
    24e2:	56 c0       	rjmp	.+172    	; 0x2590 <vfprintf+0x1d0>
    24e4:	20 c0       	rjmp	.+64     	; 0x2526 <vfprintf+0x166>
    24e6:	f5 01       	movw	r30, r10
    24e8:	80 81       	ld	r24, Z
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	42 e0       	ldi	r20, 0x02	; 2
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	a4 0e       	add	r10, r20
    24f2:	b5 1e       	adc	r11, r21
    24f4:	61 01       	movw	r12, r2
    24f6:	01 e0       	ldi	r16, 0x01	; 1
    24f8:	10 e0       	ldi	r17, 0x00	; 0
    24fa:	12 c0       	rjmp	.+36     	; 0x2520 <vfprintf+0x160>
    24fc:	f5 01       	movw	r30, r10
    24fe:	c0 80       	ld	r12, Z
    2500:	d1 80       	ldd	r13, Z+1	; 0x01
    2502:	f6 fc       	sbrc	r15, 6
    2504:	03 c0       	rjmp	.+6      	; 0x250c <vfprintf+0x14c>
    2506:	6f ef       	ldi	r22, 0xFF	; 255
    2508:	7f ef       	ldi	r23, 0xFF	; 255
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <vfprintf+0x150>
    250c:	69 2d       	mov	r22, r9
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	42 e0       	ldi	r20, 0x02	; 2
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	a4 0e       	add	r10, r20
    2516:	b5 1e       	adc	r11, r21
    2518:	c6 01       	movw	r24, r12
    251a:	0e 94 c8 13 	call	0x2790	; 0x2790 <strnlen>
    251e:	8c 01       	movw	r16, r24
    2520:	5f e7       	ldi	r21, 0x7F	; 127
    2522:	f5 22       	and	r15, r21
    2524:	14 c0       	rjmp	.+40     	; 0x254e <vfprintf+0x18e>
    2526:	f5 01       	movw	r30, r10
    2528:	c0 80       	ld	r12, Z
    252a:	d1 80       	ldd	r13, Z+1	; 0x01
    252c:	f6 fc       	sbrc	r15, 6
    252e:	03 c0       	rjmp	.+6      	; 0x2536 <vfprintf+0x176>
    2530:	6f ef       	ldi	r22, 0xFF	; 255
    2532:	7f ef       	ldi	r23, 0xFF	; 255
    2534:	02 c0       	rjmp	.+4      	; 0x253a <vfprintf+0x17a>
    2536:	69 2d       	mov	r22, r9
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	42 e0       	ldi	r20, 0x02	; 2
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	a4 0e       	add	r10, r20
    2540:	b5 1e       	adc	r11, r21
    2542:	c6 01       	movw	r24, r12
    2544:	0e 94 bd 13 	call	0x277a	; 0x277a <strnlen_P>
    2548:	8c 01       	movw	r16, r24
    254a:	50 e8       	ldi	r21, 0x80	; 128
    254c:	f5 2a       	or	r15, r21
    254e:	f3 fe       	sbrs	r15, 3
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <vfprintf+0x1a0>
    2552:	1a c0       	rjmp	.+52     	; 0x2588 <vfprintf+0x1c8>
    2554:	80 e2       	ldi	r24, 0x20	; 32
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	b3 01       	movw	r22, r6
    255a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    255e:	ea 94       	dec	r14
    2560:	8e 2d       	mov	r24, r14
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	08 17       	cp	r16, r24
    2566:	19 07       	cpc	r17, r25
    2568:	a8 f3       	brcs	.-22     	; 0x2554 <vfprintf+0x194>
    256a:	0e c0       	rjmp	.+28     	; 0x2588 <vfprintf+0x1c8>
    256c:	f6 01       	movw	r30, r12
    256e:	f7 fc       	sbrc	r15, 7
    2570:	85 91       	lpm	r24, Z+
    2572:	f7 fe       	sbrs	r15, 7
    2574:	81 91       	ld	r24, Z+
    2576:	6f 01       	movw	r12, r30
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	b3 01       	movw	r22, r6
    257c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2580:	e1 10       	cpse	r14, r1
    2582:	ea 94       	dec	r14
    2584:	01 50       	subi	r16, 0x01	; 1
    2586:	10 40       	sbci	r17, 0x00	; 0
    2588:	01 15       	cp	r16, r1
    258a:	11 05       	cpc	r17, r1
    258c:	79 f7       	brne	.-34     	; 0x256c <vfprintf+0x1ac>
    258e:	ea c0       	rjmp	.+468    	; 0x2764 <vfprintf+0x3a4>
    2590:	94 36       	cpi	r25, 0x64	; 100
    2592:	11 f0       	breq	.+4      	; 0x2598 <vfprintf+0x1d8>
    2594:	99 36       	cpi	r25, 0x69	; 105
    2596:	69 f5       	brne	.+90     	; 0x25f2 <vfprintf+0x232>
    2598:	f7 fe       	sbrs	r15, 7
    259a:	08 c0       	rjmp	.+16     	; 0x25ac <vfprintf+0x1ec>
    259c:	f5 01       	movw	r30, r10
    259e:	20 81       	ld	r18, Z
    25a0:	31 81       	ldd	r19, Z+1	; 0x01
    25a2:	42 81       	ldd	r20, Z+2	; 0x02
    25a4:	53 81       	ldd	r21, Z+3	; 0x03
    25a6:	84 e0       	ldi	r24, 0x04	; 4
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0a c0       	rjmp	.+20     	; 0x25c0 <vfprintf+0x200>
    25ac:	f5 01       	movw	r30, r10
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	9c 01       	movw	r18, r24
    25b4:	44 27       	eor	r20, r20
    25b6:	37 fd       	sbrc	r19, 7
    25b8:	40 95       	com	r20
    25ba:	54 2f       	mov	r21, r20
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a8 0e       	add	r10, r24
    25c2:	b9 1e       	adc	r11, r25
    25c4:	9f e6       	ldi	r25, 0x6F	; 111
    25c6:	f9 22       	and	r15, r25
    25c8:	57 ff       	sbrs	r21, 7
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <vfprintf+0x21e>
    25cc:	50 95       	com	r21
    25ce:	40 95       	com	r20
    25d0:	30 95       	com	r19
    25d2:	21 95       	neg	r18
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
    25d6:	4f 4f       	sbci	r20, 0xFF	; 255
    25d8:	5f 4f       	sbci	r21, 0xFF	; 255
    25da:	e0 e8       	ldi	r30, 0x80	; 128
    25dc:	fe 2a       	or	r15, r30
    25de:	ca 01       	movw	r24, r20
    25e0:	b9 01       	movw	r22, r18
    25e2:	a1 01       	movw	r20, r2
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__ultoa_invert>
    25ec:	d8 2e       	mov	r13, r24
    25ee:	d2 18       	sub	r13, r2
    25f0:	40 c0       	rjmp	.+128    	; 0x2672 <vfprintf+0x2b2>
    25f2:	95 37       	cpi	r25, 0x75	; 117
    25f4:	29 f4       	brne	.+10     	; 0x2600 <vfprintf+0x240>
    25f6:	1f 2d       	mov	r17, r15
    25f8:	1f 7e       	andi	r17, 0xEF	; 239
    25fa:	2a e0       	ldi	r18, 0x0A	; 10
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	1d c0       	rjmp	.+58     	; 0x263a <vfprintf+0x27a>
    2600:	1f 2d       	mov	r17, r15
    2602:	19 7f       	andi	r17, 0xF9	; 249
    2604:	9f 36       	cpi	r25, 0x6F	; 111
    2606:	61 f0       	breq	.+24     	; 0x2620 <vfprintf+0x260>
    2608:	90 37       	cpi	r25, 0x70	; 112
    260a:	20 f4       	brcc	.+8      	; 0x2614 <vfprintf+0x254>
    260c:	98 35       	cpi	r25, 0x58	; 88
    260e:	09 f0       	breq	.+2      	; 0x2612 <vfprintf+0x252>
    2610:	ac c0       	rjmp	.+344    	; 0x276a <vfprintf+0x3aa>
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <vfprintf+0x272>
    2614:	90 37       	cpi	r25, 0x70	; 112
    2616:	39 f0       	breq	.+14     	; 0x2626 <vfprintf+0x266>
    2618:	98 37       	cpi	r25, 0x78	; 120
    261a:	09 f0       	breq	.+2      	; 0x261e <vfprintf+0x25e>
    261c:	a6 c0       	rjmp	.+332    	; 0x276a <vfprintf+0x3aa>
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <vfprintf+0x268>
    2620:	28 e0       	ldi	r18, 0x08	; 8
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	0a c0       	rjmp	.+20     	; 0x263a <vfprintf+0x27a>
    2626:	10 61       	ori	r17, 0x10	; 16
    2628:	14 fd       	sbrc	r17, 4
    262a:	14 60       	ori	r17, 0x04	; 4
    262c:	20 e1       	ldi	r18, 0x10	; 16
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	04 c0       	rjmp	.+8      	; 0x263a <vfprintf+0x27a>
    2632:	14 fd       	sbrc	r17, 4
    2634:	16 60       	ori	r17, 0x06	; 6
    2636:	20 e1       	ldi	r18, 0x10	; 16
    2638:	32 e0       	ldi	r19, 0x02	; 2
    263a:	17 ff       	sbrs	r17, 7
    263c:	08 c0       	rjmp	.+16     	; 0x264e <vfprintf+0x28e>
    263e:	f5 01       	movw	r30, r10
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	44 e0       	ldi	r20, 0x04	; 4
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	08 c0       	rjmp	.+16     	; 0x265e <vfprintf+0x29e>
    264e:	f5 01       	movw	r30, r10
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	bc 01       	movw	r22, r24
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	42 e0       	ldi	r20, 0x02	; 2
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	a4 0e       	add	r10, r20
    2660:	b5 1e       	adc	r11, r21
    2662:	a1 01       	movw	r20, r2
    2664:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__ultoa_invert>
    2668:	d8 2e       	mov	r13, r24
    266a:	d2 18       	sub	r13, r2
    266c:	8f e7       	ldi	r24, 0x7F	; 127
    266e:	f8 2e       	mov	r15, r24
    2670:	f1 22       	and	r15, r17
    2672:	f6 fe       	sbrs	r15, 6
    2674:	0b c0       	rjmp	.+22     	; 0x268c <vfprintf+0x2cc>
    2676:	5e ef       	ldi	r21, 0xFE	; 254
    2678:	f5 22       	and	r15, r21
    267a:	d9 14       	cp	r13, r9
    267c:	38 f4       	brcc	.+14     	; 0x268c <vfprintf+0x2cc>
    267e:	f4 fe       	sbrs	r15, 4
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <vfprintf+0x2d0>
    2682:	f2 fc       	sbrc	r15, 2
    2684:	05 c0       	rjmp	.+10     	; 0x2690 <vfprintf+0x2d0>
    2686:	8f ee       	ldi	r24, 0xEF	; 239
    2688:	f8 22       	and	r15, r24
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <vfprintf+0x2d0>
    268c:	1d 2d       	mov	r17, r13
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <vfprintf+0x2d2>
    2690:	19 2d       	mov	r17, r9
    2692:	f4 fe       	sbrs	r15, 4
    2694:	0d c0       	rjmp	.+26     	; 0x26b0 <vfprintf+0x2f0>
    2696:	fe 01       	movw	r30, r28
    2698:	ed 0d       	add	r30, r13
    269a:	f1 1d       	adc	r31, r1
    269c:	80 81       	ld	r24, Z
    269e:	80 33       	cpi	r24, 0x30	; 48
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <vfprintf+0x2e8>
    26a2:	99 ee       	ldi	r25, 0xE9	; 233
    26a4:	f9 22       	and	r15, r25
    26a6:	08 c0       	rjmp	.+16     	; 0x26b8 <vfprintf+0x2f8>
    26a8:	1f 5f       	subi	r17, 0xFF	; 255
    26aa:	f2 fe       	sbrs	r15, 2
    26ac:	05 c0       	rjmp	.+10     	; 0x26b8 <vfprintf+0x2f8>
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <vfprintf+0x2f6>
    26b0:	8f 2d       	mov	r24, r15
    26b2:	86 78       	andi	r24, 0x86	; 134
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <vfprintf+0x2f8>
    26b6:	1f 5f       	subi	r17, 0xFF	; 255
    26b8:	0f 2d       	mov	r16, r15
    26ba:	f3 fc       	sbrc	r15, 3
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <vfprintf+0x326>
    26be:	f0 fe       	sbrs	r15, 0
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <vfprintf+0x320>
    26c2:	1e 15       	cp	r17, r14
    26c4:	10 f0       	brcs	.+4      	; 0x26ca <vfprintf+0x30a>
    26c6:	9d 2c       	mov	r9, r13
    26c8:	0b c0       	rjmp	.+22     	; 0x26e0 <vfprintf+0x320>
    26ca:	9d 2c       	mov	r9, r13
    26cc:	9e 0c       	add	r9, r14
    26ce:	91 1a       	sub	r9, r17
    26d0:	1e 2d       	mov	r17, r14
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <vfprintf+0x320>
    26d4:	80 e2       	ldi	r24, 0x20	; 32
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	b3 01       	movw	r22, r6
    26da:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    26de:	1f 5f       	subi	r17, 0xFF	; 255
    26e0:	1e 15       	cp	r17, r14
    26e2:	c0 f3       	brcs	.-16     	; 0x26d4 <vfprintf+0x314>
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <vfprintf+0x32e>
    26e6:	1e 15       	cp	r17, r14
    26e8:	10 f4       	brcc	.+4      	; 0x26ee <vfprintf+0x32e>
    26ea:	e1 1a       	sub	r14, r17
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <vfprintf+0x330>
    26ee:	ee 24       	eor	r14, r14
    26f0:	04 ff       	sbrs	r16, 4
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <vfprintf+0x352>
    26f4:	80 e3       	ldi	r24, 0x30	; 48
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	b3 01       	movw	r22, r6
    26fa:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    26fe:	02 ff       	sbrs	r16, 2
    2700:	1d c0       	rjmp	.+58     	; 0x273c <vfprintf+0x37c>
    2702:	01 fd       	sbrc	r16, 1
    2704:	03 c0       	rjmp	.+6      	; 0x270c <vfprintf+0x34c>
    2706:	88 e7       	ldi	r24, 0x78	; 120
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <vfprintf+0x368>
    270c:	88 e5       	ldi	r24, 0x58	; 88
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0b c0       	rjmp	.+22     	; 0x2728 <vfprintf+0x368>
    2712:	80 2f       	mov	r24, r16
    2714:	86 78       	andi	r24, 0x86	; 134
    2716:	91 f0       	breq	.+36     	; 0x273c <vfprintf+0x37c>
    2718:	01 ff       	sbrs	r16, 1
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <vfprintf+0x360>
    271c:	8b e2       	ldi	r24, 0x2B	; 43
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <vfprintf+0x362>
    2720:	80 e2       	ldi	r24, 0x20	; 32
    2722:	f7 fc       	sbrc	r15, 7
    2724:	8d e2       	ldi	r24, 0x2D	; 45
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	b3 01       	movw	r22, r6
    272a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    272e:	06 c0       	rjmp	.+12     	; 0x273c <vfprintf+0x37c>
    2730:	80 e3       	ldi	r24, 0x30	; 48
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	b3 01       	movw	r22, r6
    2736:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    273a:	9a 94       	dec	r9
    273c:	d9 14       	cp	r13, r9
    273e:	c0 f3       	brcs	.-16     	; 0x2730 <vfprintf+0x370>
    2740:	da 94       	dec	r13
    2742:	f1 01       	movw	r30, r2
    2744:	ed 0d       	add	r30, r13
    2746:	f1 1d       	adc	r31, r1
    2748:	80 81       	ld	r24, Z
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	b3 01       	movw	r22, r6
    274e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2752:	dd 20       	and	r13, r13
    2754:	a9 f7       	brne	.-22     	; 0x2740 <vfprintf+0x380>
    2756:	06 c0       	rjmp	.+12     	; 0x2764 <vfprintf+0x3a4>
    2758:	80 e2       	ldi	r24, 0x20	; 32
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	b3 01       	movw	r22, r6
    275e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2762:	ea 94       	dec	r14
    2764:	ee 20       	and	r14, r14
    2766:	c1 f7       	brne	.-16     	; 0x2758 <vfprintf+0x398>
    2768:	43 ce       	rjmp	.-890    	; 0x23f0 <vfprintf+0x30>
    276a:	f3 01       	movw	r30, r6
    276c:	66 81       	ldd	r22, Z+6	; 0x06
    276e:	77 81       	ldd	r23, Z+7	; 0x07
    2770:	cb 01       	movw	r24, r22
    2772:	2b 96       	adiw	r28, 0x0b	; 11
    2774:	e2 e1       	ldi	r30, 0x12	; 18
    2776:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__>

0000277a <strnlen_P>:
    277a:	fc 01       	movw	r30, r24
    277c:	05 90       	lpm	r0, Z+
    277e:	61 50       	subi	r22, 0x01	; 1
    2780:	70 40       	sbci	r23, 0x00	; 0
    2782:	01 10       	cpse	r0, r1
    2784:	d8 f7       	brcc	.-10     	; 0x277c <strnlen_P+0x2>
    2786:	80 95       	com	r24
    2788:	90 95       	com	r25
    278a:	8e 0f       	add	r24, r30
    278c:	9f 1f       	adc	r25, r31
    278e:	08 95       	ret

00002790 <strnlen>:
    2790:	fc 01       	movw	r30, r24
    2792:	61 50       	subi	r22, 0x01	; 1
    2794:	70 40       	sbci	r23, 0x00	; 0
    2796:	01 90       	ld	r0, Z+
    2798:	01 10       	cpse	r0, r1
    279a:	d8 f7       	brcc	.-10     	; 0x2792 <strnlen+0x2>
    279c:	80 95       	com	r24
    279e:	90 95       	com	r25
    27a0:	8e 0f       	add	r24, r30
    27a2:	9f 1f       	adc	r25, r31
    27a4:	08 95       	ret

000027a6 <fputc>:
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	8c 01       	movw	r16, r24
    27b0:	eb 01       	movw	r28, r22
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	81 ff       	sbrs	r24, 1
    27b6:	1b c0       	rjmp	.+54     	; 0x27ee <fputc+0x48>
    27b8:	82 ff       	sbrs	r24, 2
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <fputc+0x30>
    27bc:	2e 81       	ldd	r18, Y+6	; 0x06
    27be:	3f 81       	ldd	r19, Y+7	; 0x07
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	28 17       	cp	r18, r24
    27c6:	39 07       	cpc	r19, r25
    27c8:	64 f4       	brge	.+24     	; 0x27e2 <fputc+0x3c>
    27ca:	e8 81       	ld	r30, Y
    27cc:	f9 81       	ldd	r31, Y+1	; 0x01
    27ce:	01 93       	st	Z+, r16
    27d0:	f9 83       	std	Y+1, r31	; 0x01
    27d2:	e8 83       	st	Y, r30
    27d4:	06 c0       	rjmp	.+12     	; 0x27e2 <fputc+0x3c>
    27d6:	e8 85       	ldd	r30, Y+8	; 0x08
    27d8:	f9 85       	ldd	r31, Y+9	; 0x09
    27da:	80 2f       	mov	r24, r16
    27dc:	09 95       	icall
    27de:	89 2b       	or	r24, r25
    27e0:	31 f4       	brne	.+12     	; 0x27ee <fputc+0x48>
    27e2:	8e 81       	ldd	r24, Y+6	; 0x06
    27e4:	9f 81       	ldd	r25, Y+7	; 0x07
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	9f 83       	std	Y+7, r25	; 0x07
    27ea:	8e 83       	std	Y+6, r24	; 0x06
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <fputc+0x4c>
    27ee:	0f ef       	ldi	r16, 0xFF	; 255
    27f0:	1f ef       	ldi	r17, 0xFF	; 255
    27f2:	c8 01       	movw	r24, r16
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <__ultoa_invert>:
    27fe:	fa 01       	movw	r30, r20
    2800:	aa 27       	eor	r26, r26
    2802:	28 30       	cpi	r18, 0x08	; 8
    2804:	51 f1       	breq	.+84     	; 0x285a <__ultoa_invert+0x5c>
    2806:	20 31       	cpi	r18, 0x10	; 16
    2808:	81 f1       	breq	.+96     	; 0x286a <__ultoa_invert+0x6c>
    280a:	e8 94       	clt
    280c:	6f 93       	push	r22
    280e:	6e 7f       	andi	r22, 0xFE	; 254
    2810:	6e 5f       	subi	r22, 0xFE	; 254
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	8f 4f       	sbci	r24, 0xFF	; 255
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	af 4f       	sbci	r26, 0xFF	; 255
    281a:	b1 e0       	ldi	r27, 0x01	; 1
    281c:	3e d0       	rcall	.+124    	; 0x289a <__ultoa_invert+0x9c>
    281e:	b4 e0       	ldi	r27, 0x04	; 4
    2820:	3c d0       	rcall	.+120    	; 0x289a <__ultoa_invert+0x9c>
    2822:	67 0f       	add	r22, r23
    2824:	78 1f       	adc	r23, r24
    2826:	89 1f       	adc	r24, r25
    2828:	9a 1f       	adc	r25, r26
    282a:	a1 1d       	adc	r26, r1
    282c:	68 0f       	add	r22, r24
    282e:	79 1f       	adc	r23, r25
    2830:	8a 1f       	adc	r24, r26
    2832:	91 1d       	adc	r25, r1
    2834:	a1 1d       	adc	r26, r1
    2836:	6a 0f       	add	r22, r26
    2838:	71 1d       	adc	r23, r1
    283a:	81 1d       	adc	r24, r1
    283c:	91 1d       	adc	r25, r1
    283e:	a1 1d       	adc	r26, r1
    2840:	20 d0       	rcall	.+64     	; 0x2882 <__ultoa_invert+0x84>
    2842:	09 f4       	brne	.+2      	; 0x2846 <__ultoa_invert+0x48>
    2844:	68 94       	set
    2846:	3f 91       	pop	r19
    2848:	2a e0       	ldi	r18, 0x0A	; 10
    284a:	26 9f       	mul	r18, r22
    284c:	11 24       	eor	r1, r1
    284e:	30 19       	sub	r19, r0
    2850:	30 5d       	subi	r19, 0xD0	; 208
    2852:	31 93       	st	Z+, r19
    2854:	de f6       	brtc	.-74     	; 0x280c <__ultoa_invert+0xe>
    2856:	cf 01       	movw	r24, r30
    2858:	08 95       	ret
    285a:	46 2f       	mov	r20, r22
    285c:	47 70       	andi	r20, 0x07	; 7
    285e:	40 5d       	subi	r20, 0xD0	; 208
    2860:	41 93       	st	Z+, r20
    2862:	b3 e0       	ldi	r27, 0x03	; 3
    2864:	0f d0       	rcall	.+30     	; 0x2884 <__ultoa_invert+0x86>
    2866:	c9 f7       	brne	.-14     	; 0x285a <__ultoa_invert+0x5c>
    2868:	f6 cf       	rjmp	.-20     	; 0x2856 <__ultoa_invert+0x58>
    286a:	46 2f       	mov	r20, r22
    286c:	4f 70       	andi	r20, 0x0F	; 15
    286e:	40 5d       	subi	r20, 0xD0	; 208
    2870:	4a 33       	cpi	r20, 0x3A	; 58
    2872:	18 f0       	brcs	.+6      	; 0x287a <__ultoa_invert+0x7c>
    2874:	49 5d       	subi	r20, 0xD9	; 217
    2876:	31 fd       	sbrc	r19, 1
    2878:	40 52       	subi	r20, 0x20	; 32
    287a:	41 93       	st	Z+, r20
    287c:	02 d0       	rcall	.+4      	; 0x2882 <__ultoa_invert+0x84>
    287e:	a9 f7       	brne	.-22     	; 0x286a <__ultoa_invert+0x6c>
    2880:	ea cf       	rjmp	.-44     	; 0x2856 <__ultoa_invert+0x58>
    2882:	b4 e0       	ldi	r27, 0x04	; 4
    2884:	a6 95       	lsr	r26
    2886:	97 95       	ror	r25
    2888:	87 95       	ror	r24
    288a:	77 95       	ror	r23
    288c:	67 95       	ror	r22
    288e:	ba 95       	dec	r27
    2890:	c9 f7       	brne	.-14     	; 0x2884 <__ultoa_invert+0x86>
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	61 05       	cpc	r22, r1
    2896:	71 05       	cpc	r23, r1
    2898:	08 95       	ret
    289a:	9b 01       	movw	r18, r22
    289c:	ac 01       	movw	r20, r24
    289e:	0a 2e       	mov	r0, r26
    28a0:	06 94       	lsr	r0
    28a2:	57 95       	ror	r21
    28a4:	47 95       	ror	r20
    28a6:	37 95       	ror	r19
    28a8:	27 95       	ror	r18
    28aa:	ba 95       	dec	r27
    28ac:	c9 f7       	brne	.-14     	; 0x28a0 <__ultoa_invert+0xa2>
    28ae:	62 0f       	add	r22, r18
    28b0:	73 1f       	adc	r23, r19
    28b2:	84 1f       	adc	r24, r20
    28b4:	95 1f       	adc	r25, r21
    28b6:	a0 1d       	adc	r26, r0
    28b8:	08 95       	ret

000028ba <_exit>:
    28ba:	f8 94       	cli

000028bc <__stop_program>:
    28bc:	ff cf       	rjmp	.-2      	; 0x28bc <__stop_program>
