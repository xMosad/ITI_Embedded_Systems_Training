
26-ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002b52  00002be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  00800082  00800082  00002c08  2**0
                  ALLOC
  3 .stab         0000204c  00000000  00000000  00002c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f1  00000000  00000000  00004c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000098d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a493  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_1>
       8:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_2>
       c:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 12 	call	0x2414	; 0x2414 <main>
      8a:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 df 12 	jmp	0x25be	; 0x25be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EXTI_voidInt0Init>:
void(* INT1_ISR)(void) = NULL ;
void(* INT2_ISR)(void) = NULL ;


void EXTI_voidInt0Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	#elif EXTI_INT0_SENSE_CONTROL == FALLING_EDGE
		CLR_BIT(MCUCR , MCUCR_ISC00);
		SET_BIT(MCUCR , MCUCR_ISC01);
		
	#elif EXTI_INT0_SENSE_CONTROL == RISING_EDGE 
		SET_BIT(MCUCR , MCUCR_ISC00);
     b4e:	a5 e5       	ldi	r26, 0x55	; 85
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e5 e5       	ldi	r30, 0x55	; 85
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
     b5c:	a5 e5       	ldi	r26, 0x55	; 85
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e5 e5       	ldi	r30, 0x55	; 85
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c 93       	st	X, r24

	#endif
	
	/* Init initial interrupt state */
	#if EXTI_INT0_INITIAL_STATE   == ENABLE
		SET_BIT(GICR , GICR_INT0);
     b6a:	ab e5       	ldi	r26, 0x5B	; 91
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb e5       	ldi	r30, 0x5B	; 91
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
		CLR_BIT(GICR , GICR_INT0);
		
	#else 
		#warning (" Wrong Configuration !!")
	#endif
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXTI_voidInt0SetSenseControl>:

void EXTI_voidInt0SetSenseControl(u8 Cpy_u8SenseVal)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <EXTI_voidInt0SetSenseControl+0x6>
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	switch (Cpy_u8SenseVal)
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	3b 83       	std	Y+3, r19	; 0x03
     b94:	2a 83       	std	Y+2, r18	; 0x02
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	91 05       	cpc	r25, r1
     b9e:	21 f1       	breq	.+72     	; 0xbe8 <EXTI_voidInt0SetSenseControl+0x6a>
     ba0:	2a 81       	ldd	r18, Y+2	; 0x02
     ba2:	3b 81       	ldd	r19, Y+3	; 0x03
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f4       	brge	.+10     	; 0xbb4 <EXTI_voidInt0SetSenseControl+0x36>
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	9b 81       	ldd	r25, Y+3	; 0x03
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	61 f0       	breq	.+24     	; 0xbca <EXTI_voidInt0SetSenseControl+0x4c>
     bb2:	46 c0       	rjmp	.+140    	; 0xc40 <EXTI_voidInt0SetSenseControl+0xc2>
     bb4:	2a 81       	ldd	r18, Y+2	; 0x02
     bb6:	3b 81       	ldd	r19, Y+3	; 0x03
     bb8:	22 30       	cpi	r18, 0x02	; 2
     bba:	31 05       	cpc	r19, r1
     bbc:	21 f1       	breq	.+72     	; 0xc06 <EXTI_voidInt0SetSenseControl+0x88>
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	9b 81       	ldd	r25, Y+3	; 0x03
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	91 05       	cpc	r25, r1
     bc6:	71 f1       	breq	.+92     	; 0xc24 <EXTI_voidInt0SetSenseControl+0xa6>
     bc8:	3b c0       	rjmp	.+118    	; 0xc40 <EXTI_voidInt0SetSenseControl+0xc2>
	{
		case EXTI_LOW_LEVEL :
			CLR_BIT(MCUCR , MCUCR_ISC00);
     bca:	a5 e5       	ldi	r26, 0x55	; 85
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e5 e5       	ldi	r30, 0x55	; 85
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR , MCUCR_ISC01);
     bd8:	a5 e5       	ldi	r26, 0x55	; 85
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e5 e5       	ldi	r30, 0x55	; 85
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8d 7f       	andi	r24, 0xFD	; 253
     be4:	8c 93       	st	X, r24
     be6:	2c c0       	rjmp	.+88     	; 0xc40 <EXTI_voidInt0SetSenseControl+0xc2>
			break;

		case EXTI_ON_CHANGE :
			SET_BIT(MCUCR , MCUCR_ISC00);
     be8:	a5 e5       	ldi	r26, 0x55	; 85
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e5 e5       	ldi	r30, 0x55	; 85
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR , MCUCR_ISC01);
     bf6:	a5 e5       	ldi	r26, 0x55	; 85
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e5       	ldi	r30, 0x55	; 85
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8d 7f       	andi	r24, 0xFD	; 253
     c02:	8c 93       	st	X, r24
     c04:	1d c0       	rjmp	.+58     	; 0xc40 <EXTI_voidInt0SetSenseControl+0xc2>
			break;

		case EXTI_FALLING_EDGE :
			CLR_BIT(MCUCR , MCUCR_ISC00);
     c06:	a5 e5       	ldi	r26, 0x55	; 85
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e5 e5       	ldi	r30, 0x55	; 85
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	8c 93       	st	X, r24
			SET_BIT(MCUCR , MCUCR_ISC01);
     c14:	a5 e5       	ldi	r26, 0x55	; 85
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e5 e5       	ldi	r30, 0x55	; 85
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	82 60       	ori	r24, 0x02	; 2
     c20:	8c 93       	st	X, r24
     c22:	0e c0       	rjmp	.+28     	; 0xc40 <EXTI_voidInt0SetSenseControl+0xc2>
			break;

		case EXTI_RISING_EDGE :
			SET_BIT(MCUCR , MCUCR_ISC00);
     c24:	a5 e5       	ldi	r26, 0x55	; 85
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e5 e5       	ldi	r30, 0x55	; 85
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	8c 93       	st	X, r24
			SET_BIT(MCUCR , MCUCR_ISC01);
     c32:	a5 e5       	ldi	r26, 0x55	; 85
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e5 e5       	ldi	r30, 0x55	; 85
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	82 60       	ori	r24, 0x02	; 2
     c3e:	8c 93       	st	X, r24
			break;

		default : break ;
	}
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <EXTI_voidInt0DisableInterrupt>:

void EXTI_voidInt0DisableInterrupt(void)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR , GICR_INT0);
     c54:	ab e5       	ldi	r26, 0x5B	; 91
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	eb e5       	ldi	r30, 0x5B	; 91
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8f 7b       	andi	r24, 0xBF	; 191
     c60:	8c 93       	st	X, r24
}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
	#elif EXTI_INT1_SENSE_CONTROL == ON_CHANGE 
		SET_BIT(MCUCR , MCUCR_ISC10);
		CLR_BIT(MCUCR , MCUCR_ISC11);
			
	#elif EXTI_INT1_SENSE_CONTROL == FALLING_EDGE
		CLR_BIT(MCUCR , MCUCR_ISC10);
     c70:	a5 e5       	ldi	r26, 0x55	; 85
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e5 e5       	ldi	r30, 0x55	; 85
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8b 7f       	andi	r24, 0xFB	; 251
     c7c:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC11);
     c7e:	a5 e5       	ldi	r26, 0x55	; 85
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e5 e5       	ldi	r30, 0x55	; 85
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 60       	ori	r24, 0x08	; 8
     c8a:	8c 93       	st	X, r24
	/* Init initial interrupt state */
	#if EXTI_INT1_INITIAL_STATE   == ENABLE
		SET_BIT(GICR , GICR_INT1);
		
	#elif EXTI_INT1_INITIAL_STATE == DISABLE
		CLR_BIT(GICR , GICR_INT1);
     c8c:	ab e5       	ldi	r26, 0x5B	; 91
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	eb e5       	ldi	r30, 0x5B	; 91
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8f 77       	andi	r24, 0x7F	; 127
     c98:	8c 93       	st	X, r24
	#else 
		#warning (" Wrong Configuration !!")
	#endif
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	/* Init Sense Control */			
	#if EXTI_INT2_SENSE_CONTROL == FALLING_EDGE
		CLR_BIT(MCUCSR , MCUCSR_ISC2);
     ca8:	a4 e5       	ldi	r26, 0x54	; 84
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e4 e5       	ldi	r30, 0x54	; 84
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 7b       	andi	r24, 0xBF	; 191
     cb4:	8c 93       	st	X, r24
	/* Init initial interrupt state */
	#if EXTI_INT2_INITIAL_STATE   == ENABLE
		SET_BIT(GICR , GICR_INT2);
		
	#elif EXTI_INT2_INITIAL_STATE == DISABLE
		CLR_BIT(GICR , GICR_INT2);
     cb6:	ab e5       	ldi	r26, 0x5B	; 91
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	eb e5       	ldi	r30, 0x5B	; 91
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 7d       	andi	r24, 0xDF	; 223
     cc2:	8c 93       	st	X, r24
		
	#else 
		#warning (" Wrong Configuration !!")
	#endif
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <EXTI_u8SetInt0CallBack>:


u8 EXTI_u8SetInt0CallBack (void(* func)(void))
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <EXTI_u8SetInt0CallBack+0x6>
     cd0:	0f 92       	push	r0
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9b 83       	std	Y+3, r25	; 0x03
     cd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_error = OK ;
     cda:	19 82       	std	Y+1, r1	; 0x01
	if (func != NULL)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	39 f0       	breq	.+14     	; 0xcf2 <EXTI_u8SetInt0CallBack+0x28>
	{
		INT0_ISR = func ;
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	9b 81       	ldd	r25, Y+3	; 0x03
     ce8:	90 93 83 00 	sts	0x0083, r25
     cec:	80 93 82 00 	sts	0x0082, r24
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <EXTI_u8SetInt0CallBack+0x2c>
	}
	else 
	{
		Local_error = N_OK;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error ;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <EXTI_u8SetInt1CallBack>:

u8 EXTI_u8SetInt1CallBack (void(* func)(void))
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <EXTI_u8SetInt1CallBack+0x6>
     d0a:	0f 92       	push	r0
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	9b 83       	std	Y+3, r25	; 0x03
     d12:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_error = OK ;
     d14:	19 82       	std	Y+1, r1	; 0x01
	if (func != NULL)
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	9b 81       	ldd	r25, Y+3	; 0x03
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	39 f0       	breq	.+14     	; 0xd2c <EXTI_u8SetInt1CallBack+0x28>
	{
		INT1_ISR = func ;
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	90 93 85 00 	sts	0x0085, r25
     d26:	80 93 84 00 	sts	0x0084, r24
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <EXTI_u8SetInt1CallBack+0x2c>
	}
	else 
	{
		Local_error = N_OK;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error ;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <EXTI_u8SetInt2CallBack>:

u8 EXTI_u8SetInt2CallBack (void(* func)(void))
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <EXTI_u8SetInt2CallBack+0x6>
     d44:	0f 92       	push	r0
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	9b 83       	std	Y+3, r25	; 0x03
     d4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_error = OK ;
     d4e:	19 82       	std	Y+1, r1	; 0x01
	if (func != NULL)
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	39 f0       	breq	.+14     	; 0xd66 <EXTI_u8SetInt2CallBack+0x28>
	{
		INT2_ISR = func ;
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	90 93 87 00 	sts	0x0087, r25
     d60:	80 93 86 00 	sts	0x0086, r24
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <EXTI_u8SetInt2CallBack+0x2c>
	}
	else 
	{
		Local_error = N_OK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error ;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <__vector_1>:


/* ISR  for External interrupt 0 */
void __vector_1 (void) __attribute__((signal)) ;
void __vector_1 (void)
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	INT0_ISR();
     da2:	e0 91 82 00 	lds	r30, 0x0082
     da6:	f0 91 83 00 	lds	r31, 0x0083
     daa:	09 95       	icall
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_2>:

/* ISR  for External interrupt 1 */
void __vector_2 (void) __attribute__((signal)) ;
void __vector_2 (void)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	INT1_ISR();
     dfc:	e0 91 84 00 	lds	r30, 0x0084
     e00:	f0 91 85 00 	lds	r31, 0x0085
     e04:	09 95       	icall
}
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <__vector_3>:

/* ISR  for External interrupt 2 */
void __vector_3 (void) __attribute__((signal)) ;
void __vector_3 (void)
{
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	INT2_ISR();
     e56:	e0 91 86 00 	lds	r30, 0x0086
     e5a:	f0 91 87 00 	lds	r31, 0x0087
     e5e:	09 95       	icall
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <GIE_voidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"
#include "GIE_Cfg.h"

void GIE_voidEnable(void)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
     e8e:	af e5       	ldi	r26, 0x5F	; 95
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ef e5       	ldi	r30, 0x5F	; 95
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 68       	ori	r24, 0x80	; 128
     e9a:	8c 93       	st	X, r24
}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
     eaa:	af e5       	ldi	r26, 0x5F	; 95
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ef e5       	ldi	r30, 0x5F	; 95
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 77       	andi	r24, 0x7F	; 127
     eb6:	8c 93       	st	X, r24
}
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <GPIO_voidSetPinValue>:

#include "GPIO_Interface.h"
#include "GPIO_Private.h"

void GPIO_voidSetPinValue(u8 port_id , u8 pin , u8 value)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	27 97       	sbiw	r28, 0x07	; 7
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	6a 83       	std	Y+2, r22	; 0x02
     ed6:	4b 83       	std	Y+3, r20	; 0x03
	if (value == HIGH)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	09 f0       	breq	.+2      	; 0xee0 <GPIO_voidSetPinValue+0x22>
     ede:	6f c0       	rjmp	.+222    	; 0xfbe <GPIO_voidSetPinValue+0x100>
	{
		switch (port_id)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3f 83       	std	Y+7, r19	; 0x07
     ee8:	2e 83       	std	Y+6, r18	; 0x06
     eea:	8e 81       	ldd	r24, Y+6	; 0x06
     eec:	9f 81       	ldd	r25, Y+7	; 0x07
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	49 f1       	breq	.+82     	; 0xf46 <GPIO_voidSetPinValue+0x88>
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	2c f4       	brge	.+10     	; 0xf08 <GPIO_voidSetPinValue+0x4a>
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	9f 81       	ldd	r25, Y+7	; 0x07
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	61 f0       	breq	.+24     	; 0xf1e <GPIO_voidSetPinValue+0x60>
     f06:	d2 c0       	rjmp	.+420    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
     f08:	2e 81       	ldd	r18, Y+6	; 0x06
     f0a:	3f 81       	ldd	r19, Y+7	; 0x07
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	71 f1       	breq	.+92     	; 0xf6e <GPIO_voidSetPinValue+0xb0>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	e9 f1       	breq	.+122    	; 0xf96 <GPIO_voidSetPinValue+0xd8>
     f1c:	c7 c0       	rjmp	.+398    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_PORTA , pin);
     f1e:	ab e3       	ldi	r26, 0x3B	; 59
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_voidSetPinValue+0x7e>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_voidSetPinValue+0x7a>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	b3 c0       	rjmp	.+358    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_PORTB , pin);
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_voidSetPinValue+0xa6>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_voidSetPinValue+0xa2>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	9f c0       	rjmp	.+318    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_PORTC , pin);
     f6e:	a5 e3       	ldi	r26, 0x35	; 53
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e3       	ldi	r30, 0x35	; 53
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_voidSetPinValue+0xce>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_voidSetPinValue+0xca>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	8b c0       	rjmp	.+278    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_PORTD , pin);
     f96:	a2 e3       	ldi	r26, 0x32	; 50
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e3       	ldi	r30, 0x32	; 50
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_voidSetPinValue+0xf6>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_voidSetPinValue+0xf2>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	77 c0       	rjmp	.+238    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>

			default:
			break;
		}
	}
	else if (value == LOW)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	88 23       	and	r24, r24
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <GPIO_voidSetPinValue+0x108>
     fc4:	73 c0       	rjmp	.+230    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
	{
		switch (port_id)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3d 83       	std	Y+5, r19	; 0x05
     fce:	2c 83       	std	Y+4, r18	; 0x04
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	59 f1       	breq	.+86     	; 0x1030 <GPIO_voidSetPinValue+0x172>
     fda:	2c 81       	ldd	r18, Y+4	; 0x04
     fdc:	3d 81       	ldd	r19, Y+5	; 0x05
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	2c f4       	brge	.+10     	; 0xfee <GPIO_voidSetPinValue+0x130>
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	69 f0       	breq	.+26     	; 0x1006 <GPIO_voidSetPinValue+0x148>
     fec:	5f c0       	rjmp	.+190    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	89 f1       	breq	.+98     	; 0x105a <GPIO_voidSetPinValue+0x19c>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <GPIO_voidSetPinValue+0x146>
    1002:	40 c0       	rjmp	.+128    	; 0x1084 <GPIO_voidSetPinValue+0x1c6>
    1004:	53 c0       	rjmp	.+166    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_PORTA , pin);
    1006:	ab e3       	ldi	r26, 0x3B	; 59
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	eb e3       	ldi	r30, 0x3B	; 59
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <GPIO_voidSetPinValue+0x166>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <GPIO_voidSetPinValue+0x162>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	3e c0       	rjmp	.+124    	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_PORTB , pin);
    1030:	a8 e3       	ldi	r26, 0x38	; 56
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e8 e3       	ldi	r30, 0x38	; 56
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_voidSetPinValue+0x190>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_voidSetPinValue+0x18c>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	29 c0       	rjmp	.+82     	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_PORTC , pin);
    105a:	a5 e3       	ldi	r26, 0x35	; 53
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e3       	ldi	r30, 0x35	; 53
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_voidSetPinValue+0x1ba>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_voidSetPinValue+0x1b6>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_PORTD , pin);
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <GPIO_voidSetPinValue+0x1e4>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <GPIO_voidSetPinValue+0x1e0>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
	{
		/* Should not be here */
	}


}
    10ac:	27 96       	adiw	r28, 0x07	; 7
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <GPIO_voidSetPinDirection>:

void GPIO_voidSetPinDirection(u8 port_id , u8 pin , u8 dirc )
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	27 97       	sbiw	r28, 0x07	; 7
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	6a 83       	std	Y+2, r22	; 0x02
    10d6:	4b 83       	std	Y+3, r20	; 0x03
	if (dirc == OUTPUT)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <GPIO_voidSetPinDirection+0x22>
    10de:	6f c0       	rjmp	.+222    	; 0x11be <GPIO_voidSetPinDirection+0x100>
	{
		switch (port_id)
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3f 83       	std	Y+7, r19	; 0x07
    10e8:	2e 83       	std	Y+6, r18	; 0x06
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	9f 81       	ldd	r25, Y+7	; 0x07
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	91 05       	cpc	r25, r1
    10f2:	49 f1       	breq	.+82     	; 0x1146 <GPIO_voidSetPinDirection+0x88>
    10f4:	2e 81       	ldd	r18, Y+6	; 0x06
    10f6:	3f 81       	ldd	r19, Y+7	; 0x07
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f4       	brge	.+10     	; 0x1108 <GPIO_voidSetPinDirection+0x4a>
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	9f 81       	ldd	r25, Y+7	; 0x07
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	61 f0       	breq	.+24     	; 0x111e <GPIO_voidSetPinDirection+0x60>
    1106:	d2 c0       	rjmp	.+420    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
    1108:	2e 81       	ldd	r18, Y+6	; 0x06
    110a:	3f 81       	ldd	r19, Y+7	; 0x07
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	71 f1       	breq	.+92     	; 0x116e <GPIO_voidSetPinDirection+0xb0>
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	e9 f1       	breq	.+122    	; 0x1196 <GPIO_voidSetPinDirection+0xd8>
    111c:	c7 c0       	rjmp	.+398    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_DDRA , pin);
    111e:	aa e3       	ldi	r26, 0x3A	; 58
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	ea e3       	ldi	r30, 0x3A	; 58
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_voidSetPinDirection+0x7e>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_voidSetPinDirection+0x7a>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	b3 c0       	rjmp	.+358    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_DDRB , pin);
    1146:	a7 e3       	ldi	r26, 0x37	; 55
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e7 e3       	ldi	r30, 0x37	; 55
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_voidSetPinDirection+0xa6>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_voidSetPinDirection+0xa2>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	9f c0       	rjmp	.+318    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_DDRC , pin);
    116e:	a4 e3       	ldi	r26, 0x34	; 52
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e4 e3       	ldi	r30, 0x34	; 52
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_voidSetPinDirection+0xce>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_voidSetPinDirection+0xca>
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	8b c0       	rjmp	.+278    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_DDRD , pin);
    1196:	a1 e3       	ldi	r26, 0x31	; 49
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e1 e3       	ldi	r30, 0x31	; 49
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_voidSetPinDirection+0xf6>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_voidSetPinDirection+0xf2>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	77 c0       	rjmp	.+238    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>

			default:
			break;
		}
	}
	else if (dirc == INPUT)
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 23       	and	r24, r24
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <GPIO_voidSetPinDirection+0x108>
    11c4:	73 c0       	rjmp	.+230    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
	{
		switch (port_id)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3d 83       	std	Y+5, r19	; 0x05
    11ce:	2c 83       	std	Y+4, r18	; 0x04
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	59 f1       	breq	.+86     	; 0x1230 <GPIO_voidSetPinDirection+0x172>
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <GPIO_voidSetPinDirection+0x130>
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	69 f0       	breq	.+26     	; 0x1206 <GPIO_voidSetPinDirection+0x148>
    11ec:	5f c0       	rjmp	.+190    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
    11ee:	2c 81       	ldd	r18, Y+4	; 0x04
    11f0:	3d 81       	ldd	r19, Y+5	; 0x05
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	89 f1       	breq	.+98     	; 0x125a <GPIO_voidSetPinDirection+0x19c>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <GPIO_voidSetPinDirection+0x146>
    1202:	40 c0       	rjmp	.+128    	; 0x1284 <GPIO_voidSetPinDirection+0x1c6>
    1204:	53 c0       	rjmp	.+166    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_DDRA , pin);
    1206:	aa e3       	ldi	r26, 0x3A	; 58
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ea e3       	ldi	r30, 0x3A	; 58
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_voidSetPinDirection+0x166>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_voidSetPinDirection+0x162>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	3e c0       	rjmp	.+124    	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_DDRB , pin);
    1230:	a7 e3       	ldi	r26, 0x37	; 55
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e7 e3       	ldi	r30, 0x37	; 55
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_voidSetPinDirection+0x190>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_voidSetPinDirection+0x18c>
    1252:	80 95       	com	r24
    1254:	84 23       	and	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	29 c0       	rjmp	.+82     	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_DDRC , pin);
    125a:	a4 e3       	ldi	r26, 0x34	; 52
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e4 e3       	ldi	r30, 0x34	; 52
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <GPIO_voidSetPinDirection+0x1ba>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <GPIO_voidSetPinDirection+0x1b6>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_DDRD , pin);
    1284:	a1 e3       	ldi	r26, 0x31	; 49
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e1 e3       	ldi	r30, 0x31	; 49
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <GPIO_voidSetPinDirection+0x1e4>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <GPIO_voidSetPinDirection+0x1e0>
    12a6:	80 95       	com	r24
    12a8:	84 23       	and	r24, r20
    12aa:	8c 93       	st	X, r24
	}
	else
	{
		/* Should not be here */
	}
}
    12ac:	27 96       	adiw	r28, 0x07	; 7
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <GPIO_voidSetPortValue>:

void GPIO_voidSetPortValue(u8 port_id , u8 value)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <GPIO_voidSetPortValue+0x6>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <GPIO_voidSetPortValue+0x8>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_id){
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3c 83       	std	Y+4, r19	; 0x04
    12d6:	2b 83       	std	Y+3, r18	; 0x03
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	d1 f0       	breq	.+52     	; 0x1316 <GPIO_voidSetPortValue+0x58>
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <GPIO_voidSetPortValue+0x38>
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	61 f0       	breq	.+24     	; 0x130c <GPIO_voidSetPortValue+0x4e>
    12f4:	1e c0       	rjmp	.+60     	; 0x1332 <GPIO_voidSetPortValue+0x74>
    12f6:	2b 81       	ldd	r18, Y+3	; 0x03
    12f8:	3c 81       	ldd	r19, Y+4	; 0x04
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	81 f0       	breq	.+32     	; 0x1320 <GPIO_voidSetPortValue+0x62>
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	81 f0       	breq	.+32     	; 0x132a <GPIO_voidSetPortValue+0x6c>
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <GPIO_voidSetPortValue+0x74>
		case PORTA :
			GPIO_PORTA = value ;
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTB :
			GPIO_PORTB = value ;
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTC :
			GPIO_PORTC = value ;
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	80 83       	st	Z, r24
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTD :
			GPIO_PORTD = value ;
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <GPIO_voidSetPortDirection>:

void GPIO_voidSetPortDirection(u8 port_id , u8 dirc)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <GPIO_voidSetPortDirection+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <GPIO_voidSetPortDirection+0x8>
    1348:	00 d0       	rcall	.+0      	; 0x134a <GPIO_voidSetPortDirection+0xa>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	6a 83       	std	Y+2, r22	; 0x02
	if (dirc == OUTPUT)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	99 f5       	brne	.+102    	; 0x13be <GPIO_voidSetPortDirection+0x7e>
	{
		switch (port_id){
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3e 83       	std	Y+6, r19	; 0x06
    1360:	2d 83       	std	Y+5, r18	; 0x05
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	d1 f0       	breq	.+52     	; 0x13a0 <GPIO_voidSetPortDirection+0x60>
    136c:	2d 81       	ldd	r18, Y+5	; 0x05
    136e:	3e 81       	ldd	r19, Y+6	; 0x06
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <GPIO_voidSetPortDirection+0x40>
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	61 f0       	breq	.+24     	; 0x1396 <GPIO_voidSetPortDirection+0x56>
    137e:	50 c0       	rjmp	.+160    	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
    1380:	2d 81       	ldd	r18, Y+5	; 0x05
    1382:	3e 81       	ldd	r19, Y+6	; 0x06
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	81 f0       	breq	.+32     	; 0x13aa <GPIO_voidSetPortDirection+0x6a>
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	81 f0       	breq	.+32     	; 0x13b4 <GPIO_voidSetPortDirection+0x74>
    1394:	45 c0       	rjmp	.+138    	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 255;
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	80 83       	st	Z, r24
    139e:	40 c0       	rjmp	.+128    	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTB :
				GPIO_DDRB = 255;
    13a0:	e7 e3       	ldi	r30, 0x37	; 55
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	80 83       	st	Z, r24
    13a8:	3b c0       	rjmp	.+118    	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTC :
				GPIO_DDRC = 255;
    13aa:	e4 e3       	ldi	r30, 0x34	; 52
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	80 83       	st	Z, r24
    13b2:	36 c0       	rjmp	.+108    	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTD :
				GPIO_DDRD = 255;
    13b4:	e1 e3       	ldi	r30, 0x31	; 49
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	80 83       	st	Z, r24
    13bc:	31 c0       	rjmp	.+98     	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
				break;
			default:
				break;
		}
	}
	else if (dirc == INPUT)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	88 23       	and	r24, r24
    13c2:	71 f5       	brne	.+92     	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
	{
		switch (port_id){
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3c 83       	std	Y+4, r19	; 0x04
    13cc:	2b 83       	std	Y+3, r18	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	c9 f0       	breq	.+50     	; 0x140a <GPIO_voidSetPortDirection+0xca>
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <GPIO_voidSetPortDirection+0xac>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 f0       	breq	.+24     	; 0x1402 <GPIO_voidSetPortDirection+0xc2>
    13ea:	1a c0       	rjmp	.+52     	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
    13ec:	2b 81       	ldd	r18, Y+3	; 0x03
    13ee:	3c 81       	ldd	r19, Y+4	; 0x04
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	71 f0       	breq	.+28     	; 0x1412 <GPIO_voidSetPortDirection+0xd2>
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	69 f0       	breq	.+26     	; 0x141a <GPIO_voidSetPortDirection+0xda>
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 0;
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	10 82       	st	Z, r1
    1408:	0b c0       	rjmp	.+22     	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTB :
				GPIO_DDRB = 0;
    140a:	e7 e3       	ldi	r30, 0x37	; 55
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	10 82       	st	Z, r1
    1410:	07 c0       	rjmp	.+14     	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTC :
				GPIO_DDRC = 0;
    1412:	e4 e3       	ldi	r30, 0x34	; 52
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	10 82       	st	Z, r1
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTD :
				GPIO_DDRD = 0;
    141a:	e1 e3       	ldi	r30, 0x31	; 49
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	10 82       	st	Z, r1
		}
	}
	else {

	}
}
    1420:	26 96       	adiw	r28, 0x06	; 6
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue(u8 port_id , u8 pin)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <GPIO_u8GetPinValue+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <GPIO_u8GetPinValue+0x8>
    143a:	0f 92       	push	r0
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	6b 83       	std	Y+3, r22	; 0x03
	u8 value ;
	switch (port_id)
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3d 83       	std	Y+5, r19	; 0x05
    144c:	2c 83       	std	Y+4, r18	; 0x04
    144e:	4c 81       	ldd	r20, Y+4	; 0x04
    1450:	5d 81       	ldd	r21, Y+5	; 0x05
    1452:	41 30       	cpi	r20, 0x01	; 1
    1454:	51 05       	cpc	r21, r1
    1456:	41 f1       	breq	.+80     	; 0x14a8 <GPIO_u8GetPinValue+0x76>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	91 05       	cpc	r25, r1
    1460:	34 f4       	brge	.+12     	; 0x146e <GPIO_u8GetPinValue+0x3c>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	61 f0       	breq	.+24     	; 0x1484 <GPIO_u8GetPinValue+0x52>
    146c:	52 c0       	rjmp	.+164    	; 0x1512 <GPIO_u8GetPinValue+0xe0>
    146e:	4c 81       	ldd	r20, Y+4	; 0x04
    1470:	5d 81       	ldd	r21, Y+5	; 0x05
    1472:	42 30       	cpi	r20, 0x02	; 2
    1474:	51 05       	cpc	r21, r1
    1476:	51 f1       	breq	.+84     	; 0x14cc <GPIO_u8GetPinValue+0x9a>
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	b9 f1       	breq	.+110    	; 0x14f0 <GPIO_u8GetPinValue+0xbe>
    1482:	47 c0       	rjmp	.+142    	; 0x1512 <GPIO_u8GetPinValue+0xe0>
	{
		case PORTA :
		value = GET_BIT(GPIO_PINA , pin);
    1484:	e9 e3       	ldi	r30, 0x39	; 57
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a9 01       	movw	r20, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_u8GetPinValue+0x6a>
    1498:	55 95       	asr	r21
    149a:	47 95       	ror	r20
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_u8GetPinValue+0x66>
    14a0:	ca 01       	movw	r24, r20
    14a2:	81 70       	andi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	35 c0       	rjmp	.+106    	; 0x1512 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTB :
		value = GET_BIT(GPIO_PINB , pin);
    14a8:	e6 e3       	ldi	r30, 0x36	; 54
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a9 01       	movw	r20, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_u8GetPinValue+0x8e>
    14bc:	55 95       	asr	r21
    14be:	47 95       	ror	r20
    14c0:	8a 95       	dec	r24
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_u8GetPinValue+0x8a>
    14c4:	ca 01       	movw	r24, r20
    14c6:	81 70       	andi	r24, 0x01	; 1
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	23 c0       	rjmp	.+70     	; 0x1512 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTC :
		value = GET_BIT(GPIO_PINC , pin);
    14cc:	e3 e3       	ldi	r30, 0x33	; 51
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <GPIO_u8GetPinValue+0xb2>
    14e0:	55 95       	asr	r21
    14e2:	47 95       	ror	r20
    14e4:	8a 95       	dec	r24
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <GPIO_u8GetPinValue+0xae>
    14e8:	ca 01       	movw	r24, r20
    14ea:	81 70       	andi	r24, 0x01	; 1
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	11 c0       	rjmp	.+34     	; 0x1512 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTD :
		value = GET_BIT(GPIO_PIND , pin);
    14f0:	e0 e3       	ldi	r30, 0x30	; 48
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a9 01       	movw	r20, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <GPIO_u8GetPinValue+0xd6>
    1504:	55 95       	asr	r21
    1506:	47 95       	ror	r20
    1508:	8a 95       	dec	r24
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <GPIO_u8GetPinValue+0xd2>
    150c:	ca 01       	movw	r24, r20
    150e:	81 70       	andi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
		break;

		default:
		break;
	}
	return value ;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <LCD_voidInit>:
#include "LCD_Private.h"
#include "LCD_Cfg.h"


void LCD_voidInit(void)
{
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	c4 55       	subi	r28, 0x54	; 84
    1532:	d0 40       	sbci	r29, 0x00	; 0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	fe 01       	movw	r30, r28
    1540:	ef 5a       	subi	r30, 0xAF	; 175
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 ef       	ldi	r26, 0xF0	; 240
    154a:	b1 e4       	ldi	r27, 0x41	; 65
    154c:	80 83       	st	Z, r24
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	a2 83       	std	Z+2, r26	; 0x02
    1552:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	8e 01       	movw	r16, r28
    1556:	03 5b       	subi	r16, 0xB3	; 179
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	fe 01       	movw	r30, r28
    155c:	ef 5a       	subi	r30, 0xAF	; 175
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	93 81       	ldd	r25, Z+3	; 0x03
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a ef       	ldi	r20, 0xFA	; 250
    156e:	54 e4       	ldi	r21, 0x44	; 68
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	f8 01       	movw	r30, r16
    157a:	80 83       	st	Z, r24
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	a2 83       	std	Z+2, r26	; 0x02
    1580:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1582:	fe 01       	movw	r30, r28
    1584:	e3 5b       	subi	r30, 0xB3	; 179
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	44 f4       	brge	.+16     	; 0x15b0 <LCD_voidInit+0x8c>
		__ticks = 1;
    15a0:	fe 01       	movw	r30, r28
    15a2:	e5 5b       	subi	r30, 0xB5	; 181
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
    15ae:	64 c0       	rjmp	.+200    	; 0x1678 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    15b0:	fe 01       	movw	r30, r28
    15b2:	e3 5b       	subi	r30, 0xB3	; 179
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	0c f0       	brlt	.+2      	; 0x15d0 <LCD_voidInit+0xac>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	ef 5a       	subi	r30, 0xAF	; 175
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8e 01       	movw	r16, r28
    15f0:	05 5b       	subi	r16, 0xB5	; 181
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	f8 01       	movw	r30, r16
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	1f c0       	rjmp	.+62     	; 0x1646 <LCD_voidInit+0x122>
    1608:	fe 01       	movw	r30, r28
    160a:	e7 5b       	subi	r30, 0xB7	; 183
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	88 ec       	ldi	r24, 0xC8	; 200
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1616:	fe 01       	movw	r30, r28
    1618:	e7 5b       	subi	r30, 0xB7	; 183
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <LCD_voidInit+0xfc>
    1624:	fe 01       	movw	r30, r28
    1626:	e7 5b       	subi	r30, 0xB7	; 183
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	de 01       	movw	r26, r28
    1630:	a5 5b       	subi	r26, 0xB5	; 181
    1632:	bf 4f       	sbci	r27, 0xFF	; 255
    1634:	fe 01       	movw	r30, r28
    1636:	e5 5b       	subi	r30, 0xB5	; 181
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	fe 01       	movw	r30, r28
    1648:	e5 5b       	subi	r30, 0xB5	; 181
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	d1 f6       	brne	.-76     	; 0x1608 <LCD_voidInit+0xe4>
    1654:	27 c0       	rjmp	.+78     	; 0x16a4 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1656:	8e 01       	movw	r16, r28
    1658:	05 5b       	subi	r16, 0xB5	; 181
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	fe 01       	movw	r30, r28
    165e:	e3 5b       	subi	r30, 0xB3	; 179
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	f8 01       	movw	r30, r16
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    1678:	de 01       	movw	r26, r28
    167a:	a9 5b       	subi	r26, 0xB9	; 185
    167c:	bf 4f       	sbci	r27, 0xFF	; 255
    167e:	fe 01       	movw	r30, r28
    1680:	e5 5b       	subi	r30, 0xB5	; 181
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	8d 93       	st	X+, r24
    168a:	9c 93       	st	X, r25
    168c:	fe 01       	movw	r30, r28
    168e:	e9 5b       	subi	r30, 0xB9	; 185
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_voidInit+0x172>
    169a:	fe 01       	movw	r30, r28
    169c:	e9 5b       	subi	r30, 0xB9	; 185
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
	_delay_ms(30);

	/* Send command function set */
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    16a4:	88 e3       	ldi	r24, 0x38	; 56
    16a6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>
    16aa:	fe 01       	movw	r30, r28
    16ac:	ed 5b       	subi	r30, 0xBD	; 189
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e2       	ldi	r26, 0x20	; 32
    16b6:	b1 e4       	ldi	r27, 0x41	; 65
    16b8:	80 83       	st	Z, r24
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	a2 83       	std	Z+2, r26	; 0x02
    16be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	8e 01       	movw	r16, r28
    16c2:	01 5c       	subi	r16, 0xC1	; 193
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	fe 01       	movw	r30, r28
    16c8:	ed 5b       	subi	r30, 0xBD	; 189
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a ef       	ldi	r20, 0xFA	; 250
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	f8 01       	movw	r30, r16
    16e6:	80 83       	st	Z, r24
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	a2 83       	std	Z+2, r26	; 0x02
    16ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ee:	fe 01       	movw	r30, r28
    16f0:	ff 96       	adiw	r30, 0x3f	; 63
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	5f e3       	ldi	r21, 0x3F	; 63
    1702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1706:	88 23       	and	r24, r24
    1708:	2c f4       	brge	.+10     	; 0x1714 <LCD_voidInit+0x1f0>
		__ticks = 1;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9e af       	std	Y+62, r25	; 0x3e
    1710:	8d af       	std	Y+61, r24	; 0x3d
    1712:	46 c0       	rjmp	.+140    	; 0x17a0 <LCD_voidInit+0x27c>
	else if (__tmp > 65535)
    1714:	fe 01       	movw	r30, r28
    1716:	ff 96       	adiw	r30, 0x3f	; 63
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172c:	18 16       	cp	r1, r24
    172e:	64 f5       	brge	.+88     	; 0x1788 <LCD_voidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1730:	fe 01       	movw	r30, r28
    1732:	ed 5b       	subi	r30, 0xBD	; 189
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e af       	std	Y+62, r25	; 0x3e
    175c:	8d af       	std	Y+61, r24	; 0x3d
    175e:	0f c0       	rjmp	.+30     	; 0x177e <LCD_voidInit+0x25a>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c af       	std	Y+60, r25	; 0x3c
    1766:	8b af       	std	Y+59, r24	; 0x3b
    1768:	8b ad       	ldd	r24, Y+59	; 0x3b
    176a:	9c ad       	ldd	r25, Y+60	; 0x3c
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_voidInit+0x248>
    1770:	9c af       	std	Y+60, r25	; 0x3c
    1772:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8d ad       	ldd	r24, Y+61	; 0x3d
    1776:	9e ad       	ldd	r25, Y+62	; 0x3e
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9e af       	std	Y+62, r25	; 0x3e
    177c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1780:	9e ad       	ldd	r25, Y+62	; 0x3e
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <LCD_voidInit+0x23c>
    1786:	16 c0       	rjmp	.+44     	; 0x17b4 <LCD_voidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	fe 01       	movw	r30, r28
    178a:	ff 96       	adiw	r30, 0x3f	; 63
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e af       	std	Y+62, r25	; 0x3e
    179e:	8d af       	std	Y+61, r24	; 0x3d
    17a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17a4:	9a af       	std	Y+58, r25	; 0x3a
    17a6:	89 af       	std	Y+57, r24	; 0x39
    17a8:	89 ad       	ldd	r24, Y+57	; 0x39
    17aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_voidInit+0x288>
    17b0:	9a af       	std	Y+58, r25	; 0x3a
    17b2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);

	/* Send command dispaly on */
	LCD_voidSendCommand(lcd_DisplayOn);
    17b4:	8c e0       	ldi	r24, 0x0C	; 12
    17b6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e2       	ldi	r26, 0x20	; 32
    17c0:	b1 e4       	ldi	r27, 0x41	; 65
    17c2:	8d ab       	std	Y+53, r24	; 0x35
    17c4:	9e ab       	std	Y+54, r25	; 0x36
    17c6:	af ab       	std	Y+55, r26	; 0x37
    17c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	6d a9       	ldd	r22, Y+53	; 0x35
    17cc:	7e a9       	ldd	r23, Y+54	; 0x36
    17ce:	8f a9       	ldd	r24, Y+55	; 0x37
    17d0:	98 ad       	ldd	r25, Y+56	; 0x38
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a ef       	ldi	r20, 0xFA	; 250
    17d8:	54 e4       	ldi	r21, 0x44	; 68
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	89 ab       	std	Y+49, r24	; 0x31
    17e4:	9a ab       	std	Y+50, r25	; 0x32
    17e6:	ab ab       	std	Y+51, r26	; 0x33
    17e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ea:	69 a9       	ldd	r22, Y+49	; 0x31
    17ec:	7a a9       	ldd	r23, Y+50	; 0x32
    17ee:	8b a9       	ldd	r24, Y+51	; 0x33
    17f0:	9c a9       	ldd	r25, Y+52	; 0x34
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <LCD_voidInit+0x2e8>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	98 ab       	std	Y+48, r25	; 0x30
    1808:	8f a7       	std	Y+47, r24	; 0x2f
    180a:	3f c0       	rjmp	.+126    	; 0x188a <LCD_voidInit+0x366>
	else if (__tmp > 65535)
    180c:	69 a9       	ldd	r22, Y+49	; 0x31
    180e:	7a a9       	ldd	r23, Y+50	; 0x32
    1810:	8b a9       	ldd	r24, Y+51	; 0x33
    1812:	9c a9       	ldd	r25, Y+52	; 0x34
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <LCD_voidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	6d a9       	ldd	r22, Y+53	; 0x35
    1826:	7e a9       	ldd	r23, Y+54	; 0x36
    1828:	8f a9       	ldd	r24, Y+55	; 0x37
    182a:	98 ad       	ldd	r25, Y+56	; 0x38
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	98 ab       	std	Y+48, r25	; 0x30
    184a:	8f a7       	std	Y+47, r24	; 0x2f
    184c:	0f c0       	rjmp	.+30     	; 0x186c <LCD_voidInit+0x348>
    184e:	88 ec       	ldi	r24, 0xC8	; 200
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9e a7       	std	Y+46, r25	; 0x2e
    1854:	8d a7       	std	Y+45, r24	; 0x2d
    1856:	8d a5       	ldd	r24, Y+45	; 0x2d
    1858:	9e a5       	ldd	r25, Y+46	; 0x2e
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_voidInit+0x336>
    185e:	9e a7       	std	Y+46, r25	; 0x2e
    1860:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8f a5       	ldd	r24, Y+47	; 0x2f
    1864:	98 a9       	ldd	r25, Y+48	; 0x30
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	98 ab       	std	Y+48, r25	; 0x30
    186a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8f a5       	ldd	r24, Y+47	; 0x2f
    186e:	98 a9       	ldd	r25, Y+48	; 0x30
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <LCD_voidInit+0x32a>
    1874:	14 c0       	rjmp	.+40     	; 0x189e <LCD_voidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	69 a9       	ldd	r22, Y+49	; 0x31
    1878:	7a a9       	ldd	r23, Y+50	; 0x32
    187a:	8b a9       	ldd	r24, Y+51	; 0x33
    187c:	9c a9       	ldd	r25, Y+52	; 0x34
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	98 ab       	std	Y+48, r25	; 0x30
    1888:	8f a7       	std	Y+47, r24	; 0x2f
    188a:	8f a5       	ldd	r24, Y+47	; 0x2f
    188c:	98 a9       	ldd	r25, Y+48	; 0x30
    188e:	9c a7       	std	Y+44, r25	; 0x2c
    1890:	8b a7       	std	Y+43, r24	; 0x2b
    1892:	8b a5       	ldd	r24, Y+43	; 0x2b
    1894:	9c a5       	ldd	r25, Y+44	; 0x2c
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_voidInit+0x372>
    189a:	9c a7       	std	Y+44, r25	; 0x2c
    189c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	/* Clear the display  */
	LCD_voidSendCommand(lcd_Clear);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a0 e2       	ldi	r26, 0x20	; 32
    18aa:	b1 e4       	ldi	r27, 0x41	; 65
    18ac:	8f a3       	std	Y+39, r24	; 0x27
    18ae:	98 a7       	std	Y+40, r25	; 0x28
    18b0:	a9 a7       	std	Y+41, r26	; 0x29
    18b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	6f a1       	ldd	r22, Y+39	; 0x27
    18b6:	78 a5       	ldd	r23, Y+40	; 0x28
    18b8:	89 a5       	ldd	r24, Y+41	; 0x29
    18ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4a ef       	ldi	r20, 0xFA	; 250
    18c2:	54 e4       	ldi	r21, 0x44	; 68
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8b a3       	std	Y+35, r24	; 0x23
    18ce:	9c a3       	std	Y+36, r25	; 0x24
    18d0:	ad a3       	std	Y+37, r26	; 0x25
    18d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d4:	6b a1       	ldd	r22, Y+35	; 0x23
    18d6:	7c a1       	ldd	r23, Y+36	; 0x24
    18d8:	8d a1       	ldd	r24, Y+37	; 0x25
    18da:	9e a1       	ldd	r25, Y+38	; 0x26
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	5f e3       	ldi	r21, 0x3F	; 63
    18e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e8:	88 23       	and	r24, r24
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <LCD_voidInit+0x3d2>
		__ticks = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9a a3       	std	Y+34, r25	; 0x22
    18f2:	89 a3       	std	Y+33, r24	; 0x21
    18f4:	3f c0       	rjmp	.+126    	; 0x1974 <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    18f6:	6b a1       	ldd	r22, Y+35	; 0x23
    18f8:	7c a1       	ldd	r23, Y+36	; 0x24
    18fa:	8d a1       	ldd	r24, Y+37	; 0x25
    18fc:	9e a1       	ldd	r25, Y+38	; 0x26
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	3f ef       	ldi	r19, 0xFF	; 255
    1902:	4f e7       	ldi	r20, 0x7F	; 127
    1904:	57 e4       	ldi	r21, 0x47	; 71
    1906:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190a:	18 16       	cp	r1, r24
    190c:	4c f5       	brge	.+82     	; 0x1960 <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190e:	6f a1       	ldd	r22, Y+39	; 0x27
    1910:	78 a5       	ldd	r23, Y+40	; 0x28
    1912:	89 a5       	ldd	r24, Y+41	; 0x29
    1914:	9a a5       	ldd	r25, Y+42	; 0x2a
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e2       	ldi	r20, 0x20	; 32
    191c:	51 e4       	ldi	r21, 0x41	; 65
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9a a3       	std	Y+34, r25	; 0x22
    1934:	89 a3       	std	Y+33, r24	; 0x21
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <LCD_voidInit+0x432>
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	98 a3       	std	Y+32, r25	; 0x20
    193e:	8f 8f       	std	Y+31, r24	; 0x1f
    1940:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1942:	98 a1       	ldd	r25, Y+32	; 0x20
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_voidInit+0x420>
    1948:	98 a3       	std	Y+32, r25	; 0x20
    194a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194c:	89 a1       	ldd	r24, Y+33	; 0x21
    194e:	9a a1       	ldd	r25, Y+34	; 0x22
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	9a a3       	std	Y+34, r25	; 0x22
    1954:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1956:	89 a1       	ldd	r24, Y+33	; 0x21
    1958:	9a a1       	ldd	r25, Y+34	; 0x22
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	69 f7       	brne	.-38     	; 0x1938 <LCD_voidInit+0x414>
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <LCD_voidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	6b a1       	ldd	r22, Y+35	; 0x23
    1962:	7c a1       	ldd	r23, Y+36	; 0x24
    1964:	8d a1       	ldd	r24, Y+37	; 0x25
    1966:	9e a1       	ldd	r25, Y+38	; 0x26
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9a a3       	std	Y+34, r25	; 0x22
    1972:	89 a3       	std	Y+33, r24	; 0x21
    1974:	89 a1       	ldd	r24, Y+33	; 0x21
    1976:	9a a1       	ldd	r25, Y+34	; 0x22
    1978:	9e 8f       	std	Y+30, r25	; 0x1e
    197a:	8d 8f       	std	Y+29, r24	; 0x1d
    197c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    197e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_voidInit+0x45c>
    1984:	9e 8f       	std	Y+30, r25	; 0x1e
    1986:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	/* Entry mode set  */
	LCD_voidSendCommand(lcd_EntryMode);
    1988:	86 e0       	ldi	r24, 0x06	; 6
    198a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a0 e2       	ldi	r26, 0x20	; 32
    1994:	b1 e4       	ldi	r27, 0x41	; 65
    1996:	89 8f       	std	Y+25, r24	; 0x19
    1998:	9a 8f       	std	Y+26, r25	; 0x1a
    199a:	ab 8f       	std	Y+27, r26	; 0x1b
    199c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	69 8d       	ldd	r22, Y+25	; 0x19
    19a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	4a ef       	ldi	r20, 0xFA	; 250
    19ac:	54 e4       	ldi	r21, 0x44	; 68
    19ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	8d 8b       	std	Y+21, r24	; 0x15
    19b8:	9e 8b       	std	Y+22, r25	; 0x16
    19ba:	af 8b       	std	Y+23, r26	; 0x17
    19bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19be:	6d 89       	ldd	r22, Y+21	; 0x15
    19c0:	7e 89       	ldd	r23, Y+22	; 0x16
    19c2:	8f 89       	ldd	r24, Y+23	; 0x17
    19c4:	98 8d       	ldd	r25, Y+24	; 0x18
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e8       	ldi	r20, 0x80	; 128
    19cc:	5f e3       	ldi	r21, 0x3F	; 63
    19ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <LCD_voidInit+0x4bc>
		__ticks = 1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9c 8b       	std	Y+20, r25	; 0x14
    19dc:	8b 8b       	std	Y+19, r24	; 0x13
    19de:	3f c0       	rjmp	.+126    	; 0x1a5e <LCD_voidInit+0x53a>
	else if (__tmp > 65535)
    19e0:	6d 89       	ldd	r22, Y+21	; 0x15
    19e2:	7e 89       	ldd	r23, Y+22	; 0x16
    19e4:	8f 89       	ldd	r24, Y+23	; 0x17
    19e6:	98 8d       	ldd	r25, Y+24	; 0x18
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	3f ef       	ldi	r19, 0xFF	; 255
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	57 e4       	ldi	r21, 0x47	; 71
    19f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	4c f5       	brge	.+82     	; 0x1a4a <LCD_voidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f8:	69 8d       	ldd	r22, Y+25	; 0x19
    19fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e2       	ldi	r20, 0x20	; 32
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <LCD_voidInit+0x51c>
    1a22:	88 ec       	ldi	r24, 0xC8	; 200
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	89 8b       	std	Y+17, r24	; 0x11
    1a2a:	89 89       	ldd	r24, Y+17	; 0x11
    1a2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_voidInit+0x50a>
    1a32:	9a 8b       	std	Y+18, r25	; 0x12
    1a34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	8b 89       	ldd	r24, Y+19	; 0x13
    1a38:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	8b 89       	ldd	r24, Y+19	; 0x13
    1a42:	9c 89       	ldd	r25, Y+20	; 0x14
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <LCD_voidInit+0x4fe>
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <LCD_voidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	98 8b       	std	Y+16, r25	; 0x10
    1a64:	8f 87       	std	Y+15, r24	; 0x0f
    1a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a68:	98 89       	ldd	r25, Y+16	; 0x10
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_voidInit+0x546>
    1a6e:	98 8b       	std	Y+16, r25	; 0x10
    1a70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	/* Set cursor home */
	LCD_voidSendCommand(lcd_Home);
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e2       	ldi	r26, 0x20	; 32
    1a7e:	b1 e4       	ldi	r27, 0x41	; 65
    1a80:	8b 87       	std	Y+11, r24	; 0x0b
    1a82:	9c 87       	std	Y+12, r25	; 0x0c
    1a84:	ad 87       	std	Y+13, r26	; 0x0d
    1a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a ef       	ldi	r20, 0xFA	; 250
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8f 83       	std	Y+7, r24	; 0x07
    1aa2:	98 87       	std	Y+8, r25	; 0x08
    1aa4:	a9 87       	std	Y+9, r26	; 0x09
    1aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_voidInit+0x5a6>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <LCD_voidInit+0x624>
	else if (__tmp > 65535)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <LCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <LCD_voidInit+0x606>
    1b0c:	88 ec       	ldi	r24, 0xC8	; 200
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_voidInit+0x5f4>
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <LCD_voidInit+0x5e8>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <LCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_voidInit+0x630>
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1b5c:	cc 5a       	subi	r28, 0xAC	; 172
    1b5e:	df 4f       	sbci	r29, 0xFF	; 255
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Cpy_command )
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RS and RW */
	GPIO_voidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , LOW);
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>

	/* Write the command to data port */
	GPIO_voidSetPortValue(LCD_DATA_PORT , Cpy_command);
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ba2:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_voidSetPortValue>

	/* Send Enable signal */
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	62 e0       	ldi	r22, 0x02	; 2
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e8       	ldi	r26, 0x80	; 128
    1bb6:	bf e3       	ldi	r27, 0x3F	; 63
    1bb8:	89 8f       	std	Y+25, r24	; 0x19
    1bba:	9a 8f       	std	Y+26, r25	; 0x1a
    1bbc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	4a ef       	ldi	r20, 0xFA	; 250
    1bce:	54 e4       	ldi	r21, 0x44	; 68
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8d 8b       	std	Y+21, r24	; 0x15
    1bda:	9e 8b       	std	Y+22, r25	; 0x16
    1bdc:	af 8b       	std	Y+23, r26	; 0x17
    1bde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1be0:	6d 89       	ldd	r22, Y+21	; 0x15
    1be2:	7e 89       	ldd	r23, Y+22	; 0x16
    1be4:	8f 89       	ldd	r24, Y+23	; 0x17
    1be6:	98 8d       	ldd	r25, Y+24	; 0x18
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9c 8b       	std	Y+20, r25	; 0x14
    1bfe:	8b 8b       	std	Y+19, r24	; 0x13
    1c00:	3f c0       	rjmp	.+126    	; 0x1c80 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1c02:	6d 89       	ldd	r22, Y+21	; 0x15
    1c04:	7e 89       	ldd	r23, Y+22	; 0x16
    1c06:	8f 89       	ldd	r24, Y+23	; 0x17
    1c08:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	3f ef       	ldi	r19, 0xFF	; 255
    1c0e:	4f e7       	ldi	r20, 0x7F	; 127
    1c10:	57 e4       	ldi	r21, 0x47	; 71
    1c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c16:	18 16       	cp	r1, r24
    1c18:	4c f5       	brge	.+82     	; 0x1c6c <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e2       	ldi	r20, 0x20	; 32
    1c28:	51 e4       	ldi	r21, 0x41	; 65
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	8b 8b       	std	Y+19, r24	; 0x13
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <LCD_voidSendCommand+0xee>
    1c44:	88 ec       	ldi	r24, 0xC8	; 200
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9a 8b       	std	Y+18, r25	; 0x12
    1c4a:	89 8b       	std	Y+17, r24	; 0x11
    1c4c:	89 89       	ldd	r24, Y+17	; 0x11
    1c4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_voidSendCommand+0xdc>
    1c54:	9a 8b       	std	Y+18, r25	; 0x12
    1c56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c58:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	9c 8b       	std	Y+20, r25	; 0x14
    1c60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c62:	8b 89       	ldd	r24, Y+19	; 0x13
    1c64:	9c 89       	ldd	r25, Y+20	; 0x14
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	69 f7       	brne	.-38     	; 0x1c44 <LCD_voidSendCommand+0xd0>
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c70:	8f 89       	ldd	r24, Y+23	; 0x17
    1c72:	98 8d       	ldd	r25, Y+24	; 0x18
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9c 8b       	std	Y+20, r25	; 0x14
    1c7e:	8b 8b       	std	Y+19, r24	; 0x13
    1c80:	8b 89       	ldd	r24, Y+19	; 0x13
    1c82:	9c 89       	ldd	r25, Y+20	; 0x14
    1c84:	98 8b       	std	Y+16, r25	; 0x10
    1c86:	8f 87       	std	Y+15, r24	; 0x0f
    1c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8a:	98 89       	ldd	r25, Y+16	; 0x10
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_voidSendCommand+0x118>
    1c90:	98 8b       	std	Y+16, r25	; 0x10
    1c92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	62 e0       	ldi	r22, 0x02	; 2
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e2       	ldi	r26, 0x20	; 32
    1ca4:	b1 e4       	ldi	r27, 0x41	; 65
    1ca6:	8b 87       	std	Y+11, r24	; 0x0b
    1ca8:	9c 87       	std	Y+12, r25	; 0x0c
    1caa:	ad 87       	std	Y+13, r26	; 0x0d
    1cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f 83       	std	Y+7, r24	; 0x07
    1cc8:	98 87       	std	Y+8, r25	; 0x08
    1cca:	a9 87       	std	Y+9, r26	; 0x09
    1ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <LCD_voidSendCommand+0x1dc>
    1d32:	88 ec       	ldi	r24, 0xC8	; 200
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <LCD_voidSendCommand+0x1ca>
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <LCD_voidSendCommand+0x1be>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_voidSendCommand+0x206>
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1d82:	6d 96       	adiw	r28, 0x1d	; 29
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Cpy_data)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	6d 97       	sbiw	r28, 0x1d	; 29
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RW */
	GPIO_voidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>

	/* Set RS */
	GPIO_voidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , HIGH);
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>

	/* Write the command to data port */
	GPIO_voidSetPortValue(LCD_DATA_PORT , Cpy_data);
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1dc2:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_voidSetPortValue>

	/* Send Enable signal */
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	62 e0       	ldi	r22, 0x02	; 2
    1dca:	41 e0       	ldi	r20, 0x01	; 1
    1dcc:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	bf e3       	ldi	r27, 0x3F	; 63
    1dd8:	89 8f       	std	Y+25, r24	; 0x19
    1dda:	9a 8f       	std	Y+26, r25	; 0x1a
    1ddc:	ab 8f       	std	Y+27, r26	; 0x1b
    1dde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	69 8d       	ldd	r22, Y+25	; 0x19
    1de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8d 8b       	std	Y+21, r24	; 0x15
    1dfa:	9e 8b       	std	Y+22, r25	; 0x16
    1dfc:	af 8b       	std	Y+23, r26	; 0x17
    1dfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9c 8b       	std	Y+20, r25	; 0x14
    1e1e:	8b 8b       	std	Y+19, r24	; 0x13
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1e22:	6d 89       	ldd	r22, Y+21	; 0x15
    1e24:	7e 89       	ldd	r23, Y+22	; 0x16
    1e26:	8f 89       	ldd	r24, Y+23	; 0x17
    1e28:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9c 8b       	std	Y+20, r25	; 0x14
    1e60:	8b 8b       	std	Y+19, r24	; 0x13
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <LCD_voidSendChar+0xee>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9a 8b       	std	Y+18, r25	; 0x12
    1e6a:	89 8b       	std	Y+17, r24	; 0x11
    1e6c:	89 89       	ldd	r24, Y+17	; 0x11
    1e6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_voidSendChar+0xdc>
    1e74:	9a 8b       	std	Y+18, r25	; 0x12
    1e76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9c 8b       	std	Y+20, r25	; 0x14
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	8b 89       	ldd	r24, Y+19	; 0x13
    1e84:	9c 89       	ldd	r25, Y+20	; 0x14
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <LCD_voidSendChar+0xd0>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e90:	8f 89       	ldd	r24, Y+23	; 0x17
    1e92:	98 8d       	ldd	r25, Y+24	; 0x18
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea4:	98 8b       	std	Y+16, r25	; 0x10
    1ea6:	8f 87       	std	Y+15, r24	; 0x0f
    1ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eaa:	98 89       	ldd	r25, Y+16	; 0x10
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_voidSendChar+0x118>
    1eb0:	98 8b       	std	Y+16, r25	; 0x10
    1eb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	62 e0       	ldi	r22, 0x02	; 2
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 5f 07 	call	0xebe	; 0xebe <GPIO_voidSetPinValue>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 e2       	ldi	r26, 0x20	; 32
    1ec4:	b1 e4       	ldi	r27, 0x41	; 65
    1ec6:	8b 87       	std	Y+11, r24	; 0x0b
    1ec8:	9c 87       	std	Y+12, r25	; 0x0c
    1eca:	ad 87       	std	Y+13, r26	; 0x0d
    1ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8f 83       	std	Y+7, r24	; 0x07
    1ee8:	98 87       	std	Y+8, r25	; 0x08
    1eea:	a9 87       	std	Y+9, r26	; 0x09
    1eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <LCD_voidSendChar+0x17c>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <LCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <LCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_voidSendChar+0x1dc>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_voidSendChar+0x1ca>
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <LCD_voidSendChar+0x1be>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <LCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_voidSendChar+0x206>
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1fa2:	6d 96       	adiw	r28, 0x1d	; 29
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <LCD_voidWriteString>:


void LCD_voidWriteString(const u8 *Cpy_str)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	60 97       	sbiw	r28, 0x10	; 16
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	98 8b       	std	Y+16, r25	; 0x10
    1fca:	8f 87       	std	Y+15, r24	; 0x0f
    1fcc:	7c c0       	rjmp	.+248    	; 0x20c6 <LCD_voidWriteString+0x112>
	while ( (*Cpy_str) != NULL)
	{
		LCD_voidSendChar(*Cpy_str);
    1fce:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fd0:	f8 89       	ldd	r31, Y+16	; 0x10
    1fd2:	80 81       	ld	r24, Z
    1fd4:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_voidSendChar>
		Cpy_str++;
    1fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fda:	98 89       	ldd	r25, Y+16	; 0x10
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	98 8b       	std	Y+16, r25	; 0x10
    1fe0:	8f 87       	std	Y+15, r24	; 0x0f
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 ea       	ldi	r26, 0xA0	; 160
    1fe8:	b0 e4       	ldi	r27, 0x40	; 64
    1fea:	8b 87       	std	Y+11, r24	; 0x0b
    1fec:	9c 87       	std	Y+12, r25	; 0x0c
    1fee:	ad 87       	std	Y+13, r26	; 0x0d
    1ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a ef       	ldi	r20, 0xFA	; 250
    2000:	54 e4       	ldi	r21, 0x44	; 68
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8f 83       	std	Y+7, r24	; 0x07
    200c:	98 87       	std	Y+8, r25	; 0x08
    200e:	a9 87       	std	Y+9, r26	; 0x09
    2010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	2c f4       	brge	.+10     	; 0x2034 <LCD_voidWriteString+0x80>
		__ticks = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	3f c0       	rjmp	.+126    	; 0x20b2 <LCD_voidWriteString+0xfe>
	else if (__tmp > 65535)
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	4f e7       	ldi	r20, 0x7F	; 127
    2042:	57 e4       	ldi	r21, 0x47	; 71
    2044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2048:	18 16       	cp	r1, r24
    204a:	4c f5       	brge	.+82     	; 0x209e <LCD_voidWriteString+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	6b 85       	ldd	r22, Y+11	; 0x0b
    204e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2050:	8d 85       	ldd	r24, Y+13	; 0x0d
    2052:	9e 85       	ldd	r25, Y+14	; 0x0e
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e2       	ldi	r20, 0x20	; 32
    205a:	51 e4       	ldi	r21, 0x41	; 65
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <LCD_voidWriteString+0xe0>
    2076:	88 ec       	ldi	r24, 0xC8	; 200
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	8b 83       	std	Y+3, r24	; 0x03
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_voidWriteString+0xce>
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	69 f7       	brne	.-38     	; 0x2076 <LCD_voidWriteString+0xc2>
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <LCD_voidWriteString+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <LCD_voidWriteString+0x10a>
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_voidWriteString(const u8 *Cpy_str)
{
	while ( (*Cpy_str) != NULL)
    20c6:	ef 85       	ldd	r30, Y+15	; 0x0f
    20c8:	f8 89       	ldd	r31, Y+16	; 0x10
    20ca:	80 81       	ld	r24, Z
    20cc:	88 23       	and	r24, r24
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <LCD_voidWriteString+0x11e>
    20d0:	7e cf       	rjmp	.-260    	; 0x1fce <LCD_voidWriteString+0x1a>
	{
		LCD_voidSendChar(*Cpy_str);
		Cpy_str++;
		_delay_ms(5);
	}
}
    20d2:	60 96       	adiw	r28, 0x10	; 16
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LCD_voidGoTo>:

void LCD_voidGoTo(u8 Cpy_row , u8 Cpy_column)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <LCD_voidGoTo+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <LCD_voidGoTo+0x8>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	6a 83       	std	Y+2, r22	; 0x02
	if ((Cpy_row>0) && (Cpy_column<=16))
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	88 23       	and	r24, r24
    20f8:	e1 f0       	breq	.+56     	; 0x2132 <LCD_voidGoTo+0x4e>
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	81 31       	cpi	r24, 0x11	; 17
    20fe:	c8 f4       	brcc	.+50     	; 0x2132 <LCD_voidGoTo+0x4e>
	{
	    switch(Cpy_row)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	3c 83       	std	Y+4, r19	; 0x04
    2108:	2b 83       	std	Y+3, r18	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	91 05       	cpc	r25, r1
    2112:	31 f0       	breq	.+12     	; 0x2120 <LCD_voidGoTo+0x3c>
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	3c 81       	ldd	r19, Y+4	; 0x04
    2118:	22 30       	cpi	r18, 0x02	; 2
    211a:	31 05       	cpc	r19, r1
    211c:	31 f0       	breq	.+12     	; 0x212a <LCD_voidGoTo+0x46>
    211e:	09 c0       	rjmp	.+18     	; 0x2132 <LCD_voidGoTo+0x4e>
	    {
		    case 1:
		    	LCD_voidSendCommand(Cpy_column+127);
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	81 58       	subi	r24, 0x81	; 129
    2124:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <LCD_voidGoTo+0x4e>
		    break;

		    case 2:
		    	LCD_voidSendCommand(Cpy_column+191);
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	81 54       	subi	r24, 0x41	; 65
    212e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>

		    default:
		    break;
	    }
	}
}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LCD_voidAddNewPattern>:

void LCD_voidAddNewPattern (u8 *Cpy_patternArray , u8 Cpy_blockNumber)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <LCD_voidAddNewPattern+0x6>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <LCD_voidAddNewPattern+0x8>
    2148:	0f 92       	push	r0
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	08 96       	adiw	r24, 0x08	; 8
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	8a 83       	std	Y+2, r24	; 0x02
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	88 30       	cpi	r24, 0x08	; 8
    216e:	b0 f4       	brcc	.+44     	; 0x219c <LCD_voidAddNewPattern+0x5c>
	{
		LCD_voidSendCommand(local_CGAdress);
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_voidSendCommand>
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    2176:	19 82       	std	Y+1, r1	; 0x01
    2178:	0e c0       	rjmp	.+28     	; 0x2196 <LCD_voidAddNewPattern+0x56>
		{
			LCD_voidSendChar(Cpy_patternArray[i]);
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	fc 01       	movw	r30, r24
    2186:	e2 0f       	add	r30, r18
    2188:	f3 1f       	adc	r31, r19
    218a:	80 81       	ld	r24, Z
    218c:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_voidSendChar>
{
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
	{
		LCD_voidSendCommand(local_CGAdress);
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	88 30       	cpi	r24, 0x08	; 8
    219a:	78 f3       	brcs	.-34     	; 0x217a <LCD_voidAddNewPattern+0x3a>
	}
	else
	{
		/* Error */
	}
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <LCD_voidWritePattern>:

void LCD_voidWritePattern (u8 Cpy_blockNumber , u8 Cpy_row , u8 Cpy_column)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <LCD_voidWritePattern+0x6>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	6a 83       	std	Y+2, r22	; 0x02
    21bc:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	38 f4       	brcc	.+14     	; 0x21d2 <LCD_voidWritePattern+0x26>
	{
		LCD_voidGoTo(Cpy_row , Cpy_column);
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	6b 81       	ldd	r22, Y+3	; 0x03
    21c8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoTo>
		LCD_voidSendChar(Cpy_blockNumber);
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_voidSendChar>
	}
	else
	{
		/* Error */
	}
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <TMR_voidTimer0Init>:

/****************************************************/
/********************* Timer 0 **********************/
/****************************************************/
void TMR_voidTimer0Init(void)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	/* Enable fast PWM mode*/
	SET_BIT(TCCR0 , TCCR0_WGM01);
    21e6:	a3 e5       	ldi	r26, 0x53	; 83
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e3 e5       	ldi	r30, 0x53	; 83
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	88 60       	ori	r24, 0x08	; 8
    21f2:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM00);
    21f4:	a3 e5       	ldi	r26, 0x53	; 83
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e3 e5       	ldi	r30, 0x53	; 83
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	80 64       	ori	r24, 0x40	; 64
    2200:	8c 93       	st	X, r24
	
	/* Enable Non inverting mode */
	CLR_BIT(TCCR0 , TCCR0_COM00);
    2202:	a3 e5       	ldi	r26, 0x53	; 83
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e3 e5       	ldi	r30, 0x53	; 83
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8f 7e       	andi	r24, 0xEF	; 239
    220e:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_COM01);
    2210:	a3 e5       	ldi	r26, 0x53	; 83
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e3 e5       	ldi	r30, 0x53	; 83
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 62       	ori	r24, 0x20	; 32
    221c:	8c 93       	st	X, r24

	/* Select Pre scaler 1024 */
	SET_BIT(TCCR0 , TCCR0_CS00);
    221e:	a3 e5       	ldi	r26, 0x53	; 83
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e3 e5       	ldi	r30, 0x53	; 83
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	81 60       	ori	r24, 0x01	; 1
    222a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS01);
    222c:	a3 e5       	ldi	r26, 0x53	; 83
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e3 e5       	ldi	r30, 0x53	; 83
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8d 7f       	andi	r24, 0xFD	; 253
    2238:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS02);
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	84 60       	ori	r24, 0x04	; 4
    2246:	8c 93       	st	X, r24
	
}
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <TMR_voidTimer0SetCompareMatch>:

void TMR_voidTimer0SetCompareMatch(u8 Cpy_value)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	0f 92       	push	r0
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Cpy_value;
    225a:	ec e5       	ldi	r30, 0x5C	; 92
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	80 83       	st	Z, r24
}
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <TMR_voidTimer0SetCallBack>:

u8 TMR_voidTimer0SetCallBack(void (* func)(void))
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <TMR_voidTimer0SetCallBack+0x6>
    2270:	0f 92       	push	r0
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	9b 83       	std	Y+3, r25	; 0x03
    2278:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_error = OK;
    227a:	19 82       	std	Y+1, r1	; 0x01
	if (func != NULL)
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	39 f0       	breq	.+14     	; 0x2292 <TMR_voidTimer0SetCallBack+0x28>
	{
		OC0_ISR = func ;
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	90 93 89 00 	sts	0x0089, r25
    228c:	80 93 88 00 	sts	0x0088, r24
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <TMR_voidTimer0SetCallBack+0x2c>
	}
	else
	{
		local_error = N_OK;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error ;
    2296:	89 81       	ldd	r24, Y+1	; 0x01
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <TMR_voidTimer1Init>:

/****************************************************/
/********************* Timer 1 **********************/
/****************************************************/
void TMR_voidTimer1Init(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode To normal mode */
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
    22ac:	af e4       	ldi	r26, 0x4F	; 79
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	ef e4       	ldi	r30, 0x4F	; 79
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	8e 7f       	andi	r24, 0xFE	; 254
    22b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_WGM11);
    22ba:	af e4       	ldi	r26, 0x4F	; 79
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	ef e4       	ldi	r30, 0x4F	; 79
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8d 7f       	andi	r24, 0xFD	; 253
    22c6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM12);
    22c8:	ae e4       	ldi	r26, 0x4E	; 78
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ee e4       	ldi	r30, 0x4E	; 78
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	87 7f       	andi	r24, 0xF7	; 247
    22d4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_WGM13);
    22d6:	ae e4       	ldi	r26, 0x4E	; 78
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	ee e4       	ldi	r30, 0x4E	; 78
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8f 7e       	andi	r24, 0xEF	; 239
    22e2:	8c 93       	st	X, r24

	/* Choose Prescaler to 8
	 * Every tick will take 1 us */
	CLR_BIT(TCCR1B , TCCR1B_CS10);
    22e4:	ae e4       	ldi	r26, 0x4E	; 78
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	ee e4       	ldi	r30, 0x4E	; 78
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	8e 7f       	andi	r24, 0xFE	; 254
    22f0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_CS11);
    22f2:	ae e4       	ldi	r26, 0x4E	; 78
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	ee e4       	ldi	r30, 0x4E	; 78
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	82 60       	ori	r24, 0x02	; 2
    22fe:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_CS12);
    2300:	ae e4       	ldi	r26, 0x4E	; 78
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ee e4       	ldi	r30, 0x4E	; 78
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	8b 7f       	andi	r24, 0xFB	; 251
    230c:	8c 93       	st	X, r24
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <TMR_voidSetICR>:

void TMR_voidSetICR(u16 Cpy_val)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <TMR_voidSetICR+0x6>
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
	ICR1 =Cpy_val;
    2322:	e6 e4       	ldi	r30, 0x46	; 70
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <TMR_voidTimer1SetCompMatchA>:

void TMR_voidTimer1SetCompMatchA(u16 Cpy_value)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <TMR_voidTimer1SetCompMatchA+0x6>
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Cpy_value;
    2346:	ea e4       	ldi	r30, 0x4A	; 74
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <TMR_voidTimer1SetCompMatchB>:

void TMR_voidTimer1SetCompMatchB(u16 Cpy_value)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <TMR_voidTimer1SetCompMatchB+0x6>
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Cpy_value;
    236a:	e8 e4       	ldi	r30, 0x48	; 72
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <TMR_voidTimer1SetValue>:

void TMR_voidTimer1SetValue( u16 Cpy_u8Val)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <TMR_voidTimer1SetValue+0x6>
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Cpy_u8Val;
    238e:	ec e4       	ldi	r30, 0x4C	; 76
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <TMR_u16GetTimer1Value>:

u16 TMR_u16GetTimer1Value( void)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    23ac:	ec e4       	ldi	r30, 0x4C	; 76
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	91 81       	ldd	r25, Z+1	; 0x01
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <__vector_10>:
/****************************************************/
/********************* ISR **************************/
/****************************************************/
void __vector_10 (void) __attribute__((signal)) ;
void __vector_10 (void)
{
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	2f 93       	push	r18
    23c6:	3f 93       	push	r19
    23c8:	4f 93       	push	r20
    23ca:	5f 93       	push	r21
    23cc:	6f 93       	push	r22
    23ce:	7f 93       	push	r23
    23d0:	8f 93       	push	r24
    23d2:	9f 93       	push	r25
    23d4:	af 93       	push	r26
    23d6:	bf 93       	push	r27
    23d8:	ef 93       	push	r30
    23da:	ff 93       	push	r31
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	OC0_ISR();
    23e4:	e0 91 88 00 	lds	r30, 0x0088
    23e8:	f0 91 89 00 	lds	r31, 0x0089
    23ec:	09 95       	icall
}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	bf 91       	pop	r27
    23f8:	af 91       	pop	r26
    23fa:	9f 91       	pop	r25
    23fc:	8f 91       	pop	r24
    23fe:	7f 91       	pop	r23
    2400:	6f 91       	pop	r22
    2402:	5f 91       	pop	r21
    2404:	4f 91       	pop	r20
    2406:	3f 91       	pop	r19
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <main>:
u16 global_period ,global_onTime , global_finishState;

u8 period_arr[20];
u8 on_arr[20];
void main ()
{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the Pins For LCD */
	GPIO_voidSetPinDirection(PORTA , 0 , OUTPUT);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 5f 08 	call	0x10be	; 0x10be <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTA ,1 , OUTPUT );
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 5f 08 	call	0x10be	; 0x10be <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTA ,2 , OUTPUT );
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	62 e0       	ldi	r22, 0x02	; 2
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 5f 08 	call	0x10be	; 0x10be <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTA ,3 , OUTPUT );
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	63 e0       	ldi	r22, 0x03	; 3
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 5f 08 	call	0x10be	; 0x10be <GPIO_voidSetPinDirection>

	TMR_voidTimer1Init();
    2444:	0e 94 52 11 	call	0x22a4	; 0x22a4 <TMR_voidTimer1Init>
	EXTI_voidInt0Init();
    2448:	0e 94 a3 05 	call	0xb46	; 0xb46 <EXTI_voidInt0Init>
	EXTI_u8SetInt0CallBack(ICU_SW);
    244c:	89 e8       	ldi	r24, 0x89	; 137
    244e:	92 e1       	ldi	r25, 0x12	; 18
    2450:	0e 94 65 06 	call	0xcca	; 0xcca <EXTI_u8SetInt0CallBack>
	GIE_voidEnable();
    2454:	0e 94 43 07 	call	0xe86	; 0xe86 <GIE_voidEnable>
	LCD_voidInit();
    2458:	0e 94 92 0a 	call	0x1524	; 0x1524 <LCD_voidInit>
	while(1)
	{
		if (global_finishState != 0)
    245c:	80 91 a5 00 	lds	r24, 0x00A5
    2460:	90 91 a6 00 	lds	r25, 0x00A6
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	d1 f3       	breq	.-12     	; 0x245c <main+0x48>
		{
			LCD_voidGoTo(1 , 1);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoTo>
			sprintf(period_arr , "Period= %i us" , (global_period));
    2474:	20 91 bb 00 	lds	r18, 0x00BB
    2478:	30 91 bc 00 	lds	r19, 0x00BC
    247c:	00 d0       	rcall	.+0      	; 0x247e <main+0x6a>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <main+0x6c>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <main+0x6e>
    2482:	ed b7       	in	r30, 0x3d	; 61
    2484:	fe b7       	in	r31, 0x3e	; 62
    2486:	31 96       	adiw	r30, 0x01	; 1
    2488:	87 ea       	ldi	r24, 0xA7	; 167
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	80 83       	st	Z, r24
    2490:	80 e6       	ldi	r24, 0x60	; 96
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	93 83       	std	Z+3, r25	; 0x03
    2496:	82 83       	std	Z+2, r24	; 0x02
    2498:	35 83       	std	Z+5, r19	; 0x05
    249a:	24 83       	std	Z+4, r18	; 0x04
    249c:	0e 94 06 13 	call	0x260c	; 0x260c <sprintf>
    24a0:	8d b7       	in	r24, 0x3d	; 61
    24a2:	9e b7       	in	r25, 0x3e	; 62
    24a4:	06 96       	adiw	r24, 0x06	; 6
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	9e bf       	out	0x3e, r25	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	8d bf       	out	0x3d, r24	; 61
			LCD_voidWriteString(period_arr);
    24b0:	87 ea       	ldi	r24, 0xA7	; 167
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_voidWriteString>

			LCD_voidGoTo(2 , 1);
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	61 e0       	ldi	r22, 0x01	; 1
    24be:	70 e0       	ldi	r23, 0x00	; 0
    24c0:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoTo>
			sprintf(on_arr , "OnT= %i us" , (global_onTime));
    24c4:	20 91 a3 00 	lds	r18, 0x00A3
    24c8:	30 91 a4 00 	lds	r19, 0x00A4
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <main+0xba>
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <main+0xbc>
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <main+0xbe>
    24d2:	ed b7       	in	r30, 0x3d	; 61
    24d4:	fe b7       	in	r31, 0x3e	; 62
    24d6:	31 96       	adiw	r30, 0x01	; 1
    24d8:	8f e8       	ldi	r24, 0x8F	; 143
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	8e e6       	ldi	r24, 0x6E	; 110
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	93 83       	std	Z+3, r25	; 0x03
    24e6:	82 83       	std	Z+2, r24	; 0x02
    24e8:	35 83       	std	Z+5, r19	; 0x05
    24ea:	24 83       	std	Z+4, r18	; 0x04
    24ec:	0e 94 06 13 	call	0x260c	; 0x260c <sprintf>
    24f0:	8d b7       	in	r24, 0x3d	; 61
    24f2:	9e b7       	in	r25, 0x3e	; 62
    24f4:	06 96       	adiw	r24, 0x06	; 6
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	9e bf       	out	0x3e, r25	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	8d bf       	out	0x3d, r24	; 61
			LCD_voidWriteString(on_arr);
    2500:	8f e8       	ldi	r24, 0x8F	; 143
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_voidWriteString>
			global_finishState = 0 ;
    2508:	10 92 a6 00 	sts	0x00A6, r1
    250c:	10 92 a5 00 	sts	0x00A5, r1
    2510:	a5 cf       	rjmp	.-182    	; 0x245c <main+0x48>

00002512 <ICU_SW>:
	}

}

void ICU_SW (void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	static u8 local_state ;
	static u16 read  ;
	//GPIO_voidSetPinValue(PORTA ,3 , HIGH);
	if (local_state == 0)
    251a:	80 91 8e 00 	lds	r24, 0x008E
    251e:	88 23       	and	r24, r24
    2520:	41 f4       	brne	.+16     	; 0x2532 <ICU_SW+0x20>
	{
		TMR_voidTimer1SetValue(0);
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 c0 11 	call	0x2380	; 0x2380 <TMR_voidTimer1SetValue>
		local_state = 1 ;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 8e 00 	sts	0x008E, r24
    2530:	33 c0       	rjmp	.+102    	; 0x2598 <ICU_SW+0x86>
	}

	else if (local_state == 1)
    2532:	80 91 8e 00 	lds	r24, 0x008E
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	69 f4       	brne	.+26     	; 0x2554 <ICU_SW+0x42>
	{
		global_period = TMR_u16GetTimer1Value();
    253a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <TMR_u16GetTimer1Value>
    253e:	90 93 bc 00 	sts	0x00BC, r25
    2542:	80 93 bb 00 	sts	0x00BB, r24

		/* set sense to falling to calculate on time */
		EXTI_voidInt0SetSenseControl(EXTI_FALLING_EDGE);
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	0e 94 bf 05 	call	0xb7e	; 0xb7e <EXTI_voidInt0SetSenseControl>

		local_state = 2 ;
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	80 93 8e 00 	sts	0x008E, r24
    2552:	22 c0       	rjmp	.+68     	; 0x2598 <ICU_SW+0x86>
	}
	else if (local_state == 2)
    2554:	80 91 8e 00 	lds	r24, 0x008E
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	f1 f4       	brne	.+60     	; 0x2598 <ICU_SW+0x86>
	{
		read = TMR_u16GetTimer1Value();
    255c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <TMR_u16GetTimer1Value>
    2560:	90 93 8d 00 	sts	0x008D, r25
    2564:	80 93 8c 00 	sts	0x008C, r24
		global_onTime = read - global_period  ;
    2568:	20 91 8c 00 	lds	r18, 0x008C
    256c:	30 91 8d 00 	lds	r19, 0x008D
    2570:	80 91 bb 00 	lds	r24, 0x00BB
    2574:	90 91 bc 00 	lds	r25, 0x00BC
    2578:	a9 01       	movw	r20, r18
    257a:	48 1b       	sub	r20, r24
    257c:	59 0b       	sbc	r21, r25
    257e:	ca 01       	movw	r24, r20
    2580:	90 93 a4 00 	sts	0x00A4, r25
    2584:	80 93 a3 00 	sts	0x00A3, r24
		EXTI_voidInt0DisableInterrupt();
    2588:	0e 94 26 06 	call	0xc4c	; 0xc4c <EXTI_voidInt0DisableInterrupt>
		global_finishState = 1;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	90 93 a6 00 	sts	0x00A6, r25
    2594:	80 93 a5 00 	sts	0x00A5, r24
	}
	//GPIO_voidSetPinValue(PORTA ,3 , LOW);

}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <__prologue_saves__>:
    259e:	2f 92       	push	r2
    25a0:	3f 92       	push	r3
    25a2:	4f 92       	push	r4
    25a4:	5f 92       	push	r5
    25a6:	6f 92       	push	r6
    25a8:	7f 92       	push	r7
    25aa:	8f 92       	push	r8
    25ac:	9f 92       	push	r9
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	ca 1b       	sub	r28, r26
    25c8:	db 0b       	sbc	r29, r27
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	09 94       	ijmp

000025d6 <__epilogue_restores__>:
    25d6:	2a 88       	ldd	r2, Y+18	; 0x12
    25d8:	39 88       	ldd	r3, Y+17	; 0x11
    25da:	48 88       	ldd	r4, Y+16	; 0x10
    25dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    25de:	6e 84       	ldd	r6, Y+14	; 0x0e
    25e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ea:	c8 84       	ldd	r12, Y+8	; 0x08
    25ec:	df 80       	ldd	r13, Y+7	; 0x07
    25ee:	ee 80       	ldd	r14, Y+6	; 0x06
    25f0:	fd 80       	ldd	r15, Y+5	; 0x05
    25f2:	0c 81       	ldd	r16, Y+4	; 0x04
    25f4:	1b 81       	ldd	r17, Y+3	; 0x03
    25f6:	aa 81       	ldd	r26, Y+2	; 0x02
    25f8:	b9 81       	ldd	r27, Y+1	; 0x01
    25fa:	ce 0f       	add	r28, r30
    25fc:	d1 1d       	adc	r29, r1
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	ed 01       	movw	r28, r26
    260a:	08 95       	ret

0000260c <sprintf>:
    260c:	ae e0       	ldi	r26, 0x0E	; 14
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ec e0       	ldi	r30, 0x0C	; 12
    2612:	f3 e1       	ldi	r31, 0x13	; 19
    2614:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x1c>
    2618:	0d 89       	ldd	r16, Y+21	; 0x15
    261a:	1e 89       	ldd	r17, Y+22	; 0x16
    261c:	86 e0       	ldi	r24, 0x06	; 6
    261e:	8c 83       	std	Y+4, r24	; 0x04
    2620:	1a 83       	std	Y+2, r17	; 0x02
    2622:	09 83       	std	Y+1, r16	; 0x01
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	9f e7       	ldi	r25, 0x7F	; 127
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	9e 01       	movw	r18, r28
    262e:	27 5e       	subi	r18, 0xE7	; 231
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	ce 01       	movw	r24, r28
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	6f 89       	ldd	r22, Y+23	; 0x17
    2638:	78 8d       	ldd	r23, Y+24	; 0x18
    263a:	a9 01       	movw	r20, r18
    263c:	0e 94 2a 13 	call	0x2654	; 0x2654 <vfprintf>
    2640:	2f 81       	ldd	r18, Y+7	; 0x07
    2642:	38 85       	ldd	r19, Y+8	; 0x08
    2644:	02 0f       	add	r16, r18
    2646:	13 1f       	adc	r17, r19
    2648:	f8 01       	movw	r30, r16
    264a:	10 82       	st	Z, r1
    264c:	2e 96       	adiw	r28, 0x0e	; 14
    264e:	e4 e0       	ldi	r30, 0x04	; 4
    2650:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x1c>

00002654 <vfprintf>:
    2654:	ab e0       	ldi	r26, 0x0B	; 11
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e0 e3       	ldi	r30, 0x30	; 48
    265a:	f3 e1       	ldi	r31, 0x13	; 19
    265c:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
    2660:	3c 01       	movw	r6, r24
    2662:	2b 01       	movw	r4, r22
    2664:	5a 01       	movw	r10, r20
    2666:	fc 01       	movw	r30, r24
    2668:	17 82       	std	Z+7, r1	; 0x07
    266a:	16 82       	std	Z+6, r1	; 0x06
    266c:	83 81       	ldd	r24, Z+3	; 0x03
    266e:	81 fd       	sbrc	r24, 1
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <vfprintf+0x24>
    2672:	6f ef       	ldi	r22, 0xFF	; 255
    2674:	7f ef       	ldi	r23, 0xFF	; 255
    2676:	c6 c1       	rjmp	.+908    	; 0x2a04 <vfprintf+0x3b0>
    2678:	9a e0       	ldi	r25, 0x0A	; 10
    267a:	89 2e       	mov	r8, r25
    267c:	1e 01       	movw	r2, r28
    267e:	08 94       	sec
    2680:	21 1c       	adc	r2, r1
    2682:	31 1c       	adc	r3, r1
    2684:	f3 01       	movw	r30, r6
    2686:	23 81       	ldd	r18, Z+3	; 0x03
    2688:	f2 01       	movw	r30, r4
    268a:	23 fd       	sbrc	r18, 3
    268c:	85 91       	lpm	r24, Z+
    268e:	23 ff       	sbrs	r18, 3
    2690:	81 91       	ld	r24, Z+
    2692:	2f 01       	movw	r4, r30
    2694:	88 23       	and	r24, r24
    2696:	09 f4       	brne	.+2      	; 0x269a <vfprintf+0x46>
    2698:	b2 c1       	rjmp	.+868    	; 0x29fe <vfprintf+0x3aa>
    269a:	85 32       	cpi	r24, 0x25	; 37
    269c:	39 f4       	brne	.+14     	; 0x26ac <vfprintf+0x58>
    269e:	23 fd       	sbrc	r18, 3
    26a0:	85 91       	lpm	r24, Z+
    26a2:	23 ff       	sbrs	r18, 3
    26a4:	81 91       	ld	r24, Z+
    26a6:	2f 01       	movw	r4, r30
    26a8:	85 32       	cpi	r24, 0x25	; 37
    26aa:	29 f4       	brne	.+10     	; 0x26b6 <vfprintf+0x62>
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	b3 01       	movw	r22, r6
    26b0:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    26b4:	e7 cf       	rjmp	.-50     	; 0x2684 <vfprintf+0x30>
    26b6:	98 2f       	mov	r25, r24
    26b8:	ff 24       	eor	r15, r15
    26ba:	ee 24       	eor	r14, r14
    26bc:	99 24       	eor	r9, r9
    26be:	ff e1       	ldi	r31, 0x1F	; 31
    26c0:	ff 15       	cp	r31, r15
    26c2:	d0 f0       	brcs	.+52     	; 0x26f8 <vfprintf+0xa4>
    26c4:	9b 32       	cpi	r25, 0x2B	; 43
    26c6:	69 f0       	breq	.+26     	; 0x26e2 <vfprintf+0x8e>
    26c8:	9c 32       	cpi	r25, 0x2C	; 44
    26ca:	28 f4       	brcc	.+10     	; 0x26d6 <vfprintf+0x82>
    26cc:	90 32       	cpi	r25, 0x20	; 32
    26ce:	59 f0       	breq	.+22     	; 0x26e6 <vfprintf+0x92>
    26d0:	93 32       	cpi	r25, 0x23	; 35
    26d2:	91 f4       	brne	.+36     	; 0x26f8 <vfprintf+0xa4>
    26d4:	0e c0       	rjmp	.+28     	; 0x26f2 <vfprintf+0x9e>
    26d6:	9d 32       	cpi	r25, 0x2D	; 45
    26d8:	49 f0       	breq	.+18     	; 0x26ec <vfprintf+0x98>
    26da:	90 33       	cpi	r25, 0x30	; 48
    26dc:	69 f4       	brne	.+26     	; 0x26f8 <vfprintf+0xa4>
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	24 c0       	rjmp	.+72     	; 0x272a <vfprintf+0xd6>
    26e2:	52 e0       	ldi	r21, 0x02	; 2
    26e4:	f5 2a       	or	r15, r21
    26e6:	84 e0       	ldi	r24, 0x04	; 4
    26e8:	f8 2a       	or	r15, r24
    26ea:	28 c0       	rjmp	.+80     	; 0x273c <vfprintf+0xe8>
    26ec:	98 e0       	ldi	r25, 0x08	; 8
    26ee:	f9 2a       	or	r15, r25
    26f0:	25 c0       	rjmp	.+74     	; 0x273c <vfprintf+0xe8>
    26f2:	e0 e1       	ldi	r30, 0x10	; 16
    26f4:	fe 2a       	or	r15, r30
    26f6:	22 c0       	rjmp	.+68     	; 0x273c <vfprintf+0xe8>
    26f8:	f7 fc       	sbrc	r15, 7
    26fa:	29 c0       	rjmp	.+82     	; 0x274e <vfprintf+0xfa>
    26fc:	89 2f       	mov	r24, r25
    26fe:	80 53       	subi	r24, 0x30	; 48
    2700:	8a 30       	cpi	r24, 0x0A	; 10
    2702:	70 f4       	brcc	.+28     	; 0x2720 <vfprintf+0xcc>
    2704:	f6 fe       	sbrs	r15, 6
    2706:	05 c0       	rjmp	.+10     	; 0x2712 <vfprintf+0xbe>
    2708:	98 9c       	mul	r9, r8
    270a:	90 2c       	mov	r9, r0
    270c:	11 24       	eor	r1, r1
    270e:	98 0e       	add	r9, r24
    2710:	15 c0       	rjmp	.+42     	; 0x273c <vfprintf+0xe8>
    2712:	e8 9c       	mul	r14, r8
    2714:	e0 2c       	mov	r14, r0
    2716:	11 24       	eor	r1, r1
    2718:	e8 0e       	add	r14, r24
    271a:	f0 e2       	ldi	r31, 0x20	; 32
    271c:	ff 2a       	or	r15, r31
    271e:	0e c0       	rjmp	.+28     	; 0x273c <vfprintf+0xe8>
    2720:	9e 32       	cpi	r25, 0x2E	; 46
    2722:	29 f4       	brne	.+10     	; 0x272e <vfprintf+0xda>
    2724:	f6 fc       	sbrc	r15, 6
    2726:	6b c1       	rjmp	.+726    	; 0x29fe <vfprintf+0x3aa>
    2728:	40 e4       	ldi	r20, 0x40	; 64
    272a:	f4 2a       	or	r15, r20
    272c:	07 c0       	rjmp	.+14     	; 0x273c <vfprintf+0xe8>
    272e:	9c 36       	cpi	r25, 0x6C	; 108
    2730:	19 f4       	brne	.+6      	; 0x2738 <vfprintf+0xe4>
    2732:	50 e8       	ldi	r21, 0x80	; 128
    2734:	f5 2a       	or	r15, r21
    2736:	02 c0       	rjmp	.+4      	; 0x273c <vfprintf+0xe8>
    2738:	98 36       	cpi	r25, 0x68	; 104
    273a:	49 f4       	brne	.+18     	; 0x274e <vfprintf+0xfa>
    273c:	f2 01       	movw	r30, r4
    273e:	23 fd       	sbrc	r18, 3
    2740:	95 91       	lpm	r25, Z+
    2742:	23 ff       	sbrs	r18, 3
    2744:	91 91       	ld	r25, Z+
    2746:	2f 01       	movw	r4, r30
    2748:	99 23       	and	r25, r25
    274a:	09 f0       	breq	.+2      	; 0x274e <vfprintf+0xfa>
    274c:	b8 cf       	rjmp	.-144    	; 0x26be <vfprintf+0x6a>
    274e:	89 2f       	mov	r24, r25
    2750:	85 54       	subi	r24, 0x45	; 69
    2752:	83 30       	cpi	r24, 0x03	; 3
    2754:	18 f0       	brcs	.+6      	; 0x275c <vfprintf+0x108>
    2756:	80 52       	subi	r24, 0x20	; 32
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	38 f4       	brcc	.+14     	; 0x276a <vfprintf+0x116>
    275c:	44 e0       	ldi	r20, 0x04	; 4
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	a4 0e       	add	r10, r20
    2762:	b5 1e       	adc	r11, r21
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	59 83       	std	Y+1, r21	; 0x01
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <vfprintf+0x134>
    276a:	93 36       	cpi	r25, 0x63	; 99
    276c:	31 f0       	breq	.+12     	; 0x277a <vfprintf+0x126>
    276e:	93 37       	cpi	r25, 0x73	; 115
    2770:	79 f0       	breq	.+30     	; 0x2790 <vfprintf+0x13c>
    2772:	93 35       	cpi	r25, 0x53	; 83
    2774:	09 f0       	breq	.+2      	; 0x2778 <vfprintf+0x124>
    2776:	56 c0       	rjmp	.+172    	; 0x2824 <vfprintf+0x1d0>
    2778:	20 c0       	rjmp	.+64     	; 0x27ba <vfprintf+0x166>
    277a:	f5 01       	movw	r30, r10
    277c:	80 81       	ld	r24, Z
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	42 e0       	ldi	r20, 0x02	; 2
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	a4 0e       	add	r10, r20
    2786:	b5 1e       	adc	r11, r21
    2788:	61 01       	movw	r12, r2
    278a:	01 e0       	ldi	r16, 0x01	; 1
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	12 c0       	rjmp	.+36     	; 0x27b4 <vfprintf+0x160>
    2790:	f5 01       	movw	r30, r10
    2792:	c0 80       	ld	r12, Z
    2794:	d1 80       	ldd	r13, Z+1	; 0x01
    2796:	f6 fc       	sbrc	r15, 6
    2798:	03 c0       	rjmp	.+6      	; 0x27a0 <vfprintf+0x14c>
    279a:	6f ef       	ldi	r22, 0xFF	; 255
    279c:	7f ef       	ldi	r23, 0xFF	; 255
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <vfprintf+0x150>
    27a0:	69 2d       	mov	r22, r9
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	42 e0       	ldi	r20, 0x02	; 2
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	a4 0e       	add	r10, r20
    27aa:	b5 1e       	adc	r11, r21
    27ac:	c6 01       	movw	r24, r12
    27ae:	0e 94 12 15 	call	0x2a24	; 0x2a24 <strnlen>
    27b2:	8c 01       	movw	r16, r24
    27b4:	5f e7       	ldi	r21, 0x7F	; 127
    27b6:	f5 22       	and	r15, r21
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <vfprintf+0x18e>
    27ba:	f5 01       	movw	r30, r10
    27bc:	c0 80       	ld	r12, Z
    27be:	d1 80       	ldd	r13, Z+1	; 0x01
    27c0:	f6 fc       	sbrc	r15, 6
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <vfprintf+0x176>
    27c4:	6f ef       	ldi	r22, 0xFF	; 255
    27c6:	7f ef       	ldi	r23, 0xFF	; 255
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0x17a>
    27ca:	69 2d       	mov	r22, r9
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	42 e0       	ldi	r20, 0x02	; 2
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	a4 0e       	add	r10, r20
    27d4:	b5 1e       	adc	r11, r21
    27d6:	c6 01       	movw	r24, r12
    27d8:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <strnlen_P>
    27dc:	8c 01       	movw	r16, r24
    27de:	50 e8       	ldi	r21, 0x80	; 128
    27e0:	f5 2a       	or	r15, r21
    27e2:	f3 fe       	sbrs	r15, 3
    27e4:	07 c0       	rjmp	.+14     	; 0x27f4 <vfprintf+0x1a0>
    27e6:	1a c0       	rjmp	.+52     	; 0x281c <vfprintf+0x1c8>
    27e8:	80 e2       	ldi	r24, 0x20	; 32
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	b3 01       	movw	r22, r6
    27ee:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    27f2:	ea 94       	dec	r14
    27f4:	8e 2d       	mov	r24, r14
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	08 17       	cp	r16, r24
    27fa:	19 07       	cpc	r17, r25
    27fc:	a8 f3       	brcs	.-22     	; 0x27e8 <vfprintf+0x194>
    27fe:	0e c0       	rjmp	.+28     	; 0x281c <vfprintf+0x1c8>
    2800:	f6 01       	movw	r30, r12
    2802:	f7 fc       	sbrc	r15, 7
    2804:	85 91       	lpm	r24, Z+
    2806:	f7 fe       	sbrs	r15, 7
    2808:	81 91       	ld	r24, Z+
    280a:	6f 01       	movw	r12, r30
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	b3 01       	movw	r22, r6
    2810:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    2814:	e1 10       	cpse	r14, r1
    2816:	ea 94       	dec	r14
    2818:	01 50       	subi	r16, 0x01	; 1
    281a:	10 40       	sbci	r17, 0x00	; 0
    281c:	01 15       	cp	r16, r1
    281e:	11 05       	cpc	r17, r1
    2820:	79 f7       	brne	.-34     	; 0x2800 <vfprintf+0x1ac>
    2822:	ea c0       	rjmp	.+468    	; 0x29f8 <vfprintf+0x3a4>
    2824:	94 36       	cpi	r25, 0x64	; 100
    2826:	11 f0       	breq	.+4      	; 0x282c <vfprintf+0x1d8>
    2828:	99 36       	cpi	r25, 0x69	; 105
    282a:	69 f5       	brne	.+90     	; 0x2886 <vfprintf+0x232>
    282c:	f7 fe       	sbrs	r15, 7
    282e:	08 c0       	rjmp	.+16     	; 0x2840 <vfprintf+0x1ec>
    2830:	f5 01       	movw	r30, r10
    2832:	20 81       	ld	r18, Z
    2834:	31 81       	ldd	r19, Z+1	; 0x01
    2836:	42 81       	ldd	r20, Z+2	; 0x02
    2838:	53 81       	ldd	r21, Z+3	; 0x03
    283a:	84 e0       	ldi	r24, 0x04	; 4
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0a c0       	rjmp	.+20     	; 0x2854 <vfprintf+0x200>
    2840:	f5 01       	movw	r30, r10
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	9c 01       	movw	r18, r24
    2848:	44 27       	eor	r20, r20
    284a:	37 fd       	sbrc	r19, 7
    284c:	40 95       	com	r20
    284e:	54 2f       	mov	r21, r20
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	a8 0e       	add	r10, r24
    2856:	b9 1e       	adc	r11, r25
    2858:	9f e6       	ldi	r25, 0x6F	; 111
    285a:	f9 22       	and	r15, r25
    285c:	57 ff       	sbrs	r21, 7
    285e:	09 c0       	rjmp	.+18     	; 0x2872 <vfprintf+0x21e>
    2860:	50 95       	com	r21
    2862:	40 95       	com	r20
    2864:	30 95       	com	r19
    2866:	21 95       	neg	r18
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	4f 4f       	sbci	r20, 0xFF	; 255
    286c:	5f 4f       	sbci	r21, 0xFF	; 255
    286e:	e0 e8       	ldi	r30, 0x80	; 128
    2870:	fe 2a       	or	r15, r30
    2872:	ca 01       	movw	r24, r20
    2874:	b9 01       	movw	r22, r18
    2876:	a1 01       	movw	r20, r2
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__ultoa_invert>
    2880:	d8 2e       	mov	r13, r24
    2882:	d2 18       	sub	r13, r2
    2884:	40 c0       	rjmp	.+128    	; 0x2906 <vfprintf+0x2b2>
    2886:	95 37       	cpi	r25, 0x75	; 117
    2888:	29 f4       	brne	.+10     	; 0x2894 <vfprintf+0x240>
    288a:	1f 2d       	mov	r17, r15
    288c:	1f 7e       	andi	r17, 0xEF	; 239
    288e:	2a e0       	ldi	r18, 0x0A	; 10
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	1d c0       	rjmp	.+58     	; 0x28ce <vfprintf+0x27a>
    2894:	1f 2d       	mov	r17, r15
    2896:	19 7f       	andi	r17, 0xF9	; 249
    2898:	9f 36       	cpi	r25, 0x6F	; 111
    289a:	61 f0       	breq	.+24     	; 0x28b4 <vfprintf+0x260>
    289c:	90 37       	cpi	r25, 0x70	; 112
    289e:	20 f4       	brcc	.+8      	; 0x28a8 <vfprintf+0x254>
    28a0:	98 35       	cpi	r25, 0x58	; 88
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <vfprintf+0x252>
    28a4:	ac c0       	rjmp	.+344    	; 0x29fe <vfprintf+0x3aa>
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <vfprintf+0x272>
    28a8:	90 37       	cpi	r25, 0x70	; 112
    28aa:	39 f0       	breq	.+14     	; 0x28ba <vfprintf+0x266>
    28ac:	98 37       	cpi	r25, 0x78	; 120
    28ae:	09 f0       	breq	.+2      	; 0x28b2 <vfprintf+0x25e>
    28b0:	a6 c0       	rjmp	.+332    	; 0x29fe <vfprintf+0x3aa>
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <vfprintf+0x268>
    28b4:	28 e0       	ldi	r18, 0x08	; 8
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	0a c0       	rjmp	.+20     	; 0x28ce <vfprintf+0x27a>
    28ba:	10 61       	ori	r17, 0x10	; 16
    28bc:	14 fd       	sbrc	r17, 4
    28be:	14 60       	ori	r17, 0x04	; 4
    28c0:	20 e1       	ldi	r18, 0x10	; 16
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	04 c0       	rjmp	.+8      	; 0x28ce <vfprintf+0x27a>
    28c6:	14 fd       	sbrc	r17, 4
    28c8:	16 60       	ori	r17, 0x06	; 6
    28ca:	20 e1       	ldi	r18, 0x10	; 16
    28cc:	32 e0       	ldi	r19, 0x02	; 2
    28ce:	17 ff       	sbrs	r17, 7
    28d0:	08 c0       	rjmp	.+16     	; 0x28e2 <vfprintf+0x28e>
    28d2:	f5 01       	movw	r30, r10
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	44 e0       	ldi	r20, 0x04	; 4
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	08 c0       	rjmp	.+16     	; 0x28f2 <vfprintf+0x29e>
    28e2:	f5 01       	movw	r30, r10
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	bc 01       	movw	r22, r24
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	42 e0       	ldi	r20, 0x02	; 2
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	a4 0e       	add	r10, r20
    28f4:	b5 1e       	adc	r11, r21
    28f6:	a1 01       	movw	r20, r2
    28f8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__ultoa_invert>
    28fc:	d8 2e       	mov	r13, r24
    28fe:	d2 18       	sub	r13, r2
    2900:	8f e7       	ldi	r24, 0x7F	; 127
    2902:	f8 2e       	mov	r15, r24
    2904:	f1 22       	and	r15, r17
    2906:	f6 fe       	sbrs	r15, 6
    2908:	0b c0       	rjmp	.+22     	; 0x2920 <vfprintf+0x2cc>
    290a:	5e ef       	ldi	r21, 0xFE	; 254
    290c:	f5 22       	and	r15, r21
    290e:	d9 14       	cp	r13, r9
    2910:	38 f4       	brcc	.+14     	; 0x2920 <vfprintf+0x2cc>
    2912:	f4 fe       	sbrs	r15, 4
    2914:	07 c0       	rjmp	.+14     	; 0x2924 <vfprintf+0x2d0>
    2916:	f2 fc       	sbrc	r15, 2
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <vfprintf+0x2d0>
    291a:	8f ee       	ldi	r24, 0xEF	; 239
    291c:	f8 22       	and	r15, r24
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <vfprintf+0x2d0>
    2920:	1d 2d       	mov	r17, r13
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <vfprintf+0x2d2>
    2924:	19 2d       	mov	r17, r9
    2926:	f4 fe       	sbrs	r15, 4
    2928:	0d c0       	rjmp	.+26     	; 0x2944 <vfprintf+0x2f0>
    292a:	fe 01       	movw	r30, r28
    292c:	ed 0d       	add	r30, r13
    292e:	f1 1d       	adc	r31, r1
    2930:	80 81       	ld	r24, Z
    2932:	80 33       	cpi	r24, 0x30	; 48
    2934:	19 f4       	brne	.+6      	; 0x293c <vfprintf+0x2e8>
    2936:	99 ee       	ldi	r25, 0xE9	; 233
    2938:	f9 22       	and	r15, r25
    293a:	08 c0       	rjmp	.+16     	; 0x294c <vfprintf+0x2f8>
    293c:	1f 5f       	subi	r17, 0xFF	; 255
    293e:	f2 fe       	sbrs	r15, 2
    2940:	05 c0       	rjmp	.+10     	; 0x294c <vfprintf+0x2f8>
    2942:	03 c0       	rjmp	.+6      	; 0x294a <vfprintf+0x2f6>
    2944:	8f 2d       	mov	r24, r15
    2946:	86 78       	andi	r24, 0x86	; 134
    2948:	09 f0       	breq	.+2      	; 0x294c <vfprintf+0x2f8>
    294a:	1f 5f       	subi	r17, 0xFF	; 255
    294c:	0f 2d       	mov	r16, r15
    294e:	f3 fc       	sbrc	r15, 3
    2950:	14 c0       	rjmp	.+40     	; 0x297a <vfprintf+0x326>
    2952:	f0 fe       	sbrs	r15, 0
    2954:	0f c0       	rjmp	.+30     	; 0x2974 <vfprintf+0x320>
    2956:	1e 15       	cp	r17, r14
    2958:	10 f0       	brcs	.+4      	; 0x295e <vfprintf+0x30a>
    295a:	9d 2c       	mov	r9, r13
    295c:	0b c0       	rjmp	.+22     	; 0x2974 <vfprintf+0x320>
    295e:	9d 2c       	mov	r9, r13
    2960:	9e 0c       	add	r9, r14
    2962:	91 1a       	sub	r9, r17
    2964:	1e 2d       	mov	r17, r14
    2966:	06 c0       	rjmp	.+12     	; 0x2974 <vfprintf+0x320>
    2968:	80 e2       	ldi	r24, 0x20	; 32
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	b3 01       	movw	r22, r6
    296e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    2972:	1f 5f       	subi	r17, 0xFF	; 255
    2974:	1e 15       	cp	r17, r14
    2976:	c0 f3       	brcs	.-16     	; 0x2968 <vfprintf+0x314>
    2978:	04 c0       	rjmp	.+8      	; 0x2982 <vfprintf+0x32e>
    297a:	1e 15       	cp	r17, r14
    297c:	10 f4       	brcc	.+4      	; 0x2982 <vfprintf+0x32e>
    297e:	e1 1a       	sub	r14, r17
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <vfprintf+0x330>
    2982:	ee 24       	eor	r14, r14
    2984:	04 ff       	sbrs	r16, 4
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <vfprintf+0x352>
    2988:	80 e3       	ldi	r24, 0x30	; 48
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	b3 01       	movw	r22, r6
    298e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    2992:	02 ff       	sbrs	r16, 2
    2994:	1d c0       	rjmp	.+58     	; 0x29d0 <vfprintf+0x37c>
    2996:	01 fd       	sbrc	r16, 1
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <vfprintf+0x34c>
    299a:	88 e7       	ldi	r24, 0x78	; 120
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e c0       	rjmp	.+28     	; 0x29bc <vfprintf+0x368>
    29a0:	88 e5       	ldi	r24, 0x58	; 88
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0b c0       	rjmp	.+22     	; 0x29bc <vfprintf+0x368>
    29a6:	80 2f       	mov	r24, r16
    29a8:	86 78       	andi	r24, 0x86	; 134
    29aa:	91 f0       	breq	.+36     	; 0x29d0 <vfprintf+0x37c>
    29ac:	01 ff       	sbrs	r16, 1
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <vfprintf+0x360>
    29b0:	8b e2       	ldi	r24, 0x2B	; 43
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <vfprintf+0x362>
    29b4:	80 e2       	ldi	r24, 0x20	; 32
    29b6:	f7 fc       	sbrc	r15, 7
    29b8:	8d e2       	ldi	r24, 0x2D	; 45
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	b3 01       	movw	r22, r6
    29be:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29c2:	06 c0       	rjmp	.+12     	; 0x29d0 <vfprintf+0x37c>
    29c4:	80 e3       	ldi	r24, 0x30	; 48
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	b3 01       	movw	r22, r6
    29ca:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29ce:	9a 94       	dec	r9
    29d0:	d9 14       	cp	r13, r9
    29d2:	c0 f3       	brcs	.-16     	; 0x29c4 <vfprintf+0x370>
    29d4:	da 94       	dec	r13
    29d6:	f1 01       	movw	r30, r2
    29d8:	ed 0d       	add	r30, r13
    29da:	f1 1d       	adc	r31, r1
    29dc:	80 81       	ld	r24, Z
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	b3 01       	movw	r22, r6
    29e2:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29e6:	dd 20       	and	r13, r13
    29e8:	a9 f7       	brne	.-22     	; 0x29d4 <vfprintf+0x380>
    29ea:	06 c0       	rjmp	.+12     	; 0x29f8 <vfprintf+0x3a4>
    29ec:	80 e2       	ldi	r24, 0x20	; 32
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	b3 01       	movw	r22, r6
    29f2:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29f6:	ea 94       	dec	r14
    29f8:	ee 20       	and	r14, r14
    29fa:	c1 f7       	brne	.-16     	; 0x29ec <vfprintf+0x398>
    29fc:	43 ce       	rjmp	.-890    	; 0x2684 <vfprintf+0x30>
    29fe:	f3 01       	movw	r30, r6
    2a00:	66 81       	ldd	r22, Z+6	; 0x06
    2a02:	77 81       	ldd	r23, Z+7	; 0x07
    2a04:	cb 01       	movw	r24, r22
    2a06:	2b 96       	adiw	r28, 0x0b	; 11
    2a08:	e2 e1       	ldi	r30, 0x12	; 18
    2a0a:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00002a0e <strnlen_P>:
    2a0e:	fc 01       	movw	r30, r24
    2a10:	05 90       	lpm	r0, Z+
    2a12:	61 50       	subi	r22, 0x01	; 1
    2a14:	70 40       	sbci	r23, 0x00	; 0
    2a16:	01 10       	cpse	r0, r1
    2a18:	d8 f7       	brcc	.-10     	; 0x2a10 <strnlen_P+0x2>
    2a1a:	80 95       	com	r24
    2a1c:	90 95       	com	r25
    2a1e:	8e 0f       	add	r24, r30
    2a20:	9f 1f       	adc	r25, r31
    2a22:	08 95       	ret

00002a24 <strnlen>:
    2a24:	fc 01       	movw	r30, r24
    2a26:	61 50       	subi	r22, 0x01	; 1
    2a28:	70 40       	sbci	r23, 0x00	; 0
    2a2a:	01 90       	ld	r0, Z+
    2a2c:	01 10       	cpse	r0, r1
    2a2e:	d8 f7       	brcc	.-10     	; 0x2a26 <strnlen+0x2>
    2a30:	80 95       	com	r24
    2a32:	90 95       	com	r25
    2a34:	8e 0f       	add	r24, r30
    2a36:	9f 1f       	adc	r25, r31
    2a38:	08 95       	ret

00002a3a <fputc>:
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	8c 01       	movw	r16, r24
    2a44:	eb 01       	movw	r28, r22
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	81 ff       	sbrs	r24, 1
    2a4a:	1b c0       	rjmp	.+54     	; 0x2a82 <fputc+0x48>
    2a4c:	82 ff       	sbrs	r24, 2
    2a4e:	0d c0       	rjmp	.+26     	; 0x2a6a <fputc+0x30>
    2a50:	2e 81       	ldd	r18, Y+6	; 0x06
    2a52:	3f 81       	ldd	r19, Y+7	; 0x07
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	9d 81       	ldd	r25, Y+5	; 0x05
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	64 f4       	brge	.+24     	; 0x2a76 <fputc+0x3c>
    2a5e:	e8 81       	ld	r30, Y
    2a60:	f9 81       	ldd	r31, Y+1	; 0x01
    2a62:	01 93       	st	Z+, r16
    2a64:	f9 83       	std	Y+1, r31	; 0x01
    2a66:	e8 83       	st	Y, r30
    2a68:	06 c0       	rjmp	.+12     	; 0x2a76 <fputc+0x3c>
    2a6a:	e8 85       	ldd	r30, Y+8	; 0x08
    2a6c:	f9 85       	ldd	r31, Y+9	; 0x09
    2a6e:	80 2f       	mov	r24, r16
    2a70:	09 95       	icall
    2a72:	89 2b       	or	r24, r25
    2a74:	31 f4       	brne	.+12     	; 0x2a82 <fputc+0x48>
    2a76:	8e 81       	ldd	r24, Y+6	; 0x06
    2a78:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	9f 83       	std	Y+7, r25	; 0x07
    2a7e:	8e 83       	std	Y+6, r24	; 0x06
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <fputc+0x4c>
    2a82:	0f ef       	ldi	r16, 0xFF	; 255
    2a84:	1f ef       	ldi	r17, 0xFF	; 255
    2a86:	c8 01       	movw	r24, r16
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	08 95       	ret

00002a92 <__ultoa_invert>:
    2a92:	fa 01       	movw	r30, r20
    2a94:	aa 27       	eor	r26, r26
    2a96:	28 30       	cpi	r18, 0x08	; 8
    2a98:	51 f1       	breq	.+84     	; 0x2aee <__ultoa_invert+0x5c>
    2a9a:	20 31       	cpi	r18, 0x10	; 16
    2a9c:	81 f1       	breq	.+96     	; 0x2afe <__ultoa_invert+0x6c>
    2a9e:	e8 94       	clt
    2aa0:	6f 93       	push	r22
    2aa2:	6e 7f       	andi	r22, 0xFE	; 254
    2aa4:	6e 5f       	subi	r22, 0xFE	; 254
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	af 4f       	sbci	r26, 0xFF	; 255
    2aae:	b1 e0       	ldi	r27, 0x01	; 1
    2ab0:	3e d0       	rcall	.+124    	; 0x2b2e <__ultoa_invert+0x9c>
    2ab2:	b4 e0       	ldi	r27, 0x04	; 4
    2ab4:	3c d0       	rcall	.+120    	; 0x2b2e <__ultoa_invert+0x9c>
    2ab6:	67 0f       	add	r22, r23
    2ab8:	78 1f       	adc	r23, r24
    2aba:	89 1f       	adc	r24, r25
    2abc:	9a 1f       	adc	r25, r26
    2abe:	a1 1d       	adc	r26, r1
    2ac0:	68 0f       	add	r22, r24
    2ac2:	79 1f       	adc	r23, r25
    2ac4:	8a 1f       	adc	r24, r26
    2ac6:	91 1d       	adc	r25, r1
    2ac8:	a1 1d       	adc	r26, r1
    2aca:	6a 0f       	add	r22, r26
    2acc:	71 1d       	adc	r23, r1
    2ace:	81 1d       	adc	r24, r1
    2ad0:	91 1d       	adc	r25, r1
    2ad2:	a1 1d       	adc	r26, r1
    2ad4:	20 d0       	rcall	.+64     	; 0x2b16 <__ultoa_invert+0x84>
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <__ultoa_invert+0x48>
    2ad8:	68 94       	set
    2ada:	3f 91       	pop	r19
    2adc:	2a e0       	ldi	r18, 0x0A	; 10
    2ade:	26 9f       	mul	r18, r22
    2ae0:	11 24       	eor	r1, r1
    2ae2:	30 19       	sub	r19, r0
    2ae4:	30 5d       	subi	r19, 0xD0	; 208
    2ae6:	31 93       	st	Z+, r19
    2ae8:	de f6       	brtc	.-74     	; 0x2aa0 <__ultoa_invert+0xe>
    2aea:	cf 01       	movw	r24, r30
    2aec:	08 95       	ret
    2aee:	46 2f       	mov	r20, r22
    2af0:	47 70       	andi	r20, 0x07	; 7
    2af2:	40 5d       	subi	r20, 0xD0	; 208
    2af4:	41 93       	st	Z+, r20
    2af6:	b3 e0       	ldi	r27, 0x03	; 3
    2af8:	0f d0       	rcall	.+30     	; 0x2b18 <__ultoa_invert+0x86>
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <__ultoa_invert+0x5c>
    2afc:	f6 cf       	rjmp	.-20     	; 0x2aea <__ultoa_invert+0x58>
    2afe:	46 2f       	mov	r20, r22
    2b00:	4f 70       	andi	r20, 0x0F	; 15
    2b02:	40 5d       	subi	r20, 0xD0	; 208
    2b04:	4a 33       	cpi	r20, 0x3A	; 58
    2b06:	18 f0       	brcs	.+6      	; 0x2b0e <__ultoa_invert+0x7c>
    2b08:	49 5d       	subi	r20, 0xD9	; 217
    2b0a:	31 fd       	sbrc	r19, 1
    2b0c:	40 52       	subi	r20, 0x20	; 32
    2b0e:	41 93       	st	Z+, r20
    2b10:	02 d0       	rcall	.+4      	; 0x2b16 <__ultoa_invert+0x84>
    2b12:	a9 f7       	brne	.-22     	; 0x2afe <__ultoa_invert+0x6c>
    2b14:	ea cf       	rjmp	.-44     	; 0x2aea <__ultoa_invert+0x58>
    2b16:	b4 e0       	ldi	r27, 0x04	; 4
    2b18:	a6 95       	lsr	r26
    2b1a:	97 95       	ror	r25
    2b1c:	87 95       	ror	r24
    2b1e:	77 95       	ror	r23
    2b20:	67 95       	ror	r22
    2b22:	ba 95       	dec	r27
    2b24:	c9 f7       	brne	.-14     	; 0x2b18 <__ultoa_invert+0x86>
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	61 05       	cpc	r22, r1
    2b2a:	71 05       	cpc	r23, r1
    2b2c:	08 95       	ret
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	0a 2e       	mov	r0, r26
    2b34:	06 94       	lsr	r0
    2b36:	57 95       	ror	r21
    2b38:	47 95       	ror	r20
    2b3a:	37 95       	ror	r19
    2b3c:	27 95       	ror	r18
    2b3e:	ba 95       	dec	r27
    2b40:	c9 f7       	brne	.-14     	; 0x2b34 <__ultoa_invert+0xa2>
    2b42:	62 0f       	add	r22, r18
    2b44:	73 1f       	adc	r23, r19
    2b46:	84 1f       	adc	r24, r20
    2b48:	95 1f       	adc	r25, r21
    2b4a:	a0 1d       	adc	r26, r0
    2b4c:	08 95       	ret

00002b4e <_exit>:
    2b4e:	f8 94       	cli

00002b50 <__stop_program>:
    2b50:	ff cf       	rjmp	.-2      	; 0x2b50 <__stop_program>
