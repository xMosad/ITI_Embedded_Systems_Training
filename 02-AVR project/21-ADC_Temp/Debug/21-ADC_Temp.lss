
21-ADC_Temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002cec  00002d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800170  00800170  00002e90  2**0
                  ALLOC
  3 .stab         00001b60  00000000  00000000  00002e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e84  00000000  00000000  000049f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009397  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000aa26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <main>
      8a:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e6       	ldi	r22, 0x67	; 103
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 59       	subi	r30, 0x91	; 145
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
void (* ADC_ISR)(void) = NULL ;
u8 * Global_AdcReadPtr = NULL ;
u8 Global_AdcState = ADC_FREE ; 

void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* Select ADC Ref */
	SET_BIT(ADMUX , ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
	
	/* Left Adjust to read the high 8 bit only */
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
	
	/* Prescaller selsction to 128*/
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
	
	/* Enable ADC */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u8GetChannelReading>:

u8 ADC_u8GetChannelReading (u8 Cpy_channel)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <ADC_u8GetChannelReading+0x6>
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_timeOut = 0 ;
     eac:	1a 82       	std	Y+2, r1	; 0x02
     eae:	19 82       	std	Y+1, r1	; 0x01
	/*** Select channel ***/
	/* Clear the 5 bits first */
	ADMUX &= ~(CLEAR_FIVE_BITS<<ADMUX_MUX0);
     eb0:	a7 e2       	ldi	r26, 0x27	; 39
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e2       	ldi	r30, 0x27	; 39
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 7e       	andi	r24, 0xE0	; 224
     ebc:	8c 93       	st	X, r24
	/* Put channel ID in the 5 bits*/	
	ADMUX |= (Cpy_channel<<ADMUX_MUX0); 
     ebe:	a7 e2       	ldi	r26, 0x27	; 39
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e7 e2       	ldi	r30, 0x27	; 39
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	90 81       	ld	r25, Z
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	89 2b       	or	r24, r25
     ecc:	8c 93       	st	X, r24
	
	/*** Start conversion  ***/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     ece:	a6 e2       	ldi	r26, 0x26	; 38
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e6 e2       	ldi	r30, 0x26	; 38
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 64       	ori	r24, 0x40	; 64
     eda:	8c 93       	st	X, r24
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <ADC_u8GetChannelReading+0x4a>
	
	/*** Wait conversion  ***/
	/* With timeout to ensure that the code wont be stuck here */
	while ((!GET_BIT(ADCSRA,ADCSRA_ADIF)) && (local_timeOut < 20000))
	{
		local_timeOut++;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	/*** Start conversion  ***/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
	
	/*** Wait conversion  ***/
	/* With timeout to ensure that the code wont be stuck here */
	while ((!GET_BIT(ADCSRA,ADCSRA_ADIF)) && (local_timeOut < 20000))
     ee8:	e6 e2       	ldi	r30, 0x26	; 38
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	8f 70       	andi	r24, 0x0F	; 15
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	90 70       	andi	r25, 0x00	; 0
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	31 f4       	brne	.+12     	; 0xf0a <ADC_u8GetChannelReading+0x6c>
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	2e e4       	ldi	r18, 0x4E	; 78
     f04:	80 32       	cpi	r24, 0x20	; 32
     f06:	92 07       	cpc	r25, r18
     f08:	50 f3       	brcs	.-44     	; 0xede <ADC_u8GetChannelReading+0x40>
	{
		local_timeOut++;
	}
		
	/*** Clear complete flag by writing logic one ***/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     f0a:	a6 e2       	ldi	r26, 0x26	; 38
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e6 e2       	ldi	r30, 0x26	; 38
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 61       	ori	r24, 0x10	; 16
     f16:	8c 93       	st	X, r24
	
	/*** Return value   ***/
	return ADCH ;
     f18:	e5 e2       	ldi	r30, 0x25	; 37
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <ADC_u8GetChReadAsynch>:

u8 ADC_u8GetChReadAsynch(u8 Cpy_channel , void(*func)(void) , u8 *Cpy_read)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <ADC_u8GetChReadAsynch+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <ADC_u8GetChReadAsynch+0x8>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <ADC_u8GetChReadAsynch+0xa>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	7c 83       	std	Y+4, r23	; 0x04
     f3c:	6b 83       	std	Y+3, r22	; 0x03
     f3e:	5e 83       	std	Y+6, r21	; 0x06
     f40:	4d 83       	std	Y+5, r20	; 0x05
	u8 local_error = OK ;
     f42:	19 82       	std	Y+1, r1	; 0x01
	if ((func != NULL) &&(Cpy_read != NULL) && (Global_AdcState ==ADC_FREE) )
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	a1 f1       	breq	.+104    	; 0xfb4 <ADC_u8GetChReadAsynch+0x8a>
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	81 f1       	breq	.+96     	; 0xfb4 <ADC_u8GetChReadAsynch+0x8a>
     f54:	80 91 6f 01 	lds	r24, 0x016F
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	61 f5       	brne	.+88     	; 0xfb4 <ADC_u8GetChReadAsynch+0x8a>
	{
		/* Set ISR function callback, set global reading variable */
		Global_AdcReadPtr = Cpy_read ;
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	90 93 73 01 	sts	0x0173, r25
     f64:	80 93 72 01 	sts	0x0172, r24
		ADC_ISR = func;
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	90 93 71 01 	sts	0x0171, r25
     f70:	80 93 70 01 	sts	0x0170, r24

		/*** Select channel ***/
		ADMUX &= ~(CLEAR_FIVE_BITS<<ADMUX_MUX0); // Clear five bits first
     f74:	a7 e2       	ldi	r26, 0x27	; 39
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e7 e2       	ldi	r30, 0x27	; 39
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 7e       	andi	r24, 0xE0	; 224
     f80:	8c 93       	st	X, r24
		ADMUX |= (Cpy_channel<<ADMUX_MUX0); // then write them
     f82:	a7 e2       	ldi	r26, 0x27	; 39
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 e2       	ldi	r30, 0x27	; 39
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	90 81       	ld	r25, Z
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	89 2b       	or	r24, r25
     f90:	8c 93       	st	X, r24

		/*** Update ADC state ***/
		Global_AdcState = ADC_BUSY ;
     f92:	10 92 6f 01 	sts	0x016F, r1

		/*** Start conversion  ***/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     f96:	a6 e2       	ldi	r26, 0x26	; 38
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e6 e2       	ldi	r30, 0x26	; 38
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 64       	ori	r24, 0x40	; 64
     fa2:	8c 93       	st	X, r24

		/*** Enable Interrupt  ***/
		SET_BIT(ADCSRA,ADCSRA_ADIE);
     fa4:	a6 e2       	ldi	r26, 0x26	; 38
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e6 e2       	ldi	r30, 0x26	; 38
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	88 60       	ori	r24, 0x08	; 8
     fb0:	8c 93       	st	X, r24
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <ADC_u8GetChReadAsynch+0x8e>
	}
	else
	{
		local_error = N_OK ;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fba:	26 96       	adiw	r28, 0x06	; 6
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <__vector_16>:

void __vector_16 (void) __attribute__((signal)) ;
void __vector_16 (void)
{
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	if (ADC_ISR != NULL)
     ff6:	80 91 70 01 	lds	r24, 0x0170
     ffa:	90 91 71 01 	lds	r25, 0x0171
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	81 f0       	breq	.+32     	; 0x1022 <__vector_16+0x56>
	{
		*Global_AdcReadPtr = ADCH ;
    1002:	a0 91 72 01 	lds	r26, 0x0172
    1006:	b0 91 73 01 	lds	r27, 0x0173
    100a:	e5 e2       	ldi	r30, 0x25	; 37
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8c 93       	st	X, r24
		Global_AdcState = ADC_FREE;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 93 6f 01 	sts	0x016F, r24
		ADC_ISR();
    1018:	e0 91 70 01 	lds	r30, 0x0170
    101c:	f0 91 71 01 	lds	r31, 0x0171
    1020:	09 95       	icall
	}

}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <GIE_voidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"
#include "GIE_Cfg.h"

void GIE_voidEnable(void)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    1050:	af e5       	ldi	r26, 0x5F	; 95
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ef e5       	ldi	r30, 0x5F	; 95
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 68       	ori	r24, 0x80	; 128
    105c:	8c 93       	st	X, r24
}
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    106c:	af e5       	ldi	r26, 0x5F	; 95
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ef e5       	ldi	r30, 0x5F	; 95
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 77       	andi	r24, 0x7F	; 127
    1078:	8c 93       	st	X, r24
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <GPIO_voidSetPinValue>:

#include "GPIO_Interface.h"
#include "GPIO_Private.h"

void GPIO_voidSetPinValue(u8 port_id , u8 pin , u8 value)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	27 97       	sbiw	r28, 0x07	; 7
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
    1098:	4b 83       	std	Y+3, r20	; 0x03
	if (value == HIGH)
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	09 f0       	breq	.+2      	; 0x10a2 <GPIO_voidSetPinValue+0x22>
    10a0:	6f c0       	rjmp	.+222    	; 0x1180 <GPIO_voidSetPinValue+0x100>
	{
		switch (port_id)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3f 83       	std	Y+7, r19	; 0x07
    10aa:	2e 83       	std	Y+6, r18	; 0x06
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	9f 81       	ldd	r25, Y+7	; 0x07
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	49 f1       	breq	.+82     	; 0x1108 <GPIO_voidSetPinValue+0x88>
    10b6:	2e 81       	ldd	r18, Y+6	; 0x06
    10b8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	2c f4       	brge	.+10     	; 0x10ca <GPIO_voidSetPinValue+0x4a>
    10c0:	8e 81       	ldd	r24, Y+6	; 0x06
    10c2:	9f 81       	ldd	r25, Y+7	; 0x07
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <GPIO_voidSetPinValue+0x60>
    10c8:	d2 c0       	rjmp	.+420    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
    10ca:	2e 81       	ldd	r18, Y+6	; 0x06
    10cc:	3f 81       	ldd	r19, Y+7	; 0x07
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	71 f1       	breq	.+92     	; 0x1130 <GPIO_voidSetPinValue+0xb0>
    10d4:	8e 81       	ldd	r24, Y+6	; 0x06
    10d6:	9f 81       	ldd	r25, Y+7	; 0x07
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	e9 f1       	breq	.+122    	; 0x1158 <GPIO_voidSetPinValue+0xd8>
    10de:	c7 c0       	rjmp	.+398    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_PORTA , pin);
    10e0:	ab e3       	ldi	r26, 0x3B	; 59
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	eb e3       	ldi	r30, 0x3B	; 59
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_voidSetPinValue+0x7e>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_voidSetPinValue+0x7a>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	b3 c0       	rjmp	.+358    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_PORTB , pin);
    1108:	a8 e3       	ldi	r26, 0x38	; 56
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e3       	ldi	r30, 0x38	; 56
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_voidSetPinValue+0xa6>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_voidSetPinValue+0xa2>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	9f c0       	rjmp	.+318    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_PORTC , pin);
    1130:	a5 e3       	ldi	r26, 0x35	; 53
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e3       	ldi	r30, 0x35	; 53
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_voidSetPinValue+0xce>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_voidSetPinValue+0xca>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	8b c0       	rjmp	.+278    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_PORTD , pin);
    1158:	a2 e3       	ldi	r26, 0x32	; 50
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e2 e3       	ldi	r30, 0x32	; 50
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <GPIO_voidSetPinValue+0xf6>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <GPIO_voidSetPinValue+0xf2>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	77 c0       	rjmp	.+238    	; 0x126e <GPIO_voidSetPinValue+0x1ee>

			default:
			break;
		}
	}
	else if (value == LOW)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 23       	and	r24, r24
    1184:	09 f0       	breq	.+2      	; 0x1188 <GPIO_voidSetPinValue+0x108>
    1186:	73 c0       	rjmp	.+230    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
	{
		switch (port_id)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3d 83       	std	Y+5, r19	; 0x05
    1190:	2c 83       	std	Y+4, r18	; 0x04
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	59 f1       	breq	.+86     	; 0x11f2 <GPIO_voidSetPinValue+0x172>
    119c:	2c 81       	ldd	r18, Y+4	; 0x04
    119e:	3d 81       	ldd	r19, Y+5	; 0x05
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <GPIO_voidSetPinValue+0x130>
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	9d 81       	ldd	r25, Y+5	; 0x05
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	69 f0       	breq	.+26     	; 0x11c8 <GPIO_voidSetPinValue+0x148>
    11ae:	5f c0       	rjmp	.+190    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
    11b0:	2c 81       	ldd	r18, Y+4	; 0x04
    11b2:	3d 81       	ldd	r19, Y+5	; 0x05
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	89 f1       	breq	.+98     	; 0x121c <GPIO_voidSetPinValue+0x19c>
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <GPIO_voidSetPinValue+0x146>
    11c4:	40 c0       	rjmp	.+128    	; 0x1246 <GPIO_voidSetPinValue+0x1c6>
    11c6:	53 c0       	rjmp	.+166    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_PORTA , pin);
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_voidSetPinValue+0x166>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_voidSetPinValue+0x162>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	3e c0       	rjmp	.+124    	; 0x126e <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_PORTB , pin);
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_voidSetPinValue+0x190>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_voidSetPinValue+0x18c>
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	29 c0       	rjmp	.+82     	; 0x126e <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_PORTC , pin);
    121c:	a5 e3       	ldi	r26, 0x35	; 53
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e3       	ldi	r30, 0x35	; 53
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <GPIO_voidSetPinValue+0x1ba>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <GPIO_voidSetPinValue+0x1b6>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	14 c0       	rjmp	.+40     	; 0x126e <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_PORTD , pin);
    1246:	a2 e3       	ldi	r26, 0x32	; 50
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e2 e3       	ldi	r30, 0x32	; 50
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_voidSetPinValue+0x1e4>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_voidSetPinValue+0x1e0>
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8c 93       	st	X, r24
	{
		/* Should not be here */
	}


}
    126e:	27 96       	adiw	r28, 0x07	; 7
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <GPIO_voidSetPinDirection>:

void GPIO_voidSetPinDirection(u8 port_id , u8 pin , u8 dirc )
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	27 97       	sbiw	r28, 0x07	; 7
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
    1298:	4b 83       	std	Y+3, r20	; 0x03
	if (dirc == OUTPUT)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <GPIO_voidSetPinDirection+0x22>
    12a0:	6f c0       	rjmp	.+222    	; 0x1380 <GPIO_voidSetPinDirection+0x100>
	{
		switch (port_id)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3f 83       	std	Y+7, r19	; 0x07
    12aa:	2e 83       	std	Y+6, r18	; 0x06
    12ac:	8e 81       	ldd	r24, Y+6	; 0x06
    12ae:	9f 81       	ldd	r25, Y+7	; 0x07
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	49 f1       	breq	.+82     	; 0x1308 <GPIO_voidSetPinDirection+0x88>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	2c f4       	brge	.+10     	; 0x12ca <GPIO_voidSetPinDirection+0x4a>
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	9f 81       	ldd	r25, Y+7	; 0x07
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <GPIO_voidSetPinDirection+0x60>
    12c8:	d2 c0       	rjmp	.+420    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
    12ca:	2e 81       	ldd	r18, Y+6	; 0x06
    12cc:	3f 81       	ldd	r19, Y+7	; 0x07
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	71 f1       	breq	.+92     	; 0x1330 <GPIO_voidSetPinDirection+0xb0>
    12d4:	8e 81       	ldd	r24, Y+6	; 0x06
    12d6:	9f 81       	ldd	r25, Y+7	; 0x07
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	e9 f1       	breq	.+122    	; 0x1358 <GPIO_voidSetPinDirection+0xd8>
    12de:	c7 c0       	rjmp	.+398    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_DDRA , pin);
    12e0:	aa e3       	ldi	r26, 0x3A	; 58
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ea e3       	ldi	r30, 0x3A	; 58
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_voidSetPinDirection+0x7e>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_voidSetPinDirection+0x7a>
    1302:	84 2b       	or	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	b3 c0       	rjmp	.+358    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_DDRB , pin);
    1308:	a7 e3       	ldi	r26, 0x37	; 55
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e7 e3       	ldi	r30, 0x37	; 55
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <GPIO_voidSetPinDirection+0xa6>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <GPIO_voidSetPinDirection+0xa2>
    132a:	84 2b       	or	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	9f c0       	rjmp	.+318    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_DDRC , pin);
    1330:	a4 e3       	ldi	r26, 0x34	; 52
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e4 e3       	ldi	r30, 0x34	; 52
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <GPIO_voidSetPinDirection+0xce>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <GPIO_voidSetPinDirection+0xca>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	8b c0       	rjmp	.+278    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_DDRD , pin);
    1358:	a1 e3       	ldi	r26, 0x31	; 49
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <GPIO_voidSetPinDirection+0xf6>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <GPIO_voidSetPinDirection+0xf2>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	77 c0       	rjmp	.+238    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>

			default:
			break;
		}
	}
	else if (dirc == INPUT)
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 23       	and	r24, r24
    1384:	09 f0       	breq	.+2      	; 0x1388 <GPIO_voidSetPinDirection+0x108>
    1386:	73 c0       	rjmp	.+230    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
	{
		switch (port_id)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	59 f1       	breq	.+86     	; 0x13f2 <GPIO_voidSetPinDirection+0x172>
    139c:	2c 81       	ldd	r18, Y+4	; 0x04
    139e:	3d 81       	ldd	r19, Y+5	; 0x05
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <GPIO_voidSetPinDirection+0x130>
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	69 f0       	breq	.+26     	; 0x13c8 <GPIO_voidSetPinDirection+0x148>
    13ae:	5f c0       	rjmp	.+190    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	89 f1       	breq	.+98     	; 0x141c <GPIO_voidSetPinDirection+0x19c>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <GPIO_voidSetPinDirection+0x146>
    13c4:	40 c0       	rjmp	.+128    	; 0x1446 <GPIO_voidSetPinDirection+0x1c6>
    13c6:	53 c0       	rjmp	.+166    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_DDRA , pin);
    13c8:	aa e3       	ldi	r26, 0x3A	; 58
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea e3       	ldi	r30, 0x3A	; 58
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <GPIO_voidSetPinDirection+0x166>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <GPIO_voidSetPinDirection+0x162>
    13ea:	80 95       	com	r24
    13ec:	84 23       	and	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	3e c0       	rjmp	.+124    	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_DDRB , pin);
    13f2:	a7 e3       	ldi	r26, 0x37	; 55
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <GPIO_voidSetPinDirection+0x190>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <GPIO_voidSetPinDirection+0x18c>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	29 c0       	rjmp	.+82     	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_DDRC , pin);
    141c:	a4 e3       	ldi	r26, 0x34	; 52
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e3       	ldi	r30, 0x34	; 52
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_voidSetPinDirection+0x1ba>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_voidSetPinDirection+0x1b6>
    143e:	80 95       	com	r24
    1440:	84 23       	and	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	14 c0       	rjmp	.+40     	; 0x146e <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_DDRD , pin);
    1446:	a1 e3       	ldi	r26, 0x31	; 49
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e1 e3       	ldi	r30, 0x31	; 49
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_voidSetPinDirection+0x1e4>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_voidSetPinDirection+0x1e0>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
	}
	else
	{
		/* Should not be here */
	}
}
    146e:	27 96       	adiw	r28, 0x07	; 7
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <GPIO_voidSetPortValue>:

void GPIO_voidSetPortValue(u8 port_id , u8 value)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <GPIO_voidSetPortValue+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <GPIO_voidSetPortValue+0x8>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_id){
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3c 83       	std	Y+4, r19	; 0x04
    1498:	2b 83       	std	Y+3, r18	; 0x03
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	d1 f0       	breq	.+52     	; 0x14d8 <GPIO_voidSetPortValue+0x58>
    14a4:	2b 81       	ldd	r18, Y+3	; 0x03
    14a6:	3c 81       	ldd	r19, Y+4	; 0x04
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <GPIO_voidSetPortValue+0x38>
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	61 f0       	breq	.+24     	; 0x14ce <GPIO_voidSetPortValue+0x4e>
    14b6:	1e c0       	rjmp	.+60     	; 0x14f4 <GPIO_voidSetPortValue+0x74>
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	3c 81       	ldd	r19, Y+4	; 0x04
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <GPIO_voidSetPortValue+0x62>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	83 30       	cpi	r24, 0x03	; 3
    14c8:	91 05       	cpc	r25, r1
    14ca:	81 f0       	breq	.+32     	; 0x14ec <GPIO_voidSetPortValue+0x6c>
    14cc:	13 c0       	rjmp	.+38     	; 0x14f4 <GPIO_voidSetPortValue+0x74>
		case PORTA :
			GPIO_PORTA = value ;
    14ce:	eb e3       	ldi	r30, 0x3B	; 59
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 83       	st	Z, r24
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTB :
			GPIO_PORTB = value ;
    14d8:	e8 e3       	ldi	r30, 0x38	; 56
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	80 83       	st	Z, r24
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTC :
			GPIO_PORTC = value ;
    14e2:	e5 e3       	ldi	r30, 0x35	; 53
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTD :
			GPIO_PORTD = value ;
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <GPIO_voidSetPortDirection>:

void GPIO_voidSetPortDirection(u8 port_id , u8 dirc)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <GPIO_voidSetPortDirection+0x6>
    1508:	00 d0       	rcall	.+0      	; 0x150a <GPIO_voidSetPortDirection+0x8>
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_voidSetPortDirection+0xa>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
	if (dirc == OUTPUT)
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	99 f5       	brne	.+102    	; 0x1580 <GPIO_voidSetPortDirection+0x7e>
	{
		switch (port_id){
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3e 83       	std	Y+6, r19	; 0x06
    1522:	2d 83       	std	Y+5, r18	; 0x05
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	d1 f0       	breq	.+52     	; 0x1562 <GPIO_voidSetPortDirection+0x60>
    152e:	2d 81       	ldd	r18, Y+5	; 0x05
    1530:	3e 81       	ldd	r19, Y+6	; 0x06
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	2c f4       	brge	.+10     	; 0x1542 <GPIO_voidSetPortDirection+0x40>
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	61 f0       	breq	.+24     	; 0x1558 <GPIO_voidSetPortDirection+0x56>
    1540:	50 c0       	rjmp	.+160    	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
    1542:	2d 81       	ldd	r18, Y+5	; 0x05
    1544:	3e 81       	ldd	r19, Y+6	; 0x06
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	81 f0       	breq	.+32     	; 0x156c <GPIO_voidSetPortDirection+0x6a>
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	91 05       	cpc	r25, r1
    1554:	81 f0       	breq	.+32     	; 0x1576 <GPIO_voidSetPortDirection+0x74>
    1556:	45 c0       	rjmp	.+138    	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 255;
    1558:	ea e3       	ldi	r30, 0x3A	; 58
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	80 83       	st	Z, r24
    1560:	40 c0       	rjmp	.+128    	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTB :
				GPIO_DDRB = 255;
    1562:	e7 e3       	ldi	r30, 0x37	; 55
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	80 83       	st	Z, r24
    156a:	3b c0       	rjmp	.+118    	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTC :
				GPIO_DDRC = 255;
    156c:	e4 e3       	ldi	r30, 0x34	; 52
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	80 83       	st	Z, r24
    1574:	36 c0       	rjmp	.+108    	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTD :
				GPIO_DDRD = 255;
    1576:	e1 e3       	ldi	r30, 0x31	; 49
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	80 83       	st	Z, r24
    157e:	31 c0       	rjmp	.+98     	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
				break;
			default:
				break;
		}
	}
	else if (dirc == INPUT)
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	88 23       	and	r24, r24
    1584:	71 f5       	brne	.+92     	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
	{
		switch (port_id){
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	c9 f0       	breq	.+50     	; 0x15cc <GPIO_voidSetPortDirection+0xca>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <GPIO_voidSetPortDirection+0xac>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	61 f0       	breq	.+24     	; 0x15c4 <GPIO_voidSetPortDirection+0xc2>
    15ac:	1a c0       	rjmp	.+52     	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
    15ae:	2b 81       	ldd	r18, Y+3	; 0x03
    15b0:	3c 81       	ldd	r19, Y+4	; 0x04
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	71 f0       	breq	.+28     	; 0x15d4 <GPIO_voidSetPortDirection+0xd2>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	69 f0       	breq	.+26     	; 0x15dc <GPIO_voidSetPortDirection+0xda>
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 0;
    15c4:	ea e3       	ldi	r30, 0x3A	; 58
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	10 82       	st	Z, r1
    15ca:	0b c0       	rjmp	.+22     	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTB :
				GPIO_DDRB = 0;
    15cc:	e7 e3       	ldi	r30, 0x37	; 55
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	10 82       	st	Z, r1
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTC :
				GPIO_DDRC = 0;
    15d4:	e4 e3       	ldi	r30, 0x34	; 52
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	10 82       	st	Z, r1
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTD :
				GPIO_DDRD = 0;
    15dc:	e1 e3       	ldi	r30, 0x31	; 49
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	10 82       	st	Z, r1
		}
	}
	else {

	}
}
    15e2:	26 96       	adiw	r28, 0x06	; 6
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue(u8 port_id , u8 pin)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_u8GetPinValue+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <GPIO_u8GetPinValue+0x8>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	6b 83       	std	Y+3, r22	; 0x03
	u8 value ;
	switch (port_id)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3d 83       	std	Y+5, r19	; 0x05
    160e:	2c 83       	std	Y+4, r18	; 0x04
    1610:	4c 81       	ldd	r20, Y+4	; 0x04
    1612:	5d 81       	ldd	r21, Y+5	; 0x05
    1614:	41 30       	cpi	r20, 0x01	; 1
    1616:	51 05       	cpc	r21, r1
    1618:	41 f1       	breq	.+80     	; 0x166a <GPIO_u8GetPinValue+0x76>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	91 05       	cpc	r25, r1
    1622:	34 f4       	brge	.+12     	; 0x1630 <GPIO_u8GetPinValue+0x3c>
    1624:	2c 81       	ldd	r18, Y+4	; 0x04
    1626:	3d 81       	ldd	r19, Y+5	; 0x05
    1628:	21 15       	cp	r18, r1
    162a:	31 05       	cpc	r19, r1
    162c:	61 f0       	breq	.+24     	; 0x1646 <GPIO_u8GetPinValue+0x52>
    162e:	52 c0       	rjmp	.+164    	; 0x16d4 <GPIO_u8GetPinValue+0xe0>
    1630:	4c 81       	ldd	r20, Y+4	; 0x04
    1632:	5d 81       	ldd	r21, Y+5	; 0x05
    1634:	42 30       	cpi	r20, 0x02	; 2
    1636:	51 05       	cpc	r21, r1
    1638:	51 f1       	breq	.+84     	; 0x168e <GPIO_u8GetPinValue+0x9a>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	b9 f1       	breq	.+110    	; 0x16b2 <GPIO_u8GetPinValue+0xbe>
    1644:	47 c0       	rjmp	.+142    	; 0x16d4 <GPIO_u8GetPinValue+0xe0>
	{
		case PORTA :
		value = GET_BIT(GPIO_PINA , pin);
    1646:	e9 e3       	ldi	r30, 0x39	; 57
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <GPIO_u8GetPinValue+0x6a>
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <GPIO_u8GetPinValue+0x66>
    1662:	ca 01       	movw	r24, r20
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	35 c0       	rjmp	.+106    	; 0x16d4 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTB :
		value = GET_BIT(GPIO_PINB , pin);
    166a:	e6 e3       	ldi	r30, 0x36	; 54
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a9 01       	movw	r20, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <GPIO_u8GetPinValue+0x8e>
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <GPIO_u8GetPinValue+0x8a>
    1686:	ca 01       	movw	r24, r20
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	23 c0       	rjmp	.+70     	; 0x16d4 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTC :
		value = GET_BIT(GPIO_PINC , pin);
    168e:	e3 e3       	ldi	r30, 0x33	; 51
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a9 01       	movw	r20, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_u8GetPinValue+0xb2>
    16a2:	55 95       	asr	r21
    16a4:	47 95       	ror	r20
    16a6:	8a 95       	dec	r24
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_u8GetPinValue+0xae>
    16aa:	ca 01       	movw	r24, r20
    16ac:	81 70       	andi	r24, 0x01	; 1
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	11 c0       	rjmp	.+34     	; 0x16d4 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTD :
		value = GET_BIT(GPIO_PIND , pin);
    16b2:	e0 e3       	ldi	r30, 0x30	; 48
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a9 01       	movw	r20, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <GPIO_u8GetPinValue+0xd6>
    16c6:	55 95       	asr	r21
    16c8:	47 95       	ror	r20
    16ca:	8a 95       	dec	r24
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <GPIO_u8GetPinValue+0xd2>
    16ce:	ca 01       	movw	r24, r20
    16d0:	81 70       	andi	r24, 0x01	; 1
    16d2:	89 83       	std	Y+1, r24	; 0x01
		break;

		default:
		break;
	}
	return value ;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <LCD_voidInit>:
#include "LCD_Private.h"
#include "LCD_Cfg.h"


void LCD_voidInit(void)
{
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	c4 55       	subi	r28, 0x54	; 84
    16f4:	d0 40       	sbci	r29, 0x00	; 0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	fe 01       	movw	r30, r28
    1702:	ef 5a       	subi	r30, 0xAF	; 175
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a0 ef       	ldi	r26, 0xF0	; 240
    170c:	b1 e4       	ldi	r27, 0x41	; 65
    170e:	80 83       	st	Z, r24
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	a2 83       	std	Z+2, r26	; 0x02
    1714:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	8e 01       	movw	r16, r28
    1718:	03 5b       	subi	r16, 0xB3	; 179
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	fe 01       	movw	r30, r28
    171e:	ef 5a       	subi	r30, 0xAF	; 175
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	f8 01       	movw	r30, r16
    173c:	80 83       	st	Z, r24
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	a2 83       	std	Z+2, r26	; 0x02
    1742:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1744:	fe 01       	movw	r30, r28
    1746:	e3 5b       	subi	r30, 0xB3	; 179
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	44 f4       	brge	.+16     	; 0x1772 <LCD_voidInit+0x8c>
		__ticks = 1;
    1762:	fe 01       	movw	r30, r28
    1764:	e5 5b       	subi	r30, 0xB5	; 181
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	64 c0       	rjmp	.+200    	; 0x183a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1772:	fe 01       	movw	r30, r28
    1774:	e3 5b       	subi	r30, 0xB3	; 179
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	0c f0       	brlt	.+2      	; 0x1792 <LCD_voidInit+0xac>
    1790:	43 c0       	rjmp	.+134    	; 0x1818 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	fe 01       	movw	r30, r28
    1794:	ef 5a       	subi	r30, 0xAF	; 175
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8e 01       	movw	r16, r28
    17b2:	05 5b       	subi	r16, 0xB5	; 181
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	f8 01       	movw	r30, r16
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
    17c8:	1f c0       	rjmp	.+62     	; 0x1808 <LCD_voidInit+0x122>
    17ca:	fe 01       	movw	r30, r28
    17cc:	e7 5b       	subi	r30, 0xB7	; 183
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	88 ec       	ldi	r24, 0xC8	; 200
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d8:	fe 01       	movw	r30, r28
    17da:	e7 5b       	subi	r30, 0xB7	; 183
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <LCD_voidInit+0xfc>
    17e6:	fe 01       	movw	r30, r28
    17e8:	e7 5b       	subi	r30, 0xB7	; 183
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	de 01       	movw	r26, r28
    17f2:	a5 5b       	subi	r26, 0xB5	; 181
    17f4:	bf 4f       	sbci	r27, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	e5 5b       	subi	r30, 0xB5	; 181
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	11 96       	adiw	r26, 0x01	; 1
    1804:	9c 93       	st	X, r25
    1806:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	fe 01       	movw	r30, r28
    180a:	e5 5b       	subi	r30, 0xB5	; 181
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	d1 f6       	brne	.-76     	; 0x17ca <LCD_voidInit+0xe4>
    1816:	27 c0       	rjmp	.+78     	; 0x1866 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	8e 01       	movw	r16, r28
    181a:	05 5b       	subi	r16, 0xB5	; 181
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	fe 01       	movw	r30, r28
    1820:	e3 5b       	subi	r30, 0xB3	; 179
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	f8 01       	movw	r30, r16
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	de 01       	movw	r26, r28
    183c:	a9 5b       	subi	r26, 0xB9	; 185
    183e:	bf 4f       	sbci	r27, 0xFF	; 255
    1840:	fe 01       	movw	r30, r28
    1842:	e5 5b       	subi	r30, 0xB5	; 181
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	8d 93       	st	X+, r24
    184c:	9c 93       	st	X, r25
    184e:	fe 01       	movw	r30, r28
    1850:	e9 5b       	subi	r30, 0xB9	; 185
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_voidInit+0x172>
    185c:	fe 01       	movw	r30, r28
    185e:	e9 5b       	subi	r30, 0xB9	; 185
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
	_delay_ms(30);

	/* Send command function set */
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    1866:	88 e3       	ldi	r24, 0x38	; 56
    1868:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
    186c:	fe 01       	movw	r30, r28
    186e:	ed 5b       	subi	r30, 0xBD	; 189
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e2       	ldi	r26, 0x20	; 32
    1878:	b1 e4       	ldi	r27, 0x41	; 65
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	8e 01       	movw	r16, r28
    1884:	01 5c       	subi	r16, 0xC1	; 193
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	ed 5b       	subi	r30, 0xBD	; 189
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a ef       	ldi	r20, 0xFA	; 250
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	f8 01       	movw	r30, r16
    18a8:	80 83       	st	Z, r24
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	a2 83       	std	Z+2, r26	; 0x02
    18ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b0:	fe 01       	movw	r30, r28
    18b2:	ff 96       	adiw	r30, 0x3f	; 63
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <LCD_voidInit+0x1f0>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9e af       	std	Y+62, r25	; 0x3e
    18d2:	8d af       	std	Y+61, r24	; 0x3d
    18d4:	46 c0       	rjmp	.+140    	; 0x1962 <LCD_voidInit+0x27c>
	else if (__tmp > 65535)
    18d6:	fe 01       	movw	r30, r28
    18d8:	ff 96       	adiw	r30, 0x3f	; 63
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	64 f5       	brge	.+88     	; 0x194a <LCD_voidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	fe 01       	movw	r30, r28
    18f4:	ed 5b       	subi	r30, 0xBD	; 189
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e af       	std	Y+62, r25	; 0x3e
    191e:	8d af       	std	Y+61, r24	; 0x3d
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_voidInit+0x25a>
    1922:	88 ec       	ldi	r24, 0xC8	; 200
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9c af       	std	Y+60, r25	; 0x3c
    1928:	8b af       	std	Y+59, r24	; 0x3b
    192a:	8b ad       	ldd	r24, Y+59	; 0x3b
    192c:	9c ad       	ldd	r25, Y+60	; 0x3c
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_voidInit+0x248>
    1932:	9c af       	std	Y+60, r25	; 0x3c
    1934:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8d ad       	ldd	r24, Y+61	; 0x3d
    1938:	9e ad       	ldd	r25, Y+62	; 0x3e
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9e af       	std	Y+62, r25	; 0x3e
    193e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8d ad       	ldd	r24, Y+61	; 0x3d
    1942:	9e ad       	ldd	r25, Y+62	; 0x3e
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_voidInit+0x23c>
    1948:	16 c0       	rjmp	.+44     	; 0x1976 <LCD_voidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	fe 01       	movw	r30, r28
    194c:	ff 96       	adiw	r30, 0x3f	; 63
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e af       	std	Y+62, r25	; 0x3e
    1960:	8d af       	std	Y+61, r24	; 0x3d
    1962:	8d ad       	ldd	r24, Y+61	; 0x3d
    1964:	9e ad       	ldd	r25, Y+62	; 0x3e
    1966:	9a af       	std	Y+58, r25	; 0x3a
    1968:	89 af       	std	Y+57, r24	; 0x39
    196a:	89 ad       	ldd	r24, Y+57	; 0x39
    196c:	9a ad       	ldd	r25, Y+58	; 0x3a
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD_voidInit+0x288>
    1972:	9a af       	std	Y+58, r25	; 0x3a
    1974:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);

	/* Send command dispaly on */
	LCD_voidSendCommand(lcd_DisplayOn);
    1976:	8c e0       	ldi	r24, 0x0C	; 12
    1978:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e2       	ldi	r26, 0x20	; 32
    1982:	b1 e4       	ldi	r27, 0x41	; 65
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_voidInit+0x2e8>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_voidInit+0x366>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_voidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_voidInit+0x348>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_voidInit+0x336>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_voidInit+0x32a>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_voidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_voidInit+0x372>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	/* Clear the display  */
	LCD_voidSendCommand(lcd_Clear);
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e2       	ldi	r26, 0x20	; 32
    1a6c:	b1 e4       	ldi	r27, 0x41	; 65
    1a6e:	8f a3       	std	Y+39, r24	; 0x27
    1a70:	98 a7       	std	Y+40, r25	; 0x28
    1a72:	a9 a7       	std	Y+41, r26	; 0x29
    1a74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6f a1       	ldd	r22, Y+39	; 0x27
    1a78:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8b a3       	std	Y+35, r24	; 0x23
    1a90:	9c a3       	std	Y+36, r25	; 0x24
    1a92:	ad a3       	std	Y+37, r26	; 0x25
    1a94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a96:	6b a1       	ldd	r22, Y+35	; 0x23
    1a98:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_voidInit+0x3d2>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_voidInit+0x432>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	98 a3       	std	Y+32, r25	; 0x20
    1b00:	8f 8f       	std	Y+31, r24	; 0x1f
    1b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b04:	98 a1       	ldd	r25, Y+32	; 0x20
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_voidInit+0x420>
    1b0a:	98 a3       	std	Y+32, r25	; 0x20
    1b0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <LCD_voidInit+0x414>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <LCD_voidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_voidInit+0x45c>
    1b46:	9e 8f       	std	Y+30, r25	; 0x1e
    1b48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	/* Entry mode set  */
	LCD_voidSendCommand(lcd_EntryMode);
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e2       	ldi	r26, 0x20	; 32
    1b56:	b1 e4       	ldi	r27, 0x41	; 65
    1b58:	89 8f       	std	Y+25, r24	; 0x19
    1b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	69 8d       	ldd	r22, Y+25	; 0x19
    1b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8d 8b       	std	Y+21, r24	; 0x15
    1b7a:	9e 8b       	std	Y+22, r25	; 0x16
    1b7c:	af 8b       	std	Y+23, r26	; 0x17
    1b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b80:	6d 89       	ldd	r22, Y+21	; 0x15
    1b82:	7e 89       	ldd	r23, Y+22	; 0x16
    1b84:	8f 89       	ldd	r24, Y+23	; 0x17
    1b86:	98 8d       	ldd	r25, Y+24	; 0x18
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_voidInit+0x4bc>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_voidInit+0x53a>
	else if (__tmp > 65535)
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_voidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_voidInit+0x51c>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a 8b       	std	Y+18, r25	; 0x12
    1bea:	89 8b       	std	Y+17, r24	; 0x11
    1bec:	89 89       	ldd	r24, Y+17	; 0x11
    1bee:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_voidInit+0x50a>
    1bf4:	9a 8b       	std	Y+18, r25	; 0x12
    1bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9c 8b       	std	Y+20, r25	; 0x14
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_voidInit+0x4fe>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_voidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	8b 89       	ldd	r24, Y+19	; 0x13
    1c22:	9c 89       	ldd	r25, Y+20	; 0x14
    1c24:	98 8b       	std	Y+16, r25	; 0x10
    1c26:	8f 87       	std	Y+15, r24	; 0x0f
    1c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2a:	98 89       	ldd	r25, Y+16	; 0x10
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_voidInit+0x546>
    1c30:	98 8b       	std	Y+16, r25	; 0x10
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	/* Set cursor home */
	LCD_voidSendCommand(lcd_Home);
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e2       	ldi	r26, 0x20	; 32
    1c40:	b1 e4       	ldi	r27, 0x41	; 65
    1c42:	8b 87       	std	Y+11, r24	; 0x0b
    1c44:	9c 87       	std	Y+12, r25	; 0x0c
    1c46:	ad 87       	std	Y+13, r26	; 0x0d
    1c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	98 87       	std	Y+8, r25	; 0x08
    1c66:	a9 87       	std	Y+9, r26	; 0x09
    1c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_voidInit+0x5a6>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_voidInit+0x624>
	else if (__tmp > 65535)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_voidInit+0x606>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_voidInit+0x5f4>
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_voidInit+0x5e8>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_voidInit+0x630>
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1d1e:	cc 5a       	subi	r28, 0xAC	; 172
    1d20:	df 4f       	sbci	r29, 0xFF	; 255
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	08 95       	ret

00001d36 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Cpy_command )
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RS and RW */
	GPIO_voidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , LOW);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>

	/* Write the command to data port */
	GPIO_voidSetPortValue(LCD_DATA_PORT , Cpy_command);
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d64:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_voidSetPortValue>

	/* Send Enable signal */
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	62 e0       	ldi	r22, 0x02	; 2
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e8       	ldi	r26, 0x80	; 128
    1d78:	bf e3       	ldi	r27, 0x3F	; 63
    1d7a:	89 8f       	std	Y+25, r24	; 0x19
    1d7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	69 8d       	ldd	r22, Y+25	; 0x19
    1d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a ef       	ldi	r20, 0xFA	; 250
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8d 8b       	std	Y+21, r24	; 0x15
    1d9c:	9e 8b       	std	Y+22, r25	; 0x16
    1d9e:	af 8b       	std	Y+23, r26	; 0x17
    1da0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da2:	6d 89       	ldd	r22, Y+21	; 0x15
    1da4:	7e 89       	ldd	r23, Y+22	; 0x16
    1da6:	8f 89       	ldd	r24, Y+23	; 0x17
    1da8:	98 8d       	ldd	r25, Y+24	; 0x18
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dca:	98 8d       	ldd	r25, Y+24	; 0x18
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	8b 8b       	std	Y+19, r24	; 0x13
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <LCD_voidSendCommand+0xee>
    1e06:	88 ec       	ldi	r24, 0xC8	; 200
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9a 8b       	std	Y+18, r25	; 0x12
    1e0c:	89 8b       	std	Y+17, r24	; 0x11
    1e0e:	89 89       	ldd	r24, Y+17	; 0x11
    1e10:	9a 89       	ldd	r25, Y+18	; 0x12
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_voidSendCommand+0xdc>
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8b 89       	ldd	r24, Y+19	; 0x13
    1e26:	9c 89       	ldd	r25, Y+20	; 0x14
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <LCD_voidSendCommand+0xd0>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e30:	7e 89       	ldd	r23, Y+22	; 0x16
    1e32:	8f 89       	ldd	r24, Y+23	; 0x17
    1e34:	98 8d       	ldd	r25, Y+24	; 0x18
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9c 8b       	std	Y+20, r25	; 0x14
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
    1e42:	8b 89       	ldd	r24, Y+19	; 0x13
    1e44:	9c 89       	ldd	r25, Y+20	; 0x14
    1e46:	98 8b       	std	Y+16, r25	; 0x10
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
    1e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4c:	98 89       	ldd	r25, Y+16	; 0x10
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_voidSendCommand+0x118>
    1e52:	98 8b       	std	Y+16, r25	; 0x10
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e2       	ldi	r26, 0x20	; 32
    1e66:	b1 e4       	ldi	r27, 0x41	; 65
    1e68:	8b 87       	std	Y+11, r24	; 0x0b
    1e6a:	9c 87       	std	Y+12, r25	; 0x0c
    1e6c:	ad 87       	std	Y+13, r26	; 0x0d
    1e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a ef       	ldi	r20, 0xFA	; 250
    1e7e:	54 e4       	ldi	r21, 0x44	; 68
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8f 83       	std	Y+7, r24	; 0x07
    1e8a:	98 87       	std	Y+8, r25	; 0x08
    1e8c:	a9 87       	std	Y+9, r26	; 0x09
    1e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <LCD_voidSendCommand+0x1dc>
    1ef4:	88 ec       	ldi	r24, 0xC8	; 200
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_voidSendCommand+0x1ca>
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <LCD_voidSendCommand+0x1be>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_voidSendCommand+0x206>
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1f44:	6d 96       	adiw	r28, 0x1d	; 29
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Cpy_data)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	6d 97       	sbiw	r28, 0x1d	; 29
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RW */
	GPIO_voidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>

	/* Set RS */
	GPIO_voidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , HIGH);
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>

	/* Write the command to data port */
	GPIO_voidSetPortValue(LCD_DATA_PORT , Cpy_data);
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f84:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_voidSetPortValue>

	/* Send Enable signal */
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	62 e0       	ldi	r22, 0x02	; 2
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a0 e8       	ldi	r26, 0x80	; 128
    1f98:	bf e3       	ldi	r27, 0x3F	; 63
    1f9a:	89 8f       	std	Y+25, r24	; 0x19
    1f9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a ef       	ldi	r20, 0xFA	; 250
    1fb0:	54 e4       	ldi	r21, 0x44	; 68
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	8d 8b       	std	Y+21, r24	; 0x15
    1fbc:	9e 8b       	std	Y+22, r25	; 0x16
    1fbe:	af 8b       	std	Y+23, r26	; 0x17
    1fc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f e3       	ldi	r21, 0x3F	; 63
    1fd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd6:	88 23       	and	r24, r24
    1fd8:	2c f4       	brge	.+10     	; 0x1fe4 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9c 8b       	std	Y+20, r25	; 0x14
    1fe0:	8b 8b       	std	Y+19, r24	; 0x13
    1fe2:	3f c0       	rjmp	.+126    	; 0x2062 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fea:	98 8d       	ldd	r25, Y+24	; 0x18
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	4f e7       	ldi	r20, 0x7F	; 127
    1ff2:	57 e4       	ldi	r21, 0x47	; 71
    1ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	4c f5       	brge	.+82     	; 0x204e <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <LCD_voidSendChar+0xee>
    2026:	88 ec       	ldi	r24, 0xC8	; 200
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9a 8b       	std	Y+18, r25	; 0x12
    202c:	89 8b       	std	Y+17, r24	; 0x11
    202e:	89 89       	ldd	r24, Y+17	; 0x11
    2030:	9a 89       	ldd	r25, Y+18	; 0x12
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_voidSendChar+0xdc>
    2036:	9a 8b       	std	Y+18, r25	; 0x12
    2038:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2044:	8b 89       	ldd	r24, Y+19	; 0x13
    2046:	9c 89       	ldd	r25, Y+20	; 0x14
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	69 f7       	brne	.-38     	; 0x2026 <LCD_voidSendChar+0xd0>
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204e:	6d 89       	ldd	r22, Y+21	; 0x15
    2050:	7e 89       	ldd	r23, Y+22	; 0x16
    2052:	8f 89       	ldd	r24, Y+23	; 0x17
    2054:	98 8d       	ldd	r25, Y+24	; 0x18
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	98 8b       	std	Y+16, r25	; 0x10
    2068:	8f 87       	std	Y+15, r24	; 0x0f
    206a:	8f 85       	ldd	r24, Y+15	; 0x0f
    206c:	98 89       	ldd	r25, Y+16	; 0x10
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_voidSendChar+0x118>
    2072:	98 8b       	std	Y+16, r25	; 0x10
    2074:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e2       	ldi	r26, 0x20	; 32
    2086:	b1 e4       	ldi	r27, 0x41	; 65
    2088:	8b 87       	std	Y+11, r24	; 0x0b
    208a:	9c 87       	std	Y+12, r25	; 0x0c
    208c:	ad 87       	std	Y+13, r26	; 0x0d
    208e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a ef       	ldi	r20, 0xFA	; 250
    209e:	54 e4       	ldi	r21, 0x44	; 68
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8f 83       	std	Y+7, r24	; 0x07
    20aa:	98 87       	std	Y+8, r25	; 0x08
    20ac:	a9 87       	std	Y+9, r26	; 0x09
    20ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <LCD_voidSendChar+0x17c>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <LCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <LCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <LCD_voidSendChar+0x1dc>
    2114:	88 ec       	ldi	r24, 0xC8	; 200
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_voidSendChar+0x1ca>
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <LCD_voidSendChar+0x1be>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <LCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
    2152:	9e 81       	ldd	r25, Y+6	; 0x06
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_voidSendChar+0x206>
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2164:	6d 96       	adiw	r28, 0x1d	; 29
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <LCD_voidWriteString>:


void LCD_voidWriteString(const u8 *Cpy_str)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	60 97       	sbiw	r28, 0x10	; 16
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	98 8b       	std	Y+16, r25	; 0x10
    218c:	8f 87       	std	Y+15, r24	; 0x0f
    218e:	7c c0       	rjmp	.+248    	; 0x2288 <LCD_voidWriteString+0x112>
	while ( (*Cpy_str) != NULL)
	{
		LCD_voidSendChar(*Cpy_str);
    2190:	ef 85       	ldd	r30, Y+15	; 0x0f
    2192:	f8 89       	ldd	r31, Y+16	; 0x10
    2194:	80 81       	ld	r24, Z
    2196:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_voidSendChar>
		Cpy_str++;
    219a:	8f 85       	ldd	r24, Y+15	; 0x0f
    219c:	98 89       	ldd	r25, Y+16	; 0x10
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	98 8b       	std	Y+16, r25	; 0x10
    21a2:	8f 87       	std	Y+15, r24	; 0x0f
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a0 ea       	ldi	r26, 0xA0	; 160
    21aa:	b0 e4       	ldi	r27, 0x40	; 64
    21ac:	8b 87       	std	Y+11, r24	; 0x0b
    21ae:	9c 87       	std	Y+12, r25	; 0x0c
    21b0:	ad 87       	std	Y+13, r26	; 0x0d
    21b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a ef       	ldi	r20, 0xFA	; 250
    21c2:	54 e4       	ldi	r21, 0x44	; 68
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8f 83       	std	Y+7, r24	; 0x07
    21ce:	98 87       	std	Y+8, r25	; 0x08
    21d0:	a9 87       	std	Y+9, r26	; 0x09
    21d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <LCD_voidWriteString+0x80>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	8d 83       	std	Y+5, r24	; 0x05
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <LCD_voidWriteString+0xfe>
	else if (__tmp > 65535)
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	4f e7       	ldi	r20, 0x7F	; 127
    2204:	57 e4       	ldi	r21, 0x47	; 71
    2206:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    220a:	18 16       	cp	r1, r24
    220c:	4c f5       	brge	.+82     	; 0x2260 <LCD_voidWriteString+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_voidWriteString+0xe0>
    2238:	88 ec       	ldi	r24, 0xC8	; 200
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_voidWriteString+0xce>
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f7       	brne	.-38     	; 0x2238 <LCD_voidWriteString+0xc2>
    225e:	14 c0       	rjmp	.+40     	; 0x2288 <LCD_voidWriteString+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2260:	6f 81       	ldd	r22, Y+7	; 0x07
    2262:	78 85       	ldd	r23, Y+8	; 0x08
    2264:	89 85       	ldd	r24, Y+9	; 0x09
    2266:	9a 85       	ldd	r25, Y+10	; 0x0a
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_voidWriteString+0x10a>
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_voidWriteString(const u8 *Cpy_str)
{
	while ( (*Cpy_str) != NULL)
    2288:	ef 85       	ldd	r30, Y+15	; 0x0f
    228a:	f8 89       	ldd	r31, Y+16	; 0x10
    228c:	80 81       	ld	r24, Z
    228e:	88 23       	and	r24, r24
    2290:	09 f0       	breq	.+2      	; 0x2294 <LCD_voidWriteString+0x11e>
    2292:	7e cf       	rjmp	.-260    	; 0x2190 <LCD_voidWriteString+0x1a>
	{
		LCD_voidSendChar(*Cpy_str);
		Cpy_str++;
		_delay_ms(5);
	}
}
    2294:	60 96       	adiw	r28, 0x10	; 16
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <LCD_voidGoTo>:

void LCD_voidGoTo(u8 Cpy_row , u8 Cpy_column)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <LCD_voidGoTo+0x6>
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <LCD_voidGoTo+0x8>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	6a 83       	std	Y+2, r22	; 0x02
	if ((Cpy_row>0) && (Cpy_column<=16))
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 23       	and	r24, r24
    22ba:	e1 f0       	breq	.+56     	; 0x22f4 <LCD_voidGoTo+0x4e>
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	81 31       	cpi	r24, 0x11	; 17
    22c0:	c8 f4       	brcc	.+50     	; 0x22f4 <LCD_voidGoTo+0x4e>
	{
	    switch(Cpy_row)
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	3c 83       	std	Y+4, r19	; 0x04
    22ca:	2b 83       	std	Y+3, r18	; 0x03
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	91 05       	cpc	r25, r1
    22d4:	31 f0       	breq	.+12     	; 0x22e2 <LCD_voidGoTo+0x3c>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	3c 81       	ldd	r19, Y+4	; 0x04
    22da:	22 30       	cpi	r18, 0x02	; 2
    22dc:	31 05       	cpc	r19, r1
    22de:	31 f0       	breq	.+12     	; 0x22ec <LCD_voidGoTo+0x46>
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <LCD_voidGoTo+0x4e>
	    {
		    case 1:
		    	LCD_voidSendCommand(Cpy_column+127);
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	81 58       	subi	r24, 0x81	; 129
    22e6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
    22ea:	04 c0       	rjmp	.+8      	; 0x22f4 <LCD_voidGoTo+0x4e>
		    break;

		    case 2:
		    	LCD_voidSendCommand(Cpy_column+191);
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	81 54       	subi	r24, 0x41	; 65
    22f0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>

		    default:
		    break;
	    }
	}
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <LCD_voidAddNewPattern>:

void LCD_voidAddNewPattern (u8 *Cpy_patternArray , u8 Cpy_blockNumber)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <LCD_voidAddNewPattern+0x6>
    2308:	00 d0       	rcall	.+0      	; 0x230a <LCD_voidAddNewPattern+0x8>
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9c 83       	std	Y+4, r25	; 0x04
    2312:	8b 83       	std	Y+3, r24	; 0x03
    2314:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	08 96       	adiw	r24, 0x08	; 8
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	8a 83       	std	Y+2, r24	; 0x02
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	88 30       	cpi	r24, 0x08	; 8
    2330:	b0 f4       	brcc	.+44     	; 0x235e <LCD_voidAddNewPattern+0x5c>
	{
		LCD_voidSendCommand(local_CGAdress);
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    2338:	19 82       	std	Y+1, r1	; 0x01
    233a:	0e c0       	rjmp	.+28     	; 0x2358 <LCD_voidAddNewPattern+0x56>
		{
			LCD_voidSendChar(Cpy_patternArray[i]);
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	80 81       	ld	r24, Z
    234e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_voidSendChar>
{
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
	{
		LCD_voidSendCommand(local_CGAdress);
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	88 30       	cpi	r24, 0x08	; 8
    235c:	78 f3       	brcs	.-34     	; 0x233c <LCD_voidAddNewPattern+0x3a>
	}
	else
	{
		/* Error */
	}
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <LCD_voidWritePattern>:

void LCD_voidWritePattern (u8 Cpy_blockNumber , u8 Cpy_row , u8 Cpy_column)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <LCD_voidWritePattern+0x6>
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	6a 83       	std	Y+2, r22	; 0x02
    237e:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	88 30       	cpi	r24, 0x08	; 8
    2384:	38 f4       	brcc	.+14     	; 0x2394 <LCD_voidWritePattern+0x26>
	{
		LCD_voidGoTo(Cpy_row , Cpy_column);
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	6b 81       	ldd	r22, Y+3	; 0x03
    238a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_voidGoTo>
		LCD_voidSendChar(Cpy_blockNumber);
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_voidSendChar>
	}
	else
	{
		/* Error */
	}
}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <main>:
u8 ADC_read ;
f32 Temp_Val , Mv_value;
u8 str[10];

void main ()
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	2e 97       	sbiw	r28, 0x0e	; 14
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
	/* Init LCD Pins*/
	GPIO_voidSetPinDirection(PORTA , PIN0, OUTPUT);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTA , PIN1, OUTPUT);
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	61 e0       	ldi	r22, 0x01	; 1
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTA , PIN2, OUTPUT);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_voidSetPinDirection>
	GPIO_voidSetPortDirection(PORTD , OUTPUT);
    23d2:	83 e0       	ldi	r24, 0x03	; 3
    23d4:	61 e0       	ldi	r22, 0x01	; 1
    23d6:	0e 94 81 0a 	call	0x1502	; 0x1502 <GPIO_voidSetPortDirection>

	/* Init leds pins */
	GPIO_voidSetPinDirection(PORTC , PIN0, OUTPUT);
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTC , PIN1, OUTPUT);
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTC , PIN2, OUTPUT);
    23ee:	82 e0       	ldi	r24, 0x02	; 2
    23f0:	62 e0       	ldi	r22, 0x02	; 2
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_voidSetPinDirection>

	/*Init ADC pin */
	GPIO_voidSetPinDirection(PORTA , PIN3 , INPUT);
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	63 e0       	ldi	r22, 0x03	; 3
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 40 09 	call	0x1280	; 0x1280 <GPIO_voidSetPinDirection>

	ADC_voidInit();
    2402:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	LCD_voidInit();
    2406:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_voidInit>
	GIE_voidEnable();
    240a:	0e 94 24 08 	call	0x1048	; 0x1048 <GIE_voidEnable>
	while(1)
	{
		/* Get new raeding */
		ADC_u8GetChReadAsynch(ADC3 , LED_Control , &ADC_read);
    240e:	24 e0       	ldi	r18, 0x04	; 4
    2410:	33 e1       	ldi	r19, 0x13	; 19
    2412:	48 e7       	ldi	r20, 0x78	; 120
    2414:	51 e0       	ldi	r21, 0x01	; 1
    2416:	83 e0       	ldi	r24, 0x03	; 3
    2418:	b9 01       	movw	r22, r18
    241a:	0e 94 95 07 	call	0xf2a	; 0xf2a <ADC_u8GetChReadAsynch>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	aa e7       	ldi	r26, 0x7A	; 122
    2424:	b4 e4       	ldi	r27, 0x44	; 68
    2426:	8b 87       	std	Y+11, r24	; 0x0b
    2428:	9c 87       	std	Y+12, r25	; 0x0c
    242a:	ad 87       	std	Y+13, r26	; 0x0d
    242c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2430:	7c 85       	ldd	r23, Y+12	; 0x0c
    2432:	8d 85       	ldd	r24, Y+13	; 0x0d
    2434:	9e 85       	ldd	r25, Y+14	; 0x0e
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a ef       	ldi	r20, 0xFA	; 250
    243c:	54 e4       	ldi	r21, 0x44	; 68
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	8f 83       	std	Y+7, r24	; 0x07
    2448:	98 87       	std	Y+8, r25	; 0x08
    244a:	a9 87       	std	Y+9, r26	; 0x09
    244c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    244e:	6f 81       	ldd	r22, Y+7	; 0x07
    2450:	78 85       	ldd	r23, Y+8	; 0x08
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	2c f4       	brge	.+10     	; 0x2470 <main+0xd0>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	3f c0       	rjmp	.+126    	; 0x24ee <main+0x14e>
	else if (__tmp > 65535)
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	4c f5       	brge	.+82     	; 0x24da <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	6b 85       	ldd	r22, Y+11	; 0x0b
    248a:	7c 85       	ldd	r23, Y+12	; 0x0c
    248c:	8d 85       	ldd	r24, Y+13	; 0x0d
    248e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e2       	ldi	r20, 0x20	; 32
    2496:	51 e4       	ldi	r21, 0x41	; 65
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <main+0x130>
    24b2:	88 ec       	ldi	r24, 0xC8	; 200
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9c 83       	std	Y+4, r25	; 0x04
    24b8:	8b 83       	std	Y+3, r24	; 0x03
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <main+0x11e>
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f7       	brne	.-38     	; 0x24b2 <main+0x112>
    24d8:	9a cf       	rjmp	.-204    	; 0x240e <main+0x6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <main+0x15a>
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	85 cf       	rjmp	.-246    	; 0x240e <main+0x6e>

00002504 <Temp_cal>:
		_delay_ms(1000);
	}

}
void Temp_cal (void)
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
	Mv_value = ((u32)ADC_read * 5000) / 256 ;
    250c:	80 91 78 01 	lds	r24, 0x0178
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	28 e8       	ldi	r18, 0x88	; 136
    251a:	33 e1       	ldi	r19, 0x13	; 19
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__mulsi3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	89 2f       	mov	r24, r25
    252e:	9a 2f       	mov	r25, r26
    2530:	ab 2f       	mov	r26, r27
    2532:	bb 27       	eor	r27, r27
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	80 93 83 01 	sts	0x0183, r24
    2544:	90 93 84 01 	sts	0x0184, r25
    2548:	a0 93 85 01 	sts	0x0185, r26
    254c:	b0 93 86 01 	sts	0x0186, r27
	Temp_Val = Mv_value / 10 ;
    2550:	80 91 83 01 	lds	r24, 0x0183
    2554:	90 91 84 01 	lds	r25, 0x0184
    2558:	a0 91 85 01 	lds	r26, 0x0185
    255c:	b0 91 86 01 	lds	r27, 0x0186
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	80 93 74 01 	sts	0x0174, r24
    2578:	90 93 75 01 	sts	0x0175, r25
    257c:	a0 93 76 01 	sts	0x0176, r26
    2580:	b0 93 77 01 	sts	0x0177, r27
}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <LCD_Control>:

void LCD_Control (void)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
	Temp_cal();
    2592:	0e 94 82 12 	call	0x2504	; 0x2504 <Temp_cal>
	LCD_voidSendCommand(lcd_Clear);
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_voidSendCommand>
	sprintf(str , "T = %i" , (u32)Temp_Val );
    259c:	80 91 74 01 	lds	r24, 0x0174
    25a0:	90 91 75 01 	lds	r25, 0x0175
    25a4:	a0 91 76 01 	lds	r26, 0x0176
    25a8:	b0 91 77 01 	lds	r27, 0x0177
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	9b 01       	movw	r18, r22
    25b6:	ac 01       	movw	r20, r24
    25b8:	8d b7       	in	r24, 0x3d	; 61
    25ba:	9e b7       	in	r25, 0x3e	; 62
    25bc:	08 97       	sbiw	r24, 0x08	; 8
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	9e bf       	out	0x3e, r25	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	8d bf       	out	0x3d, r24	; 61
    25c8:	ed b7       	in	r30, 0x3d	; 61
    25ca:	fe b7       	in	r31, 0x3e	; 62
    25cc:	31 96       	adiw	r30, 0x01	; 1
    25ce:	89 e7       	ldi	r24, 0x79	; 121
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
    25d6:	80 e6       	ldi	r24, 0x60	; 96
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	93 83       	std	Z+3, r25	; 0x03
    25dc:	82 83       	std	Z+2, r24	; 0x02
    25de:	24 83       	std	Z+4, r18	; 0x04
    25e0:	35 83       	std	Z+5, r19	; 0x05
    25e2:	46 83       	std	Z+6, r20	; 0x06
    25e4:	57 83       	std	Z+7, r21	; 0x07
    25e6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <sprintf>
    25ea:	8d b7       	in	r24, 0x3d	; 61
    25ec:	9e b7       	in	r25, 0x3e	; 62
    25ee:	08 96       	adiw	r24, 0x08	; 8
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	9e bf       	out	0x3e, r25	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	8d bf       	out	0x3d, r24	; 61
	LCD_voidWriteString(str);
    25fa:	89 e7       	ldi	r24, 0x79	; 121
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidWriteString>
}
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <LED_Control>:


void LED_Control (void)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <LED_Control+0x6>
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	Temp_cal();
    2612:	0e 94 82 12 	call	0x2504	; 0x2504 <Temp_cal>
	GPIO_voidSetPortValue(PORTC , LOW);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_voidSetPortValue>
	if ( (Temp_Val < 20) )
    261e:	80 91 74 01 	lds	r24, 0x0174
    2622:	90 91 75 01 	lds	r25, 0x0175
    2626:	a0 91 76 01 	lds	r26, 0x0176
    262a:	b0 91 77 01 	lds	r27, 0x0177
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 ea       	ldi	r20, 0xA0	; 160
    2638:	51 e4       	ldi	r21, 0x41	; 65
    263a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	34 f4       	brge	.+12     	; 0x264e <LED_Control+0x46>
	{
		GPIO_voidSetPinValue(PORTC  , PIN0 , HIGH);
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
    264c:	51 c0       	rjmp	.+162    	; 0x26f0 <LED_Control+0xe8>
	}
	else if ((Temp_Val < 40) && (Temp_Val > 20))
    264e:	80 91 74 01 	lds	r24, 0x0174
    2652:	90 91 75 01 	lds	r25, 0x0175
    2656:	a0 91 76 01 	lds	r26, 0x0176
    265a:	b0 91 77 01 	lds	r27, 0x0177
    265e:	1a 82       	std	Y+2, r1	; 0x02
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	52 e4       	ldi	r21, 0x42	; 66
    266c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2670:	88 23       	and	r24, r24
    2672:	14 f4       	brge	.+4      	; 0x2678 <LED_Control+0x70>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	8a 83       	std	Y+2, r24	; 0x02
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	89 27       	eor	r24, r25
    267e:	88 23       	and	r24, r24
    2680:	01 f5       	brne	.+64     	; 0x26c2 <LED_Control+0xba>
    2682:	80 91 74 01 	lds	r24, 0x0174
    2686:	90 91 75 01 	lds	r25, 0x0175
    268a:	a0 91 76 01 	lds	r26, 0x0176
    268e:	b0 91 77 01 	lds	r27, 0x0177
    2692:	19 82       	std	Y+1, r1	; 0x01
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 ea       	ldi	r20, 0xA0	; 160
    269e:	51 e4       	ldi	r21, 0x41	; 65
    26a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	14 f4       	brge	.+4      	; 0x26ac <LED_Control+0xa4>
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	99 81       	ldd	r25, Y+1	; 0x01
    26b0:	89 27       	eor	r24, r25
    26b2:	88 23       	and	r24, r24
    26b4:	31 f4       	brne	.+12     	; 0x26c2 <LED_Control+0xba>
	{
		GPIO_voidSetPinValue(PORTC  , PIN1 , HIGH);
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
    26c0:	17 c0       	rjmp	.+46     	; 0x26f0 <LED_Control+0xe8>
	}
	else if ((Temp_Val > 40))
    26c2:	80 91 74 01 	lds	r24, 0x0174
    26c6:	90 91 75 01 	lds	r25, 0x0175
    26ca:	a0 91 76 01 	lds	r26, 0x0176
    26ce:	b0 91 77 01 	lds	r27, 0x0177
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	52 e4       	ldi	r21, 0x42	; 66
    26de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <LED_Control+0xe8>
	{
		GPIO_voidSetPinValue(PORTC  , PIN2 , HIGH);
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	62 e0       	ldi	r22, 0x02	; 2
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_voidSetPinValue>
	}
}
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <__mulsi3>:
    26fa:	62 9f       	mul	r22, r18
    26fc:	d0 01       	movw	r26, r0
    26fe:	73 9f       	mul	r23, r19
    2700:	f0 01       	movw	r30, r0
    2702:	82 9f       	mul	r24, r18
    2704:	e0 0d       	add	r30, r0
    2706:	f1 1d       	adc	r31, r1
    2708:	64 9f       	mul	r22, r20
    270a:	e0 0d       	add	r30, r0
    270c:	f1 1d       	adc	r31, r1
    270e:	92 9f       	mul	r25, r18
    2710:	f0 0d       	add	r31, r0
    2712:	83 9f       	mul	r24, r19
    2714:	f0 0d       	add	r31, r0
    2716:	74 9f       	mul	r23, r20
    2718:	f0 0d       	add	r31, r0
    271a:	65 9f       	mul	r22, r21
    271c:	f0 0d       	add	r31, r0
    271e:	99 27       	eor	r25, r25
    2720:	72 9f       	mul	r23, r18
    2722:	b0 0d       	add	r27, r0
    2724:	e1 1d       	adc	r30, r1
    2726:	f9 1f       	adc	r31, r25
    2728:	63 9f       	mul	r22, r19
    272a:	b0 0d       	add	r27, r0
    272c:	e1 1d       	adc	r30, r1
    272e:	f9 1f       	adc	r31, r25
    2730:	bd 01       	movw	r22, r26
    2732:	cf 01       	movw	r24, r30
    2734:	11 24       	eor	r1, r1
    2736:	08 95       	ret

00002738 <__prologue_saves__>:
    2738:	2f 92       	push	r2
    273a:	3f 92       	push	r3
    273c:	4f 92       	push	r4
    273e:	5f 92       	push	r5
    2740:	6f 92       	push	r6
    2742:	7f 92       	push	r7
    2744:	8f 92       	push	r8
    2746:	9f 92       	push	r9
    2748:	af 92       	push	r10
    274a:	bf 92       	push	r11
    274c:	cf 92       	push	r12
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	ca 1b       	sub	r28, r26
    2762:	db 0b       	sbc	r29, r27
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	09 94       	ijmp

00002770 <__epilogue_restores__>:
    2770:	2a 88       	ldd	r2, Y+18	; 0x12
    2772:	39 88       	ldd	r3, Y+17	; 0x11
    2774:	48 88       	ldd	r4, Y+16	; 0x10
    2776:	5f 84       	ldd	r5, Y+15	; 0x0f
    2778:	6e 84       	ldd	r6, Y+14	; 0x0e
    277a:	7d 84       	ldd	r7, Y+13	; 0x0d
    277c:	8c 84       	ldd	r8, Y+12	; 0x0c
    277e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2780:	aa 84       	ldd	r10, Y+10	; 0x0a
    2782:	b9 84       	ldd	r11, Y+9	; 0x09
    2784:	c8 84       	ldd	r12, Y+8	; 0x08
    2786:	df 80       	ldd	r13, Y+7	; 0x07
    2788:	ee 80       	ldd	r14, Y+6	; 0x06
    278a:	fd 80       	ldd	r15, Y+5	; 0x05
    278c:	0c 81       	ldd	r16, Y+4	; 0x04
    278e:	1b 81       	ldd	r17, Y+3	; 0x03
    2790:	aa 81       	ldd	r26, Y+2	; 0x02
    2792:	b9 81       	ldd	r27, Y+1	; 0x01
    2794:	ce 0f       	add	r28, r30
    2796:	d1 1d       	adc	r29, r1
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	ed 01       	movw	r28, r26
    27a4:	08 95       	ret

000027a6 <sprintf>:
    27a6:	ae e0       	ldi	r26, 0x0E	; 14
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e9 ed       	ldi	r30, 0xD9	; 217
    27ac:	f3 e1       	ldi	r31, 0x13	; 19
    27ae:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x1c>
    27b2:	0d 89       	ldd	r16, Y+21	; 0x15
    27b4:	1e 89       	ldd	r17, Y+22	; 0x16
    27b6:	86 e0       	ldi	r24, 0x06	; 6
    27b8:	8c 83       	std	Y+4, r24	; 0x04
    27ba:	1a 83       	std	Y+2, r17	; 0x02
    27bc:	09 83       	std	Y+1, r16	; 0x01
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	9f e7       	ldi	r25, 0x7F	; 127
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	9e 01       	movw	r18, r28
    27c8:	27 5e       	subi	r18, 0xE7	; 231
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	ce 01       	movw	r24, r28
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	6f 89       	ldd	r22, Y+23	; 0x17
    27d2:	78 8d       	ldd	r23, Y+24	; 0x18
    27d4:	a9 01       	movw	r20, r18
    27d6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <vfprintf>
    27da:	2f 81       	ldd	r18, Y+7	; 0x07
    27dc:	38 85       	ldd	r19, Y+8	; 0x08
    27de:	02 0f       	add	r16, r18
    27e0:	13 1f       	adc	r17, r19
    27e2:	f8 01       	movw	r30, r16
    27e4:	10 82       	st	Z, r1
    27e6:	2e 96       	adiw	r28, 0x0e	; 14
    27e8:	e4 e0       	ldi	r30, 0x04	; 4
    27ea:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x1c>

000027ee <vfprintf>:
    27ee:	ab e0       	ldi	r26, 0x0B	; 11
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	ed ef       	ldi	r30, 0xFD	; 253
    27f4:	f3 e1       	ldi	r31, 0x13	; 19
    27f6:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__prologue_saves__>
    27fa:	3c 01       	movw	r6, r24
    27fc:	2b 01       	movw	r4, r22
    27fe:	5a 01       	movw	r10, r20
    2800:	fc 01       	movw	r30, r24
    2802:	17 82       	std	Z+7, r1	; 0x07
    2804:	16 82       	std	Z+6, r1	; 0x06
    2806:	83 81       	ldd	r24, Z+3	; 0x03
    2808:	81 fd       	sbrc	r24, 1
    280a:	03 c0       	rjmp	.+6      	; 0x2812 <vfprintf+0x24>
    280c:	6f ef       	ldi	r22, 0xFF	; 255
    280e:	7f ef       	ldi	r23, 0xFF	; 255
    2810:	c6 c1       	rjmp	.+908    	; 0x2b9e <vfprintf+0x3b0>
    2812:	9a e0       	ldi	r25, 0x0A	; 10
    2814:	89 2e       	mov	r8, r25
    2816:	1e 01       	movw	r2, r28
    2818:	08 94       	sec
    281a:	21 1c       	adc	r2, r1
    281c:	31 1c       	adc	r3, r1
    281e:	f3 01       	movw	r30, r6
    2820:	23 81       	ldd	r18, Z+3	; 0x03
    2822:	f2 01       	movw	r30, r4
    2824:	23 fd       	sbrc	r18, 3
    2826:	85 91       	lpm	r24, Z+
    2828:	23 ff       	sbrs	r18, 3
    282a:	81 91       	ld	r24, Z+
    282c:	2f 01       	movw	r4, r30
    282e:	88 23       	and	r24, r24
    2830:	09 f4       	brne	.+2      	; 0x2834 <vfprintf+0x46>
    2832:	b2 c1       	rjmp	.+868    	; 0x2b98 <vfprintf+0x3aa>
    2834:	85 32       	cpi	r24, 0x25	; 37
    2836:	39 f4       	brne	.+14     	; 0x2846 <vfprintf+0x58>
    2838:	23 fd       	sbrc	r18, 3
    283a:	85 91       	lpm	r24, Z+
    283c:	23 ff       	sbrs	r18, 3
    283e:	81 91       	ld	r24, Z+
    2840:	2f 01       	movw	r4, r30
    2842:	85 32       	cpi	r24, 0x25	; 37
    2844:	29 f4       	brne	.+10     	; 0x2850 <vfprintf+0x62>
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	b3 01       	movw	r22, r6
    284a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    284e:	e7 cf       	rjmp	.-50     	; 0x281e <vfprintf+0x30>
    2850:	98 2f       	mov	r25, r24
    2852:	ff 24       	eor	r15, r15
    2854:	ee 24       	eor	r14, r14
    2856:	99 24       	eor	r9, r9
    2858:	ff e1       	ldi	r31, 0x1F	; 31
    285a:	ff 15       	cp	r31, r15
    285c:	d0 f0       	brcs	.+52     	; 0x2892 <vfprintf+0xa4>
    285e:	9b 32       	cpi	r25, 0x2B	; 43
    2860:	69 f0       	breq	.+26     	; 0x287c <vfprintf+0x8e>
    2862:	9c 32       	cpi	r25, 0x2C	; 44
    2864:	28 f4       	brcc	.+10     	; 0x2870 <vfprintf+0x82>
    2866:	90 32       	cpi	r25, 0x20	; 32
    2868:	59 f0       	breq	.+22     	; 0x2880 <vfprintf+0x92>
    286a:	93 32       	cpi	r25, 0x23	; 35
    286c:	91 f4       	brne	.+36     	; 0x2892 <vfprintf+0xa4>
    286e:	0e c0       	rjmp	.+28     	; 0x288c <vfprintf+0x9e>
    2870:	9d 32       	cpi	r25, 0x2D	; 45
    2872:	49 f0       	breq	.+18     	; 0x2886 <vfprintf+0x98>
    2874:	90 33       	cpi	r25, 0x30	; 48
    2876:	69 f4       	brne	.+26     	; 0x2892 <vfprintf+0xa4>
    2878:	41 e0       	ldi	r20, 0x01	; 1
    287a:	24 c0       	rjmp	.+72     	; 0x28c4 <vfprintf+0xd6>
    287c:	52 e0       	ldi	r21, 0x02	; 2
    287e:	f5 2a       	or	r15, r21
    2880:	84 e0       	ldi	r24, 0x04	; 4
    2882:	f8 2a       	or	r15, r24
    2884:	28 c0       	rjmp	.+80     	; 0x28d6 <vfprintf+0xe8>
    2886:	98 e0       	ldi	r25, 0x08	; 8
    2888:	f9 2a       	or	r15, r25
    288a:	25 c0       	rjmp	.+74     	; 0x28d6 <vfprintf+0xe8>
    288c:	e0 e1       	ldi	r30, 0x10	; 16
    288e:	fe 2a       	or	r15, r30
    2890:	22 c0       	rjmp	.+68     	; 0x28d6 <vfprintf+0xe8>
    2892:	f7 fc       	sbrc	r15, 7
    2894:	29 c0       	rjmp	.+82     	; 0x28e8 <vfprintf+0xfa>
    2896:	89 2f       	mov	r24, r25
    2898:	80 53       	subi	r24, 0x30	; 48
    289a:	8a 30       	cpi	r24, 0x0A	; 10
    289c:	70 f4       	brcc	.+28     	; 0x28ba <vfprintf+0xcc>
    289e:	f6 fe       	sbrs	r15, 6
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <vfprintf+0xbe>
    28a2:	98 9c       	mul	r9, r8
    28a4:	90 2c       	mov	r9, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	98 0e       	add	r9, r24
    28aa:	15 c0       	rjmp	.+42     	; 0x28d6 <vfprintf+0xe8>
    28ac:	e8 9c       	mul	r14, r8
    28ae:	e0 2c       	mov	r14, r0
    28b0:	11 24       	eor	r1, r1
    28b2:	e8 0e       	add	r14, r24
    28b4:	f0 e2       	ldi	r31, 0x20	; 32
    28b6:	ff 2a       	or	r15, r31
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <vfprintf+0xe8>
    28ba:	9e 32       	cpi	r25, 0x2E	; 46
    28bc:	29 f4       	brne	.+10     	; 0x28c8 <vfprintf+0xda>
    28be:	f6 fc       	sbrc	r15, 6
    28c0:	6b c1       	rjmp	.+726    	; 0x2b98 <vfprintf+0x3aa>
    28c2:	40 e4       	ldi	r20, 0x40	; 64
    28c4:	f4 2a       	or	r15, r20
    28c6:	07 c0       	rjmp	.+14     	; 0x28d6 <vfprintf+0xe8>
    28c8:	9c 36       	cpi	r25, 0x6C	; 108
    28ca:	19 f4       	brne	.+6      	; 0x28d2 <vfprintf+0xe4>
    28cc:	50 e8       	ldi	r21, 0x80	; 128
    28ce:	f5 2a       	or	r15, r21
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <vfprintf+0xe8>
    28d2:	98 36       	cpi	r25, 0x68	; 104
    28d4:	49 f4       	brne	.+18     	; 0x28e8 <vfprintf+0xfa>
    28d6:	f2 01       	movw	r30, r4
    28d8:	23 fd       	sbrc	r18, 3
    28da:	95 91       	lpm	r25, Z+
    28dc:	23 ff       	sbrs	r18, 3
    28de:	91 91       	ld	r25, Z+
    28e0:	2f 01       	movw	r4, r30
    28e2:	99 23       	and	r25, r25
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <vfprintf+0xfa>
    28e6:	b8 cf       	rjmp	.-144    	; 0x2858 <vfprintf+0x6a>
    28e8:	89 2f       	mov	r24, r25
    28ea:	85 54       	subi	r24, 0x45	; 69
    28ec:	83 30       	cpi	r24, 0x03	; 3
    28ee:	18 f0       	brcs	.+6      	; 0x28f6 <vfprintf+0x108>
    28f0:	80 52       	subi	r24, 0x20	; 32
    28f2:	83 30       	cpi	r24, 0x03	; 3
    28f4:	38 f4       	brcc	.+14     	; 0x2904 <vfprintf+0x116>
    28f6:	44 e0       	ldi	r20, 0x04	; 4
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	a4 0e       	add	r10, r20
    28fc:	b5 1e       	adc	r11, r21
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	59 83       	std	Y+1, r21	; 0x01
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <vfprintf+0x134>
    2904:	93 36       	cpi	r25, 0x63	; 99
    2906:	31 f0       	breq	.+12     	; 0x2914 <vfprintf+0x126>
    2908:	93 37       	cpi	r25, 0x73	; 115
    290a:	79 f0       	breq	.+30     	; 0x292a <vfprintf+0x13c>
    290c:	93 35       	cpi	r25, 0x53	; 83
    290e:	09 f0       	breq	.+2      	; 0x2912 <vfprintf+0x124>
    2910:	56 c0       	rjmp	.+172    	; 0x29be <vfprintf+0x1d0>
    2912:	20 c0       	rjmp	.+64     	; 0x2954 <vfprintf+0x166>
    2914:	f5 01       	movw	r30, r10
    2916:	80 81       	ld	r24, Z
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	42 e0       	ldi	r20, 0x02	; 2
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	a4 0e       	add	r10, r20
    2920:	b5 1e       	adc	r11, r21
    2922:	61 01       	movw	r12, r2
    2924:	01 e0       	ldi	r16, 0x01	; 1
    2926:	10 e0       	ldi	r17, 0x00	; 0
    2928:	12 c0       	rjmp	.+36     	; 0x294e <vfprintf+0x160>
    292a:	f5 01       	movw	r30, r10
    292c:	c0 80       	ld	r12, Z
    292e:	d1 80       	ldd	r13, Z+1	; 0x01
    2930:	f6 fc       	sbrc	r15, 6
    2932:	03 c0       	rjmp	.+6      	; 0x293a <vfprintf+0x14c>
    2934:	6f ef       	ldi	r22, 0xFF	; 255
    2936:	7f ef       	ldi	r23, 0xFF	; 255
    2938:	02 c0       	rjmp	.+4      	; 0x293e <vfprintf+0x150>
    293a:	69 2d       	mov	r22, r9
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	42 e0       	ldi	r20, 0x02	; 2
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	a4 0e       	add	r10, r20
    2944:	b5 1e       	adc	r11, r21
    2946:	c6 01       	movw	r24, r12
    2948:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <strnlen>
    294c:	8c 01       	movw	r16, r24
    294e:	5f e7       	ldi	r21, 0x7F	; 127
    2950:	f5 22       	and	r15, r21
    2952:	14 c0       	rjmp	.+40     	; 0x297c <vfprintf+0x18e>
    2954:	f5 01       	movw	r30, r10
    2956:	c0 80       	ld	r12, Z
    2958:	d1 80       	ldd	r13, Z+1	; 0x01
    295a:	f6 fc       	sbrc	r15, 6
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <vfprintf+0x176>
    295e:	6f ef       	ldi	r22, 0xFF	; 255
    2960:	7f ef       	ldi	r23, 0xFF	; 255
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <vfprintf+0x17a>
    2964:	69 2d       	mov	r22, r9
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	42 e0       	ldi	r20, 0x02	; 2
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	a4 0e       	add	r10, r20
    296e:	b5 1e       	adc	r11, r21
    2970:	c6 01       	movw	r24, r12
    2972:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <strnlen_P>
    2976:	8c 01       	movw	r16, r24
    2978:	50 e8       	ldi	r21, 0x80	; 128
    297a:	f5 2a       	or	r15, r21
    297c:	f3 fe       	sbrs	r15, 3
    297e:	07 c0       	rjmp	.+14     	; 0x298e <vfprintf+0x1a0>
    2980:	1a c0       	rjmp	.+52     	; 0x29b6 <vfprintf+0x1c8>
    2982:	80 e2       	ldi	r24, 0x20	; 32
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	b3 01       	movw	r22, r6
    2988:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    298c:	ea 94       	dec	r14
    298e:	8e 2d       	mov	r24, r14
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	08 17       	cp	r16, r24
    2994:	19 07       	cpc	r17, r25
    2996:	a8 f3       	brcs	.-22     	; 0x2982 <vfprintf+0x194>
    2998:	0e c0       	rjmp	.+28     	; 0x29b6 <vfprintf+0x1c8>
    299a:	f6 01       	movw	r30, r12
    299c:	f7 fc       	sbrc	r15, 7
    299e:	85 91       	lpm	r24, Z+
    29a0:	f7 fe       	sbrs	r15, 7
    29a2:	81 91       	ld	r24, Z+
    29a4:	6f 01       	movw	r12, r30
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	b3 01       	movw	r22, r6
    29aa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    29ae:	e1 10       	cpse	r14, r1
    29b0:	ea 94       	dec	r14
    29b2:	01 50       	subi	r16, 0x01	; 1
    29b4:	10 40       	sbci	r17, 0x00	; 0
    29b6:	01 15       	cp	r16, r1
    29b8:	11 05       	cpc	r17, r1
    29ba:	79 f7       	brne	.-34     	; 0x299a <vfprintf+0x1ac>
    29bc:	ea c0       	rjmp	.+468    	; 0x2b92 <vfprintf+0x3a4>
    29be:	94 36       	cpi	r25, 0x64	; 100
    29c0:	11 f0       	breq	.+4      	; 0x29c6 <vfprintf+0x1d8>
    29c2:	99 36       	cpi	r25, 0x69	; 105
    29c4:	69 f5       	brne	.+90     	; 0x2a20 <vfprintf+0x232>
    29c6:	f7 fe       	sbrs	r15, 7
    29c8:	08 c0       	rjmp	.+16     	; 0x29da <vfprintf+0x1ec>
    29ca:	f5 01       	movw	r30, r10
    29cc:	20 81       	ld	r18, Z
    29ce:	31 81       	ldd	r19, Z+1	; 0x01
    29d0:	42 81       	ldd	r20, Z+2	; 0x02
    29d2:	53 81       	ldd	r21, Z+3	; 0x03
    29d4:	84 e0       	ldi	r24, 0x04	; 4
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0a c0       	rjmp	.+20     	; 0x29ee <vfprintf+0x200>
    29da:	f5 01       	movw	r30, r10
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	9c 01       	movw	r18, r24
    29e2:	44 27       	eor	r20, r20
    29e4:	37 fd       	sbrc	r19, 7
    29e6:	40 95       	com	r20
    29e8:	54 2f       	mov	r21, r20
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	a8 0e       	add	r10, r24
    29f0:	b9 1e       	adc	r11, r25
    29f2:	9f e6       	ldi	r25, 0x6F	; 111
    29f4:	f9 22       	and	r15, r25
    29f6:	57 ff       	sbrs	r21, 7
    29f8:	09 c0       	rjmp	.+18     	; 0x2a0c <vfprintf+0x21e>
    29fa:	50 95       	com	r21
    29fc:	40 95       	com	r20
    29fe:	30 95       	com	r19
    2a00:	21 95       	neg	r18
    2a02:	3f 4f       	sbci	r19, 0xFF	; 255
    2a04:	4f 4f       	sbci	r20, 0xFF	; 255
    2a06:	5f 4f       	sbci	r21, 0xFF	; 255
    2a08:	e0 e8       	ldi	r30, 0x80	; 128
    2a0a:	fe 2a       	or	r15, r30
    2a0c:	ca 01       	movw	r24, r20
    2a0e:	b9 01       	movw	r22, r18
    2a10:	a1 01       	movw	r20, r2
    2a12:	2a e0       	ldi	r18, 0x0A	; 10
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__ultoa_invert>
    2a1a:	d8 2e       	mov	r13, r24
    2a1c:	d2 18       	sub	r13, r2
    2a1e:	40 c0       	rjmp	.+128    	; 0x2aa0 <vfprintf+0x2b2>
    2a20:	95 37       	cpi	r25, 0x75	; 117
    2a22:	29 f4       	brne	.+10     	; 0x2a2e <vfprintf+0x240>
    2a24:	1f 2d       	mov	r17, r15
    2a26:	1f 7e       	andi	r17, 0xEF	; 239
    2a28:	2a e0       	ldi	r18, 0x0A	; 10
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	1d c0       	rjmp	.+58     	; 0x2a68 <vfprintf+0x27a>
    2a2e:	1f 2d       	mov	r17, r15
    2a30:	19 7f       	andi	r17, 0xF9	; 249
    2a32:	9f 36       	cpi	r25, 0x6F	; 111
    2a34:	61 f0       	breq	.+24     	; 0x2a4e <vfprintf+0x260>
    2a36:	90 37       	cpi	r25, 0x70	; 112
    2a38:	20 f4       	brcc	.+8      	; 0x2a42 <vfprintf+0x254>
    2a3a:	98 35       	cpi	r25, 0x58	; 88
    2a3c:	09 f0       	breq	.+2      	; 0x2a40 <vfprintf+0x252>
    2a3e:	ac c0       	rjmp	.+344    	; 0x2b98 <vfprintf+0x3aa>
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <vfprintf+0x272>
    2a42:	90 37       	cpi	r25, 0x70	; 112
    2a44:	39 f0       	breq	.+14     	; 0x2a54 <vfprintf+0x266>
    2a46:	98 37       	cpi	r25, 0x78	; 120
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <vfprintf+0x25e>
    2a4a:	a6 c0       	rjmp	.+332    	; 0x2b98 <vfprintf+0x3aa>
    2a4c:	04 c0       	rjmp	.+8      	; 0x2a56 <vfprintf+0x268>
    2a4e:	28 e0       	ldi	r18, 0x08	; 8
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	0a c0       	rjmp	.+20     	; 0x2a68 <vfprintf+0x27a>
    2a54:	10 61       	ori	r17, 0x10	; 16
    2a56:	14 fd       	sbrc	r17, 4
    2a58:	14 60       	ori	r17, 0x04	; 4
    2a5a:	20 e1       	ldi	r18, 0x10	; 16
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	04 c0       	rjmp	.+8      	; 0x2a68 <vfprintf+0x27a>
    2a60:	14 fd       	sbrc	r17, 4
    2a62:	16 60       	ori	r17, 0x06	; 6
    2a64:	20 e1       	ldi	r18, 0x10	; 16
    2a66:	32 e0       	ldi	r19, 0x02	; 2
    2a68:	17 ff       	sbrs	r17, 7
    2a6a:	08 c0       	rjmp	.+16     	; 0x2a7c <vfprintf+0x28e>
    2a6c:	f5 01       	movw	r30, r10
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	44 e0       	ldi	r20, 0x04	; 4
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	08 c0       	rjmp	.+16     	; 0x2a8c <vfprintf+0x29e>
    2a7c:	f5 01       	movw	r30, r10
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	bc 01       	movw	r22, r24
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	42 e0       	ldi	r20, 0x02	; 2
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	a4 0e       	add	r10, r20
    2a8e:	b5 1e       	adc	r11, r21
    2a90:	a1 01       	movw	r20, r2
    2a92:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__ultoa_invert>
    2a96:	d8 2e       	mov	r13, r24
    2a98:	d2 18       	sub	r13, r2
    2a9a:	8f e7       	ldi	r24, 0x7F	; 127
    2a9c:	f8 2e       	mov	r15, r24
    2a9e:	f1 22       	and	r15, r17
    2aa0:	f6 fe       	sbrs	r15, 6
    2aa2:	0b c0       	rjmp	.+22     	; 0x2aba <vfprintf+0x2cc>
    2aa4:	5e ef       	ldi	r21, 0xFE	; 254
    2aa6:	f5 22       	and	r15, r21
    2aa8:	d9 14       	cp	r13, r9
    2aaa:	38 f4       	brcc	.+14     	; 0x2aba <vfprintf+0x2cc>
    2aac:	f4 fe       	sbrs	r15, 4
    2aae:	07 c0       	rjmp	.+14     	; 0x2abe <vfprintf+0x2d0>
    2ab0:	f2 fc       	sbrc	r15, 2
    2ab2:	05 c0       	rjmp	.+10     	; 0x2abe <vfprintf+0x2d0>
    2ab4:	8f ee       	ldi	r24, 0xEF	; 239
    2ab6:	f8 22       	and	r15, r24
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <vfprintf+0x2d0>
    2aba:	1d 2d       	mov	r17, r13
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <vfprintf+0x2d2>
    2abe:	19 2d       	mov	r17, r9
    2ac0:	f4 fe       	sbrs	r15, 4
    2ac2:	0d c0       	rjmp	.+26     	; 0x2ade <vfprintf+0x2f0>
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	ed 0d       	add	r30, r13
    2ac8:	f1 1d       	adc	r31, r1
    2aca:	80 81       	ld	r24, Z
    2acc:	80 33       	cpi	r24, 0x30	; 48
    2ace:	19 f4       	brne	.+6      	; 0x2ad6 <vfprintf+0x2e8>
    2ad0:	99 ee       	ldi	r25, 0xE9	; 233
    2ad2:	f9 22       	and	r15, r25
    2ad4:	08 c0       	rjmp	.+16     	; 0x2ae6 <vfprintf+0x2f8>
    2ad6:	1f 5f       	subi	r17, 0xFF	; 255
    2ad8:	f2 fe       	sbrs	r15, 2
    2ada:	05 c0       	rjmp	.+10     	; 0x2ae6 <vfprintf+0x2f8>
    2adc:	03 c0       	rjmp	.+6      	; 0x2ae4 <vfprintf+0x2f6>
    2ade:	8f 2d       	mov	r24, r15
    2ae0:	86 78       	andi	r24, 0x86	; 134
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <vfprintf+0x2f8>
    2ae4:	1f 5f       	subi	r17, 0xFF	; 255
    2ae6:	0f 2d       	mov	r16, r15
    2ae8:	f3 fc       	sbrc	r15, 3
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <vfprintf+0x326>
    2aec:	f0 fe       	sbrs	r15, 0
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <vfprintf+0x320>
    2af0:	1e 15       	cp	r17, r14
    2af2:	10 f0       	brcs	.+4      	; 0x2af8 <vfprintf+0x30a>
    2af4:	9d 2c       	mov	r9, r13
    2af6:	0b c0       	rjmp	.+22     	; 0x2b0e <vfprintf+0x320>
    2af8:	9d 2c       	mov	r9, r13
    2afa:	9e 0c       	add	r9, r14
    2afc:	91 1a       	sub	r9, r17
    2afe:	1e 2d       	mov	r17, r14
    2b00:	06 c0       	rjmp	.+12     	; 0x2b0e <vfprintf+0x320>
    2b02:	80 e2       	ldi	r24, 0x20	; 32
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	b3 01       	movw	r22, r6
    2b08:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    2b0c:	1f 5f       	subi	r17, 0xFF	; 255
    2b0e:	1e 15       	cp	r17, r14
    2b10:	c0 f3       	brcs	.-16     	; 0x2b02 <vfprintf+0x314>
    2b12:	04 c0       	rjmp	.+8      	; 0x2b1c <vfprintf+0x32e>
    2b14:	1e 15       	cp	r17, r14
    2b16:	10 f4       	brcc	.+4      	; 0x2b1c <vfprintf+0x32e>
    2b18:	e1 1a       	sub	r14, r17
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <vfprintf+0x330>
    2b1c:	ee 24       	eor	r14, r14
    2b1e:	04 ff       	sbrs	r16, 4
    2b20:	0f c0       	rjmp	.+30     	; 0x2b40 <vfprintf+0x352>
    2b22:	80 e3       	ldi	r24, 0x30	; 48
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	b3 01       	movw	r22, r6
    2b28:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    2b2c:	02 ff       	sbrs	r16, 2
    2b2e:	1d c0       	rjmp	.+58     	; 0x2b6a <vfprintf+0x37c>
    2b30:	01 fd       	sbrc	r16, 1
    2b32:	03 c0       	rjmp	.+6      	; 0x2b3a <vfprintf+0x34c>
    2b34:	88 e7       	ldi	r24, 0x78	; 120
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	0e c0       	rjmp	.+28     	; 0x2b56 <vfprintf+0x368>
    2b3a:	88 e5       	ldi	r24, 0x58	; 88
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0b c0       	rjmp	.+22     	; 0x2b56 <vfprintf+0x368>
    2b40:	80 2f       	mov	r24, r16
    2b42:	86 78       	andi	r24, 0x86	; 134
    2b44:	91 f0       	breq	.+36     	; 0x2b6a <vfprintf+0x37c>
    2b46:	01 ff       	sbrs	r16, 1
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <vfprintf+0x360>
    2b4a:	8b e2       	ldi	r24, 0x2B	; 43
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <vfprintf+0x362>
    2b4e:	80 e2       	ldi	r24, 0x20	; 32
    2b50:	f7 fc       	sbrc	r15, 7
    2b52:	8d e2       	ldi	r24, 0x2D	; 45
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	b3 01       	movw	r22, r6
    2b58:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    2b5c:	06 c0       	rjmp	.+12     	; 0x2b6a <vfprintf+0x37c>
    2b5e:	80 e3       	ldi	r24, 0x30	; 48
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	b3 01       	movw	r22, r6
    2b64:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    2b68:	9a 94       	dec	r9
    2b6a:	d9 14       	cp	r13, r9
    2b6c:	c0 f3       	brcs	.-16     	; 0x2b5e <vfprintf+0x370>
    2b6e:	da 94       	dec	r13
    2b70:	f1 01       	movw	r30, r2
    2b72:	ed 0d       	add	r30, r13
    2b74:	f1 1d       	adc	r31, r1
    2b76:	80 81       	ld	r24, Z
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	b3 01       	movw	r22, r6
    2b7c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    2b80:	dd 20       	and	r13, r13
    2b82:	a9 f7       	brne	.-22     	; 0x2b6e <vfprintf+0x380>
    2b84:	06 c0       	rjmp	.+12     	; 0x2b92 <vfprintf+0x3a4>
    2b86:	80 e2       	ldi	r24, 0x20	; 32
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	b3 01       	movw	r22, r6
    2b8c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <fputc>
    2b90:	ea 94       	dec	r14
    2b92:	ee 20       	and	r14, r14
    2b94:	c1 f7       	brne	.-16     	; 0x2b86 <vfprintf+0x398>
    2b96:	43 ce       	rjmp	.-890    	; 0x281e <vfprintf+0x30>
    2b98:	f3 01       	movw	r30, r6
    2b9a:	66 81       	ldd	r22, Z+6	; 0x06
    2b9c:	77 81       	ldd	r23, Z+7	; 0x07
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	2b 96       	adiw	r28, 0x0b	; 11
    2ba2:	e2 e1       	ldi	r30, 0x12	; 18
    2ba4:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__epilogue_restores__>

00002ba8 <strnlen_P>:
    2ba8:	fc 01       	movw	r30, r24
    2baa:	05 90       	lpm	r0, Z+
    2bac:	61 50       	subi	r22, 0x01	; 1
    2bae:	70 40       	sbci	r23, 0x00	; 0
    2bb0:	01 10       	cpse	r0, r1
    2bb2:	d8 f7       	brcc	.-10     	; 0x2baa <strnlen_P+0x2>
    2bb4:	80 95       	com	r24
    2bb6:	90 95       	com	r25
    2bb8:	8e 0f       	add	r24, r30
    2bba:	9f 1f       	adc	r25, r31
    2bbc:	08 95       	ret

00002bbe <strnlen>:
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	61 50       	subi	r22, 0x01	; 1
    2bc2:	70 40       	sbci	r23, 0x00	; 0
    2bc4:	01 90       	ld	r0, Z+
    2bc6:	01 10       	cpse	r0, r1
    2bc8:	d8 f7       	brcc	.-10     	; 0x2bc0 <strnlen+0x2>
    2bca:	80 95       	com	r24
    2bcc:	90 95       	com	r25
    2bce:	8e 0f       	add	r24, r30
    2bd0:	9f 1f       	adc	r25, r31
    2bd2:	08 95       	ret

00002bd4 <fputc>:
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	8c 01       	movw	r16, r24
    2bde:	eb 01       	movw	r28, r22
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	81 ff       	sbrs	r24, 1
    2be4:	1b c0       	rjmp	.+54     	; 0x2c1c <fputc+0x48>
    2be6:	82 ff       	sbrs	r24, 2
    2be8:	0d c0       	rjmp	.+26     	; 0x2c04 <fputc+0x30>
    2bea:	2e 81       	ldd	r18, Y+6	; 0x06
    2bec:	3f 81       	ldd	r19, Y+7	; 0x07
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf2:	28 17       	cp	r18, r24
    2bf4:	39 07       	cpc	r19, r25
    2bf6:	64 f4       	brge	.+24     	; 0x2c10 <fputc+0x3c>
    2bf8:	e8 81       	ld	r30, Y
    2bfa:	f9 81       	ldd	r31, Y+1	; 0x01
    2bfc:	01 93       	st	Z+, r16
    2bfe:	f9 83       	std	Y+1, r31	; 0x01
    2c00:	e8 83       	st	Y, r30
    2c02:	06 c0       	rjmp	.+12     	; 0x2c10 <fputc+0x3c>
    2c04:	e8 85       	ldd	r30, Y+8	; 0x08
    2c06:	f9 85       	ldd	r31, Y+9	; 0x09
    2c08:	80 2f       	mov	r24, r16
    2c0a:	09 95       	icall
    2c0c:	89 2b       	or	r24, r25
    2c0e:	31 f4       	brne	.+12     	; 0x2c1c <fputc+0x48>
    2c10:	8e 81       	ldd	r24, Y+6	; 0x06
    2c12:	9f 81       	ldd	r25, Y+7	; 0x07
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	9f 83       	std	Y+7, r25	; 0x07
    2c18:	8e 83       	std	Y+6, r24	; 0x06
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <fputc+0x4c>
    2c1c:	0f ef       	ldi	r16, 0xFF	; 255
    2c1e:	1f ef       	ldi	r17, 0xFF	; 255
    2c20:	c8 01       	movw	r24, r16
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	08 95       	ret

00002c2c <__ultoa_invert>:
    2c2c:	fa 01       	movw	r30, r20
    2c2e:	aa 27       	eor	r26, r26
    2c30:	28 30       	cpi	r18, 0x08	; 8
    2c32:	51 f1       	breq	.+84     	; 0x2c88 <__ultoa_invert+0x5c>
    2c34:	20 31       	cpi	r18, 0x10	; 16
    2c36:	81 f1       	breq	.+96     	; 0x2c98 <__ultoa_invert+0x6c>
    2c38:	e8 94       	clt
    2c3a:	6f 93       	push	r22
    2c3c:	6e 7f       	andi	r22, 0xFE	; 254
    2c3e:	6e 5f       	subi	r22, 0xFE	; 254
    2c40:	7f 4f       	sbci	r23, 0xFF	; 255
    2c42:	8f 4f       	sbci	r24, 0xFF	; 255
    2c44:	9f 4f       	sbci	r25, 0xFF	; 255
    2c46:	af 4f       	sbci	r26, 0xFF	; 255
    2c48:	b1 e0       	ldi	r27, 0x01	; 1
    2c4a:	3e d0       	rcall	.+124    	; 0x2cc8 <__ultoa_invert+0x9c>
    2c4c:	b4 e0       	ldi	r27, 0x04	; 4
    2c4e:	3c d0       	rcall	.+120    	; 0x2cc8 <__ultoa_invert+0x9c>
    2c50:	67 0f       	add	r22, r23
    2c52:	78 1f       	adc	r23, r24
    2c54:	89 1f       	adc	r24, r25
    2c56:	9a 1f       	adc	r25, r26
    2c58:	a1 1d       	adc	r26, r1
    2c5a:	68 0f       	add	r22, r24
    2c5c:	79 1f       	adc	r23, r25
    2c5e:	8a 1f       	adc	r24, r26
    2c60:	91 1d       	adc	r25, r1
    2c62:	a1 1d       	adc	r26, r1
    2c64:	6a 0f       	add	r22, r26
    2c66:	71 1d       	adc	r23, r1
    2c68:	81 1d       	adc	r24, r1
    2c6a:	91 1d       	adc	r25, r1
    2c6c:	a1 1d       	adc	r26, r1
    2c6e:	20 d0       	rcall	.+64     	; 0x2cb0 <__ultoa_invert+0x84>
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <__ultoa_invert+0x48>
    2c72:	68 94       	set
    2c74:	3f 91       	pop	r19
    2c76:	2a e0       	ldi	r18, 0x0A	; 10
    2c78:	26 9f       	mul	r18, r22
    2c7a:	11 24       	eor	r1, r1
    2c7c:	30 19       	sub	r19, r0
    2c7e:	30 5d       	subi	r19, 0xD0	; 208
    2c80:	31 93       	st	Z+, r19
    2c82:	de f6       	brtc	.-74     	; 0x2c3a <__ultoa_invert+0xe>
    2c84:	cf 01       	movw	r24, r30
    2c86:	08 95       	ret
    2c88:	46 2f       	mov	r20, r22
    2c8a:	47 70       	andi	r20, 0x07	; 7
    2c8c:	40 5d       	subi	r20, 0xD0	; 208
    2c8e:	41 93       	st	Z+, r20
    2c90:	b3 e0       	ldi	r27, 0x03	; 3
    2c92:	0f d0       	rcall	.+30     	; 0x2cb2 <__ultoa_invert+0x86>
    2c94:	c9 f7       	brne	.-14     	; 0x2c88 <__ultoa_invert+0x5c>
    2c96:	f6 cf       	rjmp	.-20     	; 0x2c84 <__ultoa_invert+0x58>
    2c98:	46 2f       	mov	r20, r22
    2c9a:	4f 70       	andi	r20, 0x0F	; 15
    2c9c:	40 5d       	subi	r20, 0xD0	; 208
    2c9e:	4a 33       	cpi	r20, 0x3A	; 58
    2ca0:	18 f0       	brcs	.+6      	; 0x2ca8 <__ultoa_invert+0x7c>
    2ca2:	49 5d       	subi	r20, 0xD9	; 217
    2ca4:	31 fd       	sbrc	r19, 1
    2ca6:	40 52       	subi	r20, 0x20	; 32
    2ca8:	41 93       	st	Z+, r20
    2caa:	02 d0       	rcall	.+4      	; 0x2cb0 <__ultoa_invert+0x84>
    2cac:	a9 f7       	brne	.-22     	; 0x2c98 <__ultoa_invert+0x6c>
    2cae:	ea cf       	rjmp	.-44     	; 0x2c84 <__ultoa_invert+0x58>
    2cb0:	b4 e0       	ldi	r27, 0x04	; 4
    2cb2:	a6 95       	lsr	r26
    2cb4:	97 95       	ror	r25
    2cb6:	87 95       	ror	r24
    2cb8:	77 95       	ror	r23
    2cba:	67 95       	ror	r22
    2cbc:	ba 95       	dec	r27
    2cbe:	c9 f7       	brne	.-14     	; 0x2cb2 <__ultoa_invert+0x86>
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	61 05       	cpc	r22, r1
    2cc4:	71 05       	cpc	r23, r1
    2cc6:	08 95       	ret
    2cc8:	9b 01       	movw	r18, r22
    2cca:	ac 01       	movw	r20, r24
    2ccc:	0a 2e       	mov	r0, r26
    2cce:	06 94       	lsr	r0
    2cd0:	57 95       	ror	r21
    2cd2:	47 95       	ror	r20
    2cd4:	37 95       	ror	r19
    2cd6:	27 95       	ror	r18
    2cd8:	ba 95       	dec	r27
    2cda:	c9 f7       	brne	.-14     	; 0x2cce <__ultoa_invert+0xa2>
    2cdc:	62 0f       	add	r22, r18
    2cde:	73 1f       	adc	r23, r19
    2ce0:	84 1f       	adc	r24, r20
    2ce2:	95 1f       	adc	r25, r21
    2ce4:	a0 1d       	adc	r26, r0
    2ce6:	08 95       	ret

00002ce8 <_exit>:
    2ce8:	f8 94       	cli

00002cea <__stop_program>:
    2cea:	ff cf       	rjmp	.-2      	; 0x2cea <__stop_program>
