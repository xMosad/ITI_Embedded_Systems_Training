
32-RTOS_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002e  00800060  00800060  00000d7a  2**0
                  ALLOC
  2 .stab         00001170  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b4a  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 38       	cpi	r26, 0x8E	; 142
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <main>
  74:	0c 94 81 06 	jmp	0xd02	; 0xd02 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GIE_voidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"
#include "GIE_Cfg.h"

void GIE_voidEnable(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
  84:	af e5       	ldi	r26, 0x5F	; 95
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ef e5       	ldi	r30, 0x5F	; 95
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
  a0:	af e5       	ldi	r26, 0x5F	; 95
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	ef e5       	ldi	r30, 0x5F	; 95
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <GPIO_voidSetPinValue>:

#include "GPIO_Interface.h"
#include "GPIO_Private.h"

void GPIO_voidSetPinValue(u8 port_id , u8 pin , u8 value)
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	27 97       	sbiw	r28, 0x07	; 7
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	6a 83       	std	Y+2, r22	; 0x02
  cc:	4b 83       	std	Y+3, r20	; 0x03
	if (value == HIGH)
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	09 f0       	breq	.+2      	; 0xd6 <GPIO_voidSetPinValue+0x22>
  d4:	6f c0       	rjmp	.+222    	; 0x1b4 <GPIO_voidSetPinValue+0x100>
	{
		switch (port_id)
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	3f 83       	std	Y+7, r19	; 0x07
  de:	2e 83       	std	Y+6, r18	; 0x06
  e0:	8e 81       	ldd	r24, Y+6	; 0x06
  e2:	9f 81       	ldd	r25, Y+7	; 0x07
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	49 f1       	breq	.+82     	; 0x13c <GPIO_voidSetPinValue+0x88>
  ea:	2e 81       	ldd	r18, Y+6	; 0x06
  ec:	3f 81       	ldd	r19, Y+7	; 0x07
  ee:	22 30       	cpi	r18, 0x02	; 2
  f0:	31 05       	cpc	r19, r1
  f2:	2c f4       	brge	.+10     	; 0xfe <GPIO_voidSetPinValue+0x4a>
  f4:	8e 81       	ldd	r24, Y+6	; 0x06
  f6:	9f 81       	ldd	r25, Y+7	; 0x07
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	61 f0       	breq	.+24     	; 0x114 <GPIO_voidSetPinValue+0x60>
  fc:	d2 c0       	rjmp	.+420    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
  fe:	2e 81       	ldd	r18, Y+6	; 0x06
 100:	3f 81       	ldd	r19, Y+7	; 0x07
 102:	22 30       	cpi	r18, 0x02	; 2
 104:	31 05       	cpc	r19, r1
 106:	71 f1       	breq	.+92     	; 0x164 <GPIO_voidSetPinValue+0xb0>
 108:	8e 81       	ldd	r24, Y+6	; 0x06
 10a:	9f 81       	ldd	r25, Y+7	; 0x07
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	91 05       	cpc	r25, r1
 110:	e9 f1       	breq	.+122    	; 0x18c <GPIO_voidSetPinValue+0xd8>
 112:	c7 c0       	rjmp	.+398    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_PORTA , pin);
 114:	ab e3       	ldi	r26, 0x3B	; 59
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	eb e3       	ldi	r30, 0x3B	; 59
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <GPIO_voidSetPinValue+0x7e>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <GPIO_voidSetPinValue+0x7a>
 136:	84 2b       	or	r24, r20
 138:	8c 93       	st	X, r24
 13a:	b3 c0       	rjmp	.+358    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_PORTB , pin);
 13c:	a8 e3       	ldi	r26, 0x38	; 56
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e8 e3       	ldi	r30, 0x38	; 56
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <GPIO_voidSetPinValue+0xa6>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <GPIO_voidSetPinValue+0xa2>
 15e:	84 2b       	or	r24, r20
 160:	8c 93       	st	X, r24
 162:	9f c0       	rjmp	.+318    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_PORTC , pin);
 164:	a5 e3       	ldi	r26, 0x35	; 53
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e5 e3       	ldi	r30, 0x35	; 53
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	48 2f       	mov	r20, r24
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 2e       	mov	r0, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <GPIO_voidSetPinValue+0xce>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <GPIO_voidSetPinValue+0xca>
 186:	84 2b       	or	r24, r20
 188:	8c 93       	st	X, r24
 18a:	8b c0       	rjmp	.+278    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_PORTD , pin);
 18c:	a2 e3       	ldi	r26, 0x32	; 50
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e2 e3       	ldi	r30, 0x32	; 50
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	48 2f       	mov	r20, r24
 198:	8a 81       	ldd	r24, Y+2	; 0x02
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 2e       	mov	r0, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <GPIO_voidSetPinValue+0xf6>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	0a 94       	dec	r0
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <GPIO_voidSetPinValue+0xf2>
 1ae:	84 2b       	or	r24, r20
 1b0:	8c 93       	st	X, r24
 1b2:	77 c0       	rjmp	.+238    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>

			default:
			break;
		}
	}
	else if (value == LOW)
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	88 23       	and	r24, r24
 1b8:	09 f0       	breq	.+2      	; 0x1bc <GPIO_voidSetPinValue+0x108>
 1ba:	73 c0       	rjmp	.+230    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
	{
		switch (port_id)
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	3d 83       	std	Y+5, r19	; 0x05
 1c4:	2c 83       	std	Y+4, r18	; 0x04
 1c6:	8c 81       	ldd	r24, Y+4	; 0x04
 1c8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	59 f1       	breq	.+86     	; 0x226 <GPIO_voidSetPinValue+0x172>
 1d0:	2c 81       	ldd	r18, Y+4	; 0x04
 1d2:	3d 81       	ldd	r19, Y+5	; 0x05
 1d4:	22 30       	cpi	r18, 0x02	; 2
 1d6:	31 05       	cpc	r19, r1
 1d8:	2c f4       	brge	.+10     	; 0x1e4 <GPIO_voidSetPinValue+0x130>
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	9d 81       	ldd	r25, Y+5	; 0x05
 1de:	00 97       	sbiw	r24, 0x00	; 0
 1e0:	69 f0       	breq	.+26     	; 0x1fc <GPIO_voidSetPinValue+0x148>
 1e2:	5f c0       	rjmp	.+190    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
 1e4:	2c 81       	ldd	r18, Y+4	; 0x04
 1e6:	3d 81       	ldd	r19, Y+5	; 0x05
 1e8:	22 30       	cpi	r18, 0x02	; 2
 1ea:	31 05       	cpc	r19, r1
 1ec:	89 f1       	breq	.+98     	; 0x250 <GPIO_voidSetPinValue+0x19c>
 1ee:	8c 81       	ldd	r24, Y+4	; 0x04
 1f0:	9d 81       	ldd	r25, Y+5	; 0x05
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	09 f4       	brne	.+2      	; 0x1fa <GPIO_voidSetPinValue+0x146>
 1f8:	40 c0       	rjmp	.+128    	; 0x27a <GPIO_voidSetPinValue+0x1c6>
 1fa:	53 c0       	rjmp	.+166    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_PORTA , pin);
 1fc:	ab e3       	ldi	r26, 0x3B	; 59
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	eb e3       	ldi	r30, 0x3B	; 59
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <GPIO_voidSetPinValue+0x166>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <GPIO_voidSetPinValue+0x162>
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	8c 93       	st	X, r24
 224:	3e c0       	rjmp	.+124    	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_PORTB , pin);
 226:	a8 e3       	ldi	r26, 0x38	; 56
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e8 e3       	ldi	r30, 0x38	; 56
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	48 2f       	mov	r20, r24
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 2e       	mov	r0, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <GPIO_voidSetPinValue+0x190>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <GPIO_voidSetPinValue+0x18c>
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	8c 93       	st	X, r24
 24e:	29 c0       	rjmp	.+82     	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_PORTC , pin);
 250:	a5 e3       	ldi	r26, 0x35	; 53
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e5 e3       	ldi	r30, 0x35	; 53
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	8a 81       	ldd	r24, Y+2	; 0x02
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <GPIO_voidSetPinValue+0x1ba>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <GPIO_voidSetPinValue+0x1b6>
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	8c 93       	st	X, r24
 278:	14 c0       	rjmp	.+40     	; 0x2a2 <GPIO_voidSetPinValue+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_PORTD , pin);
 27a:	a2 e3       	ldi	r26, 0x32	; 50
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e2 e3       	ldi	r30, 0x32	; 50
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <GPIO_voidSetPinValue+0x1e4>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <GPIO_voidSetPinValue+0x1e0>
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	8c 93       	st	X, r24
	{
		/* Should not be here */
	}


}
 2a2:	27 96       	adiw	r28, 0x07	; 7
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	cf 91       	pop	r28
 2b0:	df 91       	pop	r29
 2b2:	08 95       	ret

000002b4 <GPIO_voidSetPinDirection>:

void GPIO_voidSetPinDirection(u8 port_id , u8 pin , u8 dirc )
{
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	27 97       	sbiw	r28, 0x07	; 7
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	6a 83       	std	Y+2, r22	; 0x02
 2cc:	4b 83       	std	Y+3, r20	; 0x03
	if (dirc == OUTPUT)
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <GPIO_voidSetPinDirection+0x22>
 2d4:	6f c0       	rjmp	.+222    	; 0x3b4 <GPIO_voidSetPinDirection+0x100>
	{
		switch (port_id)
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	3f 83       	std	Y+7, r19	; 0x07
 2de:	2e 83       	std	Y+6, r18	; 0x06
 2e0:	8e 81       	ldd	r24, Y+6	; 0x06
 2e2:	9f 81       	ldd	r25, Y+7	; 0x07
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	91 05       	cpc	r25, r1
 2e8:	49 f1       	breq	.+82     	; 0x33c <GPIO_voidSetPinDirection+0x88>
 2ea:	2e 81       	ldd	r18, Y+6	; 0x06
 2ec:	3f 81       	ldd	r19, Y+7	; 0x07
 2ee:	22 30       	cpi	r18, 0x02	; 2
 2f0:	31 05       	cpc	r19, r1
 2f2:	2c f4       	brge	.+10     	; 0x2fe <GPIO_voidSetPinDirection+0x4a>
 2f4:	8e 81       	ldd	r24, Y+6	; 0x06
 2f6:	9f 81       	ldd	r25, Y+7	; 0x07
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	61 f0       	breq	.+24     	; 0x314 <GPIO_voidSetPinDirection+0x60>
 2fc:	d2 c0       	rjmp	.+420    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
 2fe:	2e 81       	ldd	r18, Y+6	; 0x06
 300:	3f 81       	ldd	r19, Y+7	; 0x07
 302:	22 30       	cpi	r18, 0x02	; 2
 304:	31 05       	cpc	r19, r1
 306:	71 f1       	breq	.+92     	; 0x364 <GPIO_voidSetPinDirection+0xb0>
 308:	8e 81       	ldd	r24, Y+6	; 0x06
 30a:	9f 81       	ldd	r25, Y+7	; 0x07
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	91 05       	cpc	r25, r1
 310:	e9 f1       	breq	.+122    	; 0x38c <GPIO_voidSetPinDirection+0xd8>
 312:	c7 c0       	rjmp	.+398    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			SET_BIT (GPIO_DDRA , pin);
 314:	aa e3       	ldi	r26, 0x3A	; 58
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	ea e3       	ldi	r30, 0x3A	; 58
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <GPIO_voidSetPinDirection+0x7e>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <GPIO_voidSetPinDirection+0x7a>
 336:	84 2b       	or	r24, r20
 338:	8c 93       	st	X, r24
 33a:	b3 c0       	rjmp	.+358    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			SET_BIT (GPIO_DDRB , pin);
 33c:	a7 e3       	ldi	r26, 0x37	; 55
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e7 e3       	ldi	r30, 0x37	; 55
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	48 2f       	mov	r20, r24
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 2e       	mov	r0, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <GPIO_voidSetPinDirection+0xa6>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <GPIO_voidSetPinDirection+0xa2>
 35e:	84 2b       	or	r24, r20
 360:	8c 93       	st	X, r24
 362:	9f c0       	rjmp	.+318    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			SET_BIT (GPIO_DDRC , pin);
 364:	a4 e3       	ldi	r26, 0x34	; 52
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	e4 e3       	ldi	r30, 0x34	; 52
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	48 2f       	mov	r20, r24
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	28 2f       	mov	r18, r24
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 2e       	mov	r0, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <GPIO_voidSetPinDirection+0xce>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <GPIO_voidSetPinDirection+0xca>
 386:	84 2b       	or	r24, r20
 388:	8c 93       	st	X, r24
 38a:	8b c0       	rjmp	.+278    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			SET_BIT (GPIO_DDRD , pin);
 38c:	a1 e3       	ldi	r26, 0x31	; 49
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e1 e3       	ldi	r30, 0x31	; 49
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <GPIO_voidSetPinDirection+0xf6>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <GPIO_voidSetPinDirection+0xf2>
 3ae:	84 2b       	or	r24, r20
 3b0:	8c 93       	st	X, r24
 3b2:	77 c0       	rjmp	.+238    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>

			default:
			break;
		}
	}
	else if (dirc == INPUT)
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	88 23       	and	r24, r24
 3b8:	09 f0       	breq	.+2      	; 0x3bc <GPIO_voidSetPinDirection+0x108>
 3ba:	73 c0       	rjmp	.+230    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
	{
		switch (port_id)
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	3d 83       	std	Y+5, r19	; 0x05
 3c4:	2c 83       	std	Y+4, r18	; 0x04
 3c6:	8c 81       	ldd	r24, Y+4	; 0x04
 3c8:	9d 81       	ldd	r25, Y+5	; 0x05
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	91 05       	cpc	r25, r1
 3ce:	59 f1       	breq	.+86     	; 0x426 <GPIO_voidSetPinDirection+0x172>
 3d0:	2c 81       	ldd	r18, Y+4	; 0x04
 3d2:	3d 81       	ldd	r19, Y+5	; 0x05
 3d4:	22 30       	cpi	r18, 0x02	; 2
 3d6:	31 05       	cpc	r19, r1
 3d8:	2c f4       	brge	.+10     	; 0x3e4 <GPIO_voidSetPinDirection+0x130>
 3da:	8c 81       	ldd	r24, Y+4	; 0x04
 3dc:	9d 81       	ldd	r25, Y+5	; 0x05
 3de:	00 97       	sbiw	r24, 0x00	; 0
 3e0:	69 f0       	breq	.+26     	; 0x3fc <GPIO_voidSetPinDirection+0x148>
 3e2:	5f c0       	rjmp	.+190    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
 3e4:	2c 81       	ldd	r18, Y+4	; 0x04
 3e6:	3d 81       	ldd	r19, Y+5	; 0x05
 3e8:	22 30       	cpi	r18, 0x02	; 2
 3ea:	31 05       	cpc	r19, r1
 3ec:	89 f1       	breq	.+98     	; 0x450 <GPIO_voidSetPinDirection+0x19c>
 3ee:	8c 81       	ldd	r24, Y+4	; 0x04
 3f0:	9d 81       	ldd	r25, Y+5	; 0x05
 3f2:	83 30       	cpi	r24, 0x03	; 3
 3f4:	91 05       	cpc	r25, r1
 3f6:	09 f4       	brne	.+2      	; 0x3fa <GPIO_voidSetPinDirection+0x146>
 3f8:	40 c0       	rjmp	.+128    	; 0x47a <GPIO_voidSetPinDirection+0x1c6>
 3fa:	53 c0       	rjmp	.+166    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
		{
			case PORTA :
			CLR_BIT (GPIO_DDRA , pin);
 3fc:	aa e3       	ldi	r26, 0x3A	; 58
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	ea e3       	ldi	r30, 0x3A	; 58
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 2e       	mov	r0, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <GPIO_voidSetPinDirection+0x166>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <GPIO_voidSetPinDirection+0x162>
 41e:	80 95       	com	r24
 420:	84 23       	and	r24, r20
 422:	8c 93       	st	X, r24
 424:	3e c0       	rjmp	.+124    	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTB :
			CLR_BIT (GPIO_DDRB , pin);
 426:	a7 e3       	ldi	r26, 0x37	; 55
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e7 e3       	ldi	r30, 0x37	; 55
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	8a 81       	ldd	r24, Y+2	; 0x02
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 2e       	mov	r0, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <GPIO_voidSetPinDirection+0x190>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <GPIO_voidSetPinDirection+0x18c>
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	8c 93       	st	X, r24
 44e:	29 c0       	rjmp	.+82     	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTC :
			CLR_BIT (GPIO_DDRC , pin);
 450:	a4 e3       	ldi	r26, 0x34	; 52
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	e4 e3       	ldi	r30, 0x34	; 52
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 2e       	mov	r0, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <GPIO_voidSetPinDirection+0x1ba>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <GPIO_voidSetPinDirection+0x1b6>
 472:	80 95       	com	r24
 474:	84 23       	and	r24, r20
 476:	8c 93       	st	X, r24
 478:	14 c0       	rjmp	.+40     	; 0x4a2 <GPIO_voidSetPinDirection+0x1ee>
			break;

			case PORTD :
			CLR_BIT (GPIO_DDRD , pin);
 47a:	a1 e3       	ldi	r26, 0x31	; 49
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e1 e3       	ldi	r30, 0x31	; 49
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	48 2f       	mov	r20, r24
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 2e       	mov	r0, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <GPIO_voidSetPinDirection+0x1e4>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <GPIO_voidSetPinDirection+0x1e0>
 49c:	80 95       	com	r24
 49e:	84 23       	and	r24, r20
 4a0:	8c 93       	st	X, r24
	}
	else
	{
		/* Should not be here */
	}
}
 4a2:	27 96       	adiw	r28, 0x07	; 7
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	08 95       	ret

000004b4 <GPIO_voidSetPortValue>:

void GPIO_voidSetPortValue(u8 port_id , u8 value)
{
 4b4:	df 93       	push	r29
 4b6:	cf 93       	push	r28
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <GPIO_voidSetPortValue+0x6>
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <GPIO_voidSetPortValue+0x8>
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
 4c0:	89 83       	std	Y+1, r24	; 0x01
 4c2:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_id){
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	3c 83       	std	Y+4, r19	; 0x04
 4cc:	2b 83       	std	Y+3, r18	; 0x03
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	9c 81       	ldd	r25, Y+4	; 0x04
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	91 05       	cpc	r25, r1
 4d6:	d1 f0       	breq	.+52     	; 0x50c <GPIO_voidSetPortValue+0x58>
 4d8:	2b 81       	ldd	r18, Y+3	; 0x03
 4da:	3c 81       	ldd	r19, Y+4	; 0x04
 4dc:	22 30       	cpi	r18, 0x02	; 2
 4de:	31 05       	cpc	r19, r1
 4e0:	2c f4       	brge	.+10     	; 0x4ec <GPIO_voidSetPortValue+0x38>
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	9c 81       	ldd	r25, Y+4	; 0x04
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	61 f0       	breq	.+24     	; 0x502 <GPIO_voidSetPortValue+0x4e>
 4ea:	1e c0       	rjmp	.+60     	; 0x528 <GPIO_voidSetPortValue+0x74>
 4ec:	2b 81       	ldd	r18, Y+3	; 0x03
 4ee:	3c 81       	ldd	r19, Y+4	; 0x04
 4f0:	22 30       	cpi	r18, 0x02	; 2
 4f2:	31 05       	cpc	r19, r1
 4f4:	81 f0       	breq	.+32     	; 0x516 <GPIO_voidSetPortValue+0x62>
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	9c 81       	ldd	r25, Y+4	; 0x04
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	91 05       	cpc	r25, r1
 4fe:	81 f0       	breq	.+32     	; 0x520 <GPIO_voidSetPortValue+0x6c>
 500:	13 c0       	rjmp	.+38     	; 0x528 <GPIO_voidSetPortValue+0x74>
		case PORTA :
			GPIO_PORTA = value ;
 502:	eb e3       	ldi	r30, 0x3B	; 59
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	80 83       	st	Z, r24
 50a:	0e c0       	rjmp	.+28     	; 0x528 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTB :
			GPIO_PORTB = value ;
 50c:	e8 e3       	ldi	r30, 0x38	; 56
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	8a 81       	ldd	r24, Y+2	; 0x02
 512:	80 83       	st	Z, r24
 514:	09 c0       	rjmp	.+18     	; 0x528 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTC :
			GPIO_PORTC = value ;
 516:	e5 e3       	ldi	r30, 0x35	; 53
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	80 83       	st	Z, r24
 51e:	04 c0       	rjmp	.+8      	; 0x528 <GPIO_voidSetPortValue+0x74>
			break;

		case PORTD :
			GPIO_PORTD = value ;
 520:	e2 e3       	ldi	r30, 0x32	; 50
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	8a 81       	ldd	r24, Y+2	; 0x02
 526:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	cf 91       	pop	r28
 532:	df 91       	pop	r29
 534:	08 95       	ret

00000536 <GPIO_voidSetPortDirection>:

void GPIO_voidSetPortDirection(u8 port_id , u8 dirc)
{
 536:	df 93       	push	r29
 538:	cf 93       	push	r28
 53a:	00 d0       	rcall	.+0      	; 0x53c <GPIO_voidSetPortDirection+0x6>
 53c:	00 d0       	rcall	.+0      	; 0x53e <GPIO_voidSetPortDirection+0x8>
 53e:	00 d0       	rcall	.+0      	; 0x540 <GPIO_voidSetPortDirection+0xa>
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	89 83       	std	Y+1, r24	; 0x01
 546:	6a 83       	std	Y+2, r22	; 0x02
	if (dirc == OUTPUT)
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	99 f5       	brne	.+102    	; 0x5b4 <GPIO_voidSetPortDirection+0x7e>
	{
		switch (port_id){
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	28 2f       	mov	r18, r24
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	3e 83       	std	Y+6, r19	; 0x06
 556:	2d 83       	std	Y+5, r18	; 0x05
 558:	8d 81       	ldd	r24, Y+5	; 0x05
 55a:	9e 81       	ldd	r25, Y+6	; 0x06
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	91 05       	cpc	r25, r1
 560:	d1 f0       	breq	.+52     	; 0x596 <GPIO_voidSetPortDirection+0x60>
 562:	2d 81       	ldd	r18, Y+5	; 0x05
 564:	3e 81       	ldd	r19, Y+6	; 0x06
 566:	22 30       	cpi	r18, 0x02	; 2
 568:	31 05       	cpc	r19, r1
 56a:	2c f4       	brge	.+10     	; 0x576 <GPIO_voidSetPortDirection+0x40>
 56c:	8d 81       	ldd	r24, Y+5	; 0x05
 56e:	9e 81       	ldd	r25, Y+6	; 0x06
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	61 f0       	breq	.+24     	; 0x58c <GPIO_voidSetPortDirection+0x56>
 574:	50 c0       	rjmp	.+160    	; 0x616 <GPIO_voidSetPortDirection+0xe0>
 576:	2d 81       	ldd	r18, Y+5	; 0x05
 578:	3e 81       	ldd	r19, Y+6	; 0x06
 57a:	22 30       	cpi	r18, 0x02	; 2
 57c:	31 05       	cpc	r19, r1
 57e:	81 f0       	breq	.+32     	; 0x5a0 <GPIO_voidSetPortDirection+0x6a>
 580:	8d 81       	ldd	r24, Y+5	; 0x05
 582:	9e 81       	ldd	r25, Y+6	; 0x06
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	91 05       	cpc	r25, r1
 588:	81 f0       	breq	.+32     	; 0x5aa <GPIO_voidSetPortDirection+0x74>
 58a:	45 c0       	rjmp	.+138    	; 0x616 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 255;
 58c:	ea e3       	ldi	r30, 0x3A	; 58
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	80 83       	st	Z, r24
 594:	40 c0       	rjmp	.+128    	; 0x616 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTB :
				GPIO_DDRB = 255;
 596:	e7 e3       	ldi	r30, 0x37	; 55
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	80 83       	st	Z, r24
 59e:	3b c0       	rjmp	.+118    	; 0x616 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTC :
				GPIO_DDRC = 255;
 5a0:	e4 e3       	ldi	r30, 0x34	; 52
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	80 83       	st	Z, r24
 5a8:	36 c0       	rjmp	.+108    	; 0x616 <GPIO_voidSetPortDirection+0xe0>
				break;
			case PORTD :
				GPIO_DDRD = 255;
 5aa:	e1 e3       	ldi	r30, 0x31	; 49
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	80 83       	st	Z, r24
 5b2:	31 c0       	rjmp	.+98     	; 0x616 <GPIO_voidSetPortDirection+0xe0>
				break;
			default:
				break;
		}
	}
	else if (dirc == INPUT)
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	88 23       	and	r24, r24
 5b8:	71 f5       	brne	.+92     	; 0x616 <GPIO_voidSetPortDirection+0xe0>
	{
		switch (port_id){
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	3c 83       	std	Y+4, r19	; 0x04
 5c2:	2b 83       	std	Y+3, r18	; 0x03
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	9c 81       	ldd	r25, Y+4	; 0x04
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	91 05       	cpc	r25, r1
 5cc:	c9 f0       	breq	.+50     	; 0x600 <GPIO_voidSetPortDirection+0xca>
 5ce:	2b 81       	ldd	r18, Y+3	; 0x03
 5d0:	3c 81       	ldd	r19, Y+4	; 0x04
 5d2:	22 30       	cpi	r18, 0x02	; 2
 5d4:	31 05       	cpc	r19, r1
 5d6:	2c f4       	brge	.+10     	; 0x5e2 <GPIO_voidSetPortDirection+0xac>
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	9c 81       	ldd	r25, Y+4	; 0x04
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	61 f0       	breq	.+24     	; 0x5f8 <GPIO_voidSetPortDirection+0xc2>
 5e0:	1a c0       	rjmp	.+52     	; 0x616 <GPIO_voidSetPortDirection+0xe0>
 5e2:	2b 81       	ldd	r18, Y+3	; 0x03
 5e4:	3c 81       	ldd	r19, Y+4	; 0x04
 5e6:	22 30       	cpi	r18, 0x02	; 2
 5e8:	31 05       	cpc	r19, r1
 5ea:	71 f0       	breq	.+28     	; 0x608 <GPIO_voidSetPortDirection+0xd2>
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	9c 81       	ldd	r25, Y+4	; 0x04
 5f0:	83 30       	cpi	r24, 0x03	; 3
 5f2:	91 05       	cpc	r25, r1
 5f4:	69 f0       	breq	.+26     	; 0x610 <GPIO_voidSetPortDirection+0xda>
 5f6:	0f c0       	rjmp	.+30     	; 0x616 <GPIO_voidSetPortDirection+0xe0>
			case PORTA :
				GPIO_DDRA = 0;
 5f8:	ea e3       	ldi	r30, 0x3A	; 58
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	10 82       	st	Z, r1
 5fe:	0b c0       	rjmp	.+22     	; 0x616 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTB :
				GPIO_DDRB = 0;
 600:	e7 e3       	ldi	r30, 0x37	; 55
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	10 82       	st	Z, r1
 606:	07 c0       	rjmp	.+14     	; 0x616 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTC :
				GPIO_DDRC = 0;
 608:	e4 e3       	ldi	r30, 0x34	; 52
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	10 82       	st	Z, r1
 60e:	03 c0       	rjmp	.+6      	; 0x616 <GPIO_voidSetPortDirection+0xe0>
				break;

			case PORTD :
				GPIO_DDRD = 0;
 610:	e1 e3       	ldi	r30, 0x31	; 49
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	10 82       	st	Z, r1
		}
	}
	else {

	}
}
 616:	26 96       	adiw	r28, 0x06	; 6
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	cf 91       	pop	r28
 624:	df 91       	pop	r29
 626:	08 95       	ret

00000628 <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue(u8 port_id , u8 pin)
{
 628:	df 93       	push	r29
 62a:	cf 93       	push	r28
 62c:	00 d0       	rcall	.+0      	; 0x62e <GPIO_u8GetPinValue+0x6>
 62e:	00 d0       	rcall	.+0      	; 0x630 <GPIO_u8GetPinValue+0x8>
 630:	0f 92       	push	r0
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	8a 83       	std	Y+2, r24	; 0x02
 638:	6b 83       	std	Y+3, r22	; 0x03
	u8 value ;
	switch (port_id)
 63a:	8a 81       	ldd	r24, Y+2	; 0x02
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	3d 83       	std	Y+5, r19	; 0x05
 642:	2c 83       	std	Y+4, r18	; 0x04
 644:	4c 81       	ldd	r20, Y+4	; 0x04
 646:	5d 81       	ldd	r21, Y+5	; 0x05
 648:	41 30       	cpi	r20, 0x01	; 1
 64a:	51 05       	cpc	r21, r1
 64c:	41 f1       	breq	.+80     	; 0x69e <GPIO_u8GetPinValue+0x76>
 64e:	8c 81       	ldd	r24, Y+4	; 0x04
 650:	9d 81       	ldd	r25, Y+5	; 0x05
 652:	82 30       	cpi	r24, 0x02	; 2
 654:	91 05       	cpc	r25, r1
 656:	34 f4       	brge	.+12     	; 0x664 <GPIO_u8GetPinValue+0x3c>
 658:	2c 81       	ldd	r18, Y+4	; 0x04
 65a:	3d 81       	ldd	r19, Y+5	; 0x05
 65c:	21 15       	cp	r18, r1
 65e:	31 05       	cpc	r19, r1
 660:	61 f0       	breq	.+24     	; 0x67a <GPIO_u8GetPinValue+0x52>
 662:	52 c0       	rjmp	.+164    	; 0x708 <GPIO_u8GetPinValue+0xe0>
 664:	4c 81       	ldd	r20, Y+4	; 0x04
 666:	5d 81       	ldd	r21, Y+5	; 0x05
 668:	42 30       	cpi	r20, 0x02	; 2
 66a:	51 05       	cpc	r21, r1
 66c:	51 f1       	breq	.+84     	; 0x6c2 <GPIO_u8GetPinValue+0x9a>
 66e:	8c 81       	ldd	r24, Y+4	; 0x04
 670:	9d 81       	ldd	r25, Y+5	; 0x05
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	91 05       	cpc	r25, r1
 676:	b9 f1       	breq	.+110    	; 0x6e6 <GPIO_u8GetPinValue+0xbe>
 678:	47 c0       	rjmp	.+142    	; 0x708 <GPIO_u8GetPinValue+0xe0>
	{
		case PORTA :
		value = GET_BIT(GPIO_PINA , pin);
 67a:	e9 e3       	ldi	r30, 0x39	; 57
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	8b 81       	ldd	r24, Y+3	; 0x03
 686:	88 2f       	mov	r24, r24
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	a9 01       	movw	r20, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <GPIO_u8GetPinValue+0x6a>
 68e:	55 95       	asr	r21
 690:	47 95       	ror	r20
 692:	8a 95       	dec	r24
 694:	e2 f7       	brpl	.-8      	; 0x68e <GPIO_u8GetPinValue+0x66>
 696:	ca 01       	movw	r24, r20
 698:	81 70       	andi	r24, 0x01	; 1
 69a:	89 83       	std	Y+1, r24	; 0x01
 69c:	35 c0       	rjmp	.+106    	; 0x708 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTB :
		value = GET_BIT(GPIO_PINB , pin);
 69e:	e6 e3       	ldi	r30, 0x36	; 54
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	88 2f       	mov	r24, r24
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	a9 01       	movw	r20, r18
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <GPIO_u8GetPinValue+0x8e>
 6b2:	55 95       	asr	r21
 6b4:	47 95       	ror	r20
 6b6:	8a 95       	dec	r24
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <GPIO_u8GetPinValue+0x8a>
 6ba:	ca 01       	movw	r24, r20
 6bc:	81 70       	andi	r24, 0x01	; 1
 6be:	89 83       	std	Y+1, r24	; 0x01
 6c0:	23 c0       	rjmp	.+70     	; 0x708 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTC :
		value = GET_BIT(GPIO_PINC , pin);
 6c2:	e3 e3       	ldi	r30, 0x33	; 51
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a9 01       	movw	r20, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <GPIO_u8GetPinValue+0xb2>
 6d6:	55 95       	asr	r21
 6d8:	47 95       	ror	r20
 6da:	8a 95       	dec	r24
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <GPIO_u8GetPinValue+0xae>
 6de:	ca 01       	movw	r24, r20
 6e0:	81 70       	andi	r24, 0x01	; 1
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <GPIO_u8GetPinValue+0xe0>
		break;

		case PORTD :
		value = GET_BIT(GPIO_PIND , pin);
 6e6:	e0 e3       	ldi	r30, 0x30	; 48
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	28 2f       	mov	r18, r24
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	88 2f       	mov	r24, r24
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	a9 01       	movw	r20, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <GPIO_u8GetPinValue+0xd6>
 6fa:	55 95       	asr	r21
 6fc:	47 95       	ror	r20
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <GPIO_u8GetPinValue+0xd2>
 702:	ca 01       	movw	r24, r20
 704:	81 70       	andi	r24, 0x01	; 1
 706:	89 83       	std	Y+1, r24	; 0x01
		break;

		default:
		break;
	}
	return value ;
 708:	89 81       	ldd	r24, Y+1	; 0x01
}
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	cf 91       	pop	r28
 716:	df 91       	pop	r29
 718:	08 95       	ret

0000071a <RTOS_voidStart>:
#include "RTOS_Cfg.h"

TaskControlBlock_t TaskBlocksArr[RTOS_TASK_NUM] = {{NULL}};

void RTOS_voidStart (void)
{
 71a:	df 93       	push	r29
 71c:	cf 93       	push	r28
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer and Global interrupt */
	TMR_voidTimer0Init();
 722:	0e 94 53 05 	call	0xaa6	; 0xaa6 <TMR_voidTimer0Init>
	GIE_voidEnable();
 726:	0e 94 3e 00 	call	0x7c	; 0x7c <GIE_voidEnable>

	/* Pass scheduler to ISR */
	TMR_voidTimer0SetCallBack(voidScheduler);
 72a:	8d ea       	ldi	r24, 0xAD	; 173
 72c:	94 e0       	ldi	r25, 0x04	; 4
 72e:	0e 94 88 05 	call	0xb10	; 0xb10 <TMR_voidTimer0SetCallBack>
}
 732:	cf 91       	pop	r28
 734:	df 91       	pop	r29
 736:	08 95       	ret

00000738 <RTOS_u8CreateTask>:

u8 RTOS_u8CreateTask(u8 Cpy_u8Priority ,u16 Cpy_u16InitialDelay , u16 Cpy_u16Periodicity , void (* func)(void))
{
 738:	df 93       	push	r29
 73a:	cf 93       	push	r28
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
 740:	28 97       	sbiw	r28, 0x08	; 8
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	f8 94       	cli
 746:	de bf       	out	0x3e, r29	; 62
 748:	0f be       	out	0x3f, r0	; 63
 74a:	cd bf       	out	0x3d, r28	; 61
 74c:	8a 83       	std	Y+2, r24	; 0x02
 74e:	7c 83       	std	Y+4, r23	; 0x04
 750:	6b 83       	std	Y+3, r22	; 0x03
 752:	5e 83       	std	Y+6, r21	; 0x06
 754:	4d 83       	std	Y+5, r20	; 0x05
 756:	38 87       	std	Y+8, r19	; 0x08
 758:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_err = OK;
 75a:	19 82       	std	Y+1, r1	; 0x01
	if ((Cpy_u8Priority < RTOS_TASK_NUM) && (func != NULL))
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	85 30       	cpi	r24, 0x05	; 5
 760:	08 f0       	brcs	.+2      	; 0x764 <RTOS_u8CreateTask+0x2c>
 762:	46 c0       	rjmp	.+140    	; 0x7f0 <RTOS_u8CreateTask+0xb8>
 764:	8f 81       	ldd	r24, Y+7	; 0x07
 766:	98 85       	ldd	r25, Y+8	; 0x08
 768:	00 97       	sbiw	r24, 0x00	; 0
 76a:	09 f4       	brne	.+2      	; 0x76e <RTOS_u8CreateTask+0x36>
 76c:	41 c0       	rjmp	.+130    	; 0x7f0 <RTOS_u8CreateTask+0xb8>
	{
		TaskBlocksArr[Cpy_u8Priority].periodicity = Cpy_u16Periodicity;
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	88 2f       	mov	r24, r24
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	fc 01       	movw	r30, r24
 782:	e0 5a       	subi	r30, 0xA0	; 160
 784:	ff 4f       	sbci	r31, 0xFF	; 255
 786:	8d 81       	ldd	r24, Y+5	; 0x05
 788:	9e 81       	ldd	r25, Y+6	; 0x06
 78a:	91 83       	std	Z+1, r25	; 0x01
 78c:	80 83       	st	Z, r24
		TaskBlocksArr[Cpy_u8Priority].InitialDelay = Cpy_u16InitialDelay;
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	88 2f       	mov	r24, r24
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	fc 01       	movw	r30, r24
 7a4:	e0 5a       	subi	r30, 0xA0	; 160
 7a6:	ff 4f       	sbci	r31, 0xFF	; 255
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	9c 81       	ldd	r25, Y+4	; 0x04
 7ac:	91 83       	std	Z+1, r25	; 0x01
 7ae:	80 83       	st	Z, r24
		TaskBlocksArr[Cpy_u8Priority].TaskFunc = func ;
 7b0:	8a 81       	ldd	r24, Y+2	; 0x02
 7b2:	88 2f       	mov	r24, r24
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	fc 01       	movw	r30, r24
 7c6:	e0 5a       	subi	r30, 0xA0	; 160
 7c8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ca:	8f 81       	ldd	r24, Y+7	; 0x07
 7cc:	98 85       	ldd	r25, Y+8	; 0x08
 7ce:	91 83       	std	Z+1, r25	; 0x01
 7d0:	80 83       	st	Z, r24
		TaskBlocksArr[Cpy_u8Priority].TaskState = RTOS_TASK_ACTIVE;
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	88 2f       	mov	r24, r24
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	fc 01       	movw	r30, r24
 7e6:	e9 59       	subi	r30, 0x99	; 153
 7e8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	80 83       	st	Z, r24
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <RTOS_u8CreateTask+0xbc>
	}
	else
	{
		local_err = N_OK ;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_err ;
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 7f6:	28 96       	adiw	r28, 0x08	; 8
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	f8 94       	cli
 7fc:	de bf       	out	0x3e, r29	; 62
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	cd bf       	out	0x3d, r28	; 61
 802:	cf 91       	pop	r28
 804:	df 91       	pop	r29
 806:	08 95       	ret

00000808 <RTOS_voidStopTask>:

void RTOS_voidStopTask(u8 Cpy_u8Priority)
{
 808:	df 93       	push	r29
 80a:	cf 93       	push	r28
 80c:	0f 92       	push	r0
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
 812:	89 83       	std	Y+1, r24	; 0x01
	if ((Cpy_u8Priority < RTOS_TASK_NUM) && (TaskBlocksArr[Cpy_u8Priority].TaskFunc != NULL))
 814:	89 81       	ldd	r24, Y+1	; 0x01
 816:	85 30       	cpi	r24, 0x05	; 5
 818:	f0 f4       	brcc	.+60     	; 0x856 <RTOS_voidStopTask+0x4e>
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	88 2f       	mov	r24, r24
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	fc 01       	movw	r30, r24
 830:	e0 5a       	subi	r30, 0xA0	; 160
 832:	ff 4f       	sbci	r31, 0xFF	; 255
 834:	80 81       	ld	r24, Z
 836:	91 81       	ldd	r25, Z+1	; 0x01
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	69 f0       	breq	.+26     	; 0x856 <RTOS_voidStopTask+0x4e>
	{
		TaskBlocksArr[Cpy_u8Priority].TaskState = RTOS_TASK_STOPED ;
 83c:	89 81       	ldd	r24, Y+1	; 0x01
 83e:	88 2f       	mov	r24, r24
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	fc 01       	movw	r30, r24
 850:	e9 59       	subi	r30, 0x99	; 153
 852:	ff 4f       	sbci	r31, 0xFF	; 255
 854:	10 82       	st	Z, r1
	}
}
 856:	0f 90       	pop	r0
 858:	cf 91       	pop	r28
 85a:	df 91       	pop	r29
 85c:	08 95       	ret

0000085e <RTOS_voidResumeTask>:

void RTOS_voidResumeTask(u8 Cpy_u8Priority)
{
 85e:	df 93       	push	r29
 860:	cf 93       	push	r28
 862:	0f 92       	push	r0
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
 868:	89 83       	std	Y+1, r24	; 0x01
	if ((Cpy_u8Priority < RTOS_TASK_NUM) && (TaskBlocksArr[Cpy_u8Priority].TaskFunc != NULL))
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	85 30       	cpi	r24, 0x05	; 5
 86e:	f8 f4       	brcc	.+62     	; 0x8ae <__stack+0x4f>
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	88 2f       	mov	r24, r24
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	01 96       	adiw	r24, 0x01	; 1
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	fc 01       	movw	r30, r24
 886:	e0 5a       	subi	r30, 0xA0	; 160
 888:	ff 4f       	sbci	r31, 0xFF	; 255
 88a:	80 81       	ld	r24, Z
 88c:	91 81       	ldd	r25, Z+1	; 0x01
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	71 f0       	breq	.+28     	; 0x8ae <__stack+0x4f>
	{
		TaskBlocksArr[Cpy_u8Priority].TaskState = RTOS_TASK_ACTIVE ;
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	88 0f       	add	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	88 0f       	add	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	fc 01       	movw	r30, r24
 8a6:	e9 59       	subi	r30, 0x99	; 153
 8a8:	ff 4f       	sbci	r31, 0xFF	; 255
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	80 83       	st	Z, r24
	}
}
 8ae:	0f 90       	pop	r0
 8b0:	cf 91       	pop	r28
 8b2:	df 91       	pop	r29
 8b4:	08 95       	ret

000008b6 <RTOS_voidDispather>:

void RTOS_voidDispather(void)
{
 8b6:	df 93       	push	r29
 8b8:	cf 93       	push	r28
 8ba:	0f 92       	push	r0
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
	/* Check on all the tasks and execute any task with RunMe flag above zero*/
	for (u8 i = 0; i < RTOS_TASK_NUM ; i++)
 8c0:	19 82       	std	Y+1, r1	; 0x01
 8c2:	41 c0       	rjmp	.+130    	; 0x946 <RTOS_voidDispather+0x90>
	{
		if ( (TaskBlocksArr[i].TaskFunc ) && (TaskBlocksArr[i].RunMe == 1))
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	88 2f       	mov	r24, r24
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	fc 01       	movw	r30, r24
 8da:	e0 5a       	subi	r30, 0xA0	; 160
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	80 81       	ld	r24, Z
 8e0:	91 81       	ldd	r25, Z+1	; 0x01
 8e2:	00 97       	sbiw	r24, 0x00	; 0
 8e4:	69 f1       	breq	.+90     	; 0x940 <RTOS_voidDispather+0x8a>
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
 8e8:	88 2f       	mov	r24, r24
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	fc 01       	movw	r30, r24
 8fa:	ea 59       	subi	r30, 0x9A	; 154
 8fc:	ff 4f       	sbci	r31, 0xFF	; 255
 8fe:	80 81       	ld	r24, Z
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	f1 f4       	brne	.+60     	; 0x940 <RTOS_voidDispather+0x8a>
		{
			TaskBlocksArr[i].TaskFunc();
 904:	89 81       	ldd	r24, Y+1	; 0x01
 906:	88 2f       	mov	r24, r24
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	fc 01       	movw	r30, r24
 91a:	e0 5a       	subi	r30, 0xA0	; 160
 91c:	ff 4f       	sbci	r31, 0xFF	; 255
 91e:	01 90       	ld	r0, Z+
 920:	f0 81       	ld	r31, Z
 922:	e0 2d       	mov	r30, r0
 924:	09 95       	icall
			TaskBlocksArr[i].RunMe = 0 ;
 926:	89 81       	ldd	r24, Y+1	; 0x01
 928:	88 2f       	mov	r24, r24
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	fc 01       	movw	r30, r24
 93a:	ea 59       	subi	r30, 0x9A	; 154
 93c:	ff 4f       	sbci	r31, 0xFF	; 255
 93e:	10 82       	st	Z, r1
}

void RTOS_voidDispather(void)
{
	/* Check on all the tasks and execute any task with RunMe flag above zero*/
	for (u8 i = 0; i < RTOS_TASK_NUM ; i++)
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	8f 5f       	subi	r24, 0xFF	; 255
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	85 30       	cpi	r24, 0x05	; 5
 94a:	08 f4       	brcc	.+2      	; 0x94e <RTOS_voidDispather+0x98>
 94c:	bb cf       	rjmp	.-138    	; 0x8c4 <RTOS_voidDispather+0xe>
		else
		{
			/* Should not be here */
		}
	}
	voidSleep();
 94e:	0e 94 44 05 	call	0xa88	; 0xa88 <voidSleep>
}
 952:	0f 90       	pop	r0
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	08 95       	ret

0000095a <voidScheduler>:

static void voidScheduler (void)
{
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	0f 92       	push	r0
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
	/**  Co operative scheduling  **/
	for (u8 i = 0; i < RTOS_TASK_NUM ; i++)
 964:	19 82       	std	Y+1, r1	; 0x01
 966:	88 c0       	rjmp	.+272    	; 0xa78 <voidScheduler+0x11e>
	{
		if ((TaskBlocksArr[i].TaskFunc) && (TaskBlocksArr[i].TaskState == RTOS_TASK_ACTIVE))
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	88 2f       	mov	r24, r24
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	88 0f       	add	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	88 0f       	add	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	fc 01       	movw	r30, r24
 97e:	e0 5a       	subi	r30, 0xA0	; 160
 980:	ff 4f       	sbci	r31, 0xFF	; 255
 982:	80 81       	ld	r24, Z
 984:	91 81       	ldd	r25, Z+1	; 0x01
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	09 f4       	brne	.+2      	; 0x98c <voidScheduler+0x32>
 98a:	73 c0       	rjmp	.+230    	; 0xa72 <voidScheduler+0x118>
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	88 2f       	mov	r24, r24
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	88 0f       	add	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	88 0f       	add	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	fc 01       	movw	r30, r24
 9a0:	e9 59       	subi	r30, 0x99	; 153
 9a2:	ff 4f       	sbci	r31, 0xFF	; 255
 9a4:	80 81       	ld	r24, Z
 9a6:	81 30       	cpi	r24, 0x01	; 1
 9a8:	09 f0       	breq	.+2      	; 0x9ac <voidScheduler+0x52>
 9aa:	63 c0       	rjmp	.+198    	; 0xa72 <voidScheduler+0x118>
		{	
			/* Time of the task has come */
			if ( TaskBlocksArr[i].InitialDelay == 0)
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	88 2f       	mov	r24, r24
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	88 0f       	add	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	fc 01       	movw	r30, r24
 9c2:	e0 5a       	subi	r30, 0xA0	; 160
 9c4:	ff 4f       	sbci	r31, 0xFF	; 255
 9c6:	80 81       	ld	r24, Z
 9c8:	91 81       	ldd	r25, Z+1	; 0x01
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	81 f5       	brne	.+96     	; 0xa2e <voidScheduler+0xd4>
			{
				/* Dispatcher will check this flag in the while */
				TaskBlocksArr[i].RunMe = 1;
 9ce:	89 81       	ldd	r24, Y+1	; 0x01
 9d0:	88 2f       	mov	r24, r24
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	88 0f       	add	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	88 0f       	add	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	88 0f       	add	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	fc 01       	movw	r30, r24
 9e2:	ea 59       	subi	r30, 0x9A	; 154
 9e4:	ff 4f       	sbci	r31, 0xFF	; 255
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	80 83       	st	Z, r24
				
				/* Only if the task periodic will updated the TimerCounter */
				TaskBlocksArr[i].InitialDelay = TaskBlocksArr[i].periodicity - 1 ;
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	48 2f       	mov	r20, r24
 9ee:	50 e0       	ldi	r21, 0x00	; 0
 9f0:	89 81       	ldd	r24, Y+1	; 0x01
 9f2:	88 2f       	mov	r24, r24
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	88 0f       	add	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	fc 01       	movw	r30, r24
 a04:	e0 5a       	subi	r30, 0xA0	; 160
 a06:	ff 4f       	sbci	r31, 0xFF	; 255
 a08:	80 81       	ld	r24, Z
 a0a:	91 81       	ldd	r25, Z+1	; 0x01
 a0c:	9c 01       	movw	r18, r24
 a0e:	21 50       	subi	r18, 0x01	; 1
 a10:	30 40       	sbci	r19, 0x00	; 0
 a12:	ca 01       	movw	r24, r20
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	88 0f       	add	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	fc 01       	movw	r30, r24
 a24:	e0 5a       	subi	r30, 0xA0	; 160
 a26:	ff 4f       	sbci	r31, 0xFF	; 255
 a28:	31 83       	std	Z+1, r19	; 0x01
 a2a:	20 83       	st	Z, r18
 a2c:	22 c0       	rjmp	.+68     	; 0xa72 <voidScheduler+0x118>
			}
			else
			{
				TaskBlocksArr[i].InitialDelay -= 1;
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	48 2f       	mov	r20, r24
 a32:	50 e0       	ldi	r21, 0x00	; 0
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	88 2f       	mov	r24, r24
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	88 0f       	add	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	fc 01       	movw	r30, r24
 a4a:	e0 5a       	subi	r30, 0xA0	; 160
 a4c:	ff 4f       	sbci	r31, 0xFF	; 255
 a4e:	80 81       	ld	r24, Z
 a50:	91 81       	ldd	r25, Z+1	; 0x01
 a52:	9c 01       	movw	r18, r24
 a54:	21 50       	subi	r18, 0x01	; 1
 a56:	30 40       	sbci	r19, 0x00	; 0
 a58:	ca 01       	movw	r24, r20
 a5a:	88 0f       	add	r24, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	88 0f       	add	r24, r24
 a66:	99 1f       	adc	r25, r25
 a68:	fc 01       	movw	r30, r24
 a6a:	e0 5a       	subi	r30, 0xA0	; 160
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	31 83       	std	Z+1, r19	; 0x01
 a70:	20 83       	st	Z, r18
}

static void voidScheduler (void)
{
	/**  Co operative scheduling  **/
	for (u8 i = 0; i < RTOS_TASK_NUM ; i++)
 a72:	89 81       	ldd	r24, Y+1	; 0x01
 a74:	8f 5f       	subi	r24, 0xFF	; 255
 a76:	89 83       	std	Y+1, r24	; 0x01
 a78:	89 81       	ldd	r24, Y+1	; 0x01
 a7a:	85 30       	cpi	r24, 0x05	; 5
 a7c:	08 f4       	brcc	.+2      	; 0xa80 <voidScheduler+0x126>
 a7e:	74 cf       	rjmp	.-280    	; 0x968 <voidScheduler+0xe>
		else
		{
			/* Should not be here */
		}
	}
}
 a80:	0f 90       	pop	r0
 a82:	cf 91       	pop	r28
 a84:	df 91       	pop	r29
 a86:	08 95       	ret

00000a88 <voidSleep>:


static void voidSleep (void)
{
 a88:	df 93       	push	r29
 a8a:	cf 93       	push	r28
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR , MCUCR_SE);
 a90:	a5 e5       	ldi	r26, 0x55	; 85
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	e5 e5       	ldi	r30, 0x55	; 85
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	80 68       	ori	r24, 0x80	; 128
 a9c:	8c 93       	st	X, r24
	__asm__  __volatile__ ("SLEEP" ::);
 a9e:	88 95       	sleep
}
 aa0:	cf 91       	pop	r28
 aa2:	df 91       	pop	r29
 aa4:	08 95       	ret

00000aa6 <TMR_voidTimer0Init>:

void(* OC0_ISR)(void) = NULL ;


void TMR_voidTimer0Init(void)
{
 aa6:	df 93       	push	r29
 aa8:	cf 93       	push	r28
 aaa:	cd b7       	in	r28, 0x3d	; 61
 aac:	de b7       	in	r29, 0x3e	; 62
	/* Enable CTC mode*/
	SET_BIT(TCCR0 , TCCR0_WGM01);
 aae:	a3 e5       	ldi	r26, 0x53	; 83
 ab0:	b0 e0       	ldi	r27, 0x00	; 0
 ab2:	e3 e5       	ldi	r30, 0x53	; 83
 ab4:	f0 e0       	ldi	r31, 0x00	; 0
 ab6:	80 81       	ld	r24, Z
 ab8:	88 60       	ori	r24, 0x08	; 8
 aba:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_WGM00);
 abc:	a3 e5       	ldi	r26, 0x53	; 83
 abe:	b0 e0       	ldi	r27, 0x00	; 0
 ac0:	e3 e5       	ldi	r30, 0x53	; 83
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	8f 7b       	andi	r24, 0xBF	; 191
 ac8:	8c 93       	st	X, r24
	
	/* Init OCR0  With f = 8 MHZ , PS = 64 Compare match every 1 ms*/
	OCR0 = 125 ;
 aca:	ec e5       	ldi	r30, 0x5C	; 92
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	8d e7       	ldi	r24, 0x7D	; 125
 ad0:	80 83       	st	Z, r24
	
	/*Enable Timer Interrupt */
	SET_BIT(TIMSK , TIMSK_OCIE0);
 ad2:	a9 e5       	ldi	r26, 0x59	; 89
 ad4:	b0 e0       	ldi	r27, 0x00	; 0
 ad6:	e9 e5       	ldi	r30, 0x59	; 89
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	80 81       	ld	r24, Z
 adc:	82 60       	ori	r24, 0x02	; 2
 ade:	8c 93       	st	X, r24
	
	/* Select Pre scaler  to 64 */
	SET_BIT(TCCR0 , TCCR0_CS00);
 ae0:	a3 e5       	ldi	r26, 0x53	; 83
 ae2:	b0 e0       	ldi	r27, 0x00	; 0
 ae4:	e3 e5       	ldi	r30, 0x53	; 83
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	80 81       	ld	r24, Z
 aea:	81 60       	ori	r24, 0x01	; 1
 aec:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS01);
 aee:	a3 e5       	ldi	r26, 0x53	; 83
 af0:	b0 e0       	ldi	r27, 0x00	; 0
 af2:	e3 e5       	ldi	r30, 0x53	; 83
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	82 60       	ori	r24, 0x02	; 2
 afa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS02);
 afc:	a3 e5       	ldi	r26, 0x53	; 83
 afe:	b0 e0       	ldi	r27, 0x00	; 0
 b00:	e3 e5       	ldi	r30, 0x53	; 83
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	80 81       	ld	r24, Z
 b06:	8b 7f       	andi	r24, 0xFB	; 251
 b08:	8c 93       	st	X, r24
	
}
 b0a:	cf 91       	pop	r28
 b0c:	df 91       	pop	r29
 b0e:	08 95       	ret

00000b10 <TMR_voidTimer0SetCallBack>:
u8 TMR_voidTimer0SetCallBack(void (* func)(void))
{
 b10:	df 93       	push	r29
 b12:	cf 93       	push	r28
 b14:	00 d0       	rcall	.+0      	; 0xb16 <TMR_voidTimer0SetCallBack+0x6>
 b16:	0f 92       	push	r0
 b18:	cd b7       	in	r28, 0x3d	; 61
 b1a:	de b7       	in	r29, 0x3e	; 62
 b1c:	9b 83       	std	Y+3, r25	; 0x03
 b1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_error = OK;
 b20:	19 82       	std	Y+1, r1	; 0x01
	if (func != NULL)
 b22:	8a 81       	ldd	r24, Y+2	; 0x02
 b24:	9b 81       	ldd	r25, Y+3	; 0x03
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	39 f0       	breq	.+14     	; 0xb38 <TMR_voidTimer0SetCallBack+0x28>
	{
		OC0_ISR = func ;
 b2a:	8a 81       	ldd	r24, Y+2	; 0x02
 b2c:	9b 81       	ldd	r25, Y+3	; 0x03
 b2e:	90 93 89 00 	sts	0x0089, r25
 b32:	80 93 88 00 	sts	0x0088, r24
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <TMR_voidTimer0SetCallBack+0x2c>
	}
	else 
	{
		local_error = N_OK;
 b38:	81 e0       	ldi	r24, 0x01	; 1
 b3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error ;
 b3c:	89 81       	ldd	r24, Y+1	; 0x01
}
 b3e:	0f 90       	pop	r0
 b40:	0f 90       	pop	r0
 b42:	0f 90       	pop	r0
 b44:	cf 91       	pop	r28
 b46:	df 91       	pop	r29
 b48:	08 95       	ret

00000b4a <__vector_10>:

void __vector_10 (void) __attribute__((signal)) ;
void __vector_10 (void)
{
 b4a:	1f 92       	push	r1
 b4c:	0f 92       	push	r0
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	0f 92       	push	r0
 b52:	11 24       	eor	r1, r1
 b54:	2f 93       	push	r18
 b56:	3f 93       	push	r19
 b58:	4f 93       	push	r20
 b5a:	5f 93       	push	r21
 b5c:	6f 93       	push	r22
 b5e:	7f 93       	push	r23
 b60:	8f 93       	push	r24
 b62:	9f 93       	push	r25
 b64:	af 93       	push	r26
 b66:	bf 93       	push	r27
 b68:	ef 93       	push	r30
 b6a:	ff 93       	push	r31
 b6c:	df 93       	push	r29
 b6e:	cf 93       	push	r28
 b70:	cd b7       	in	r28, 0x3d	; 61
 b72:	de b7       	in	r29, 0x3e	; 62
	if (OC0_ISR != NULL)
 b74:	80 91 88 00 	lds	r24, 0x0088
 b78:	90 91 89 00 	lds	r25, 0x0089
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	29 f0       	breq	.+10     	; 0xb8a <__vector_10+0x40>
	{
		OC0_ISR();
 b80:	e0 91 88 00 	lds	r30, 0x0088
 b84:	f0 91 89 00 	lds	r31, 0x0089
 b88:	09 95       	icall
	}

}
 b8a:	cf 91       	pop	r28
 b8c:	df 91       	pop	r29
 b8e:	ff 91       	pop	r31
 b90:	ef 91       	pop	r30
 b92:	bf 91       	pop	r27
 b94:	af 91       	pop	r26
 b96:	9f 91       	pop	r25
 b98:	8f 91       	pop	r24
 b9a:	7f 91       	pop	r23
 b9c:	6f 91       	pop	r22
 b9e:	5f 91       	pop	r21
 ba0:	4f 91       	pop	r20
 ba2:	3f 91       	pop	r19
 ba4:	2f 91       	pop	r18
 ba6:	0f 90       	pop	r0
 ba8:	0f be       	out	0x3f, r0	; 63
 baa:	0f 90       	pop	r0
 bac:	1f 90       	pop	r1
 bae:	18 95       	reti

00000bb0 <main>:
void Task2 (void);
void Task3 (void);
void Task4 (void);

void main ()
{
 bb0:	df 93       	push	r29
 bb2:	cf 93       	push	r28
 bb4:	cd b7       	in	r28, 0x3d	; 61
 bb6:	de b7       	in	r29, 0x3e	; 62
	/* Pins Control pin as output  */
	GPIO_voidSetPinDirection(PORTD , 0 , OUTPUT);
 bb8:	83 e0       	ldi	r24, 0x03	; 3
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	41 e0       	ldi	r20, 0x01	; 1
 bbe:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTD , 1 , OUTPUT);
 bc2:	83 e0       	ldi	r24, 0x03	; 3
 bc4:	61 e0       	ldi	r22, 0x01	; 1
 bc6:	41 e0       	ldi	r20, 0x01	; 1
 bc8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTD , 2 , OUTPUT);
 bcc:	83 e0       	ldi	r24, 0x03	; 3
 bce:	62 e0       	ldi	r22, 0x02	; 2
 bd0:	41 e0       	ldi	r20, 0x01	; 1
 bd2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORTD , 3 , OUTPUT);
 bd6:	83 e0       	ldi	r24, 0x03	; 3
 bd8:	63 e0       	ldi	r22, 0x03	; 3
 bda:	41 e0       	ldi	r20, 0x01	; 1
 bdc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <GPIO_voidSetPinDirection>


	/* Create tasks */
	RTOS_u8CreateTask(0 , 1,200 , Task1 );
 be0:	29 e1       	ldi	r18, 0x19	; 25
 be2:	36 e0       	ldi	r19, 0x06	; 6
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	61 e0       	ldi	r22, 0x01	; 1
 be8:	70 e0       	ldi	r23, 0x00	; 0
 bea:	48 ec       	ldi	r20, 0xC8	; 200
 bec:	50 e0       	ldi	r21, 0x00	; 0
 bee:	0e 94 9c 03 	call	0x738	; 0x738 <RTOS_u8CreateTask>
	RTOS_u8CreateTask(1 , 2,400 , Task2 );
 bf2:	23 e3       	ldi	r18, 0x33	; 51
 bf4:	36 e0       	ldi	r19, 0x06	; 6
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	62 e0       	ldi	r22, 0x02	; 2
 bfa:	70 e0       	ldi	r23, 0x00	; 0
 bfc:	40 e9       	ldi	r20, 0x90	; 144
 bfe:	51 e0       	ldi	r21, 0x01	; 1
 c00:	0e 94 9c 03 	call	0x738	; 0x738 <RTOS_u8CreateTask>
	RTOS_u8CreateTask(2 , 0,800 , Task3 );
 c04:	2d e4       	ldi	r18, 0x4D	; 77
 c06:	36 e0       	ldi	r19, 0x06	; 6
 c08:	82 e0       	ldi	r24, 0x02	; 2
 c0a:	60 e0       	ldi	r22, 0x00	; 0
 c0c:	70 e0       	ldi	r23, 0x00	; 0
 c0e:	40 e2       	ldi	r20, 0x20	; 32
 c10:	53 e0       	ldi	r21, 0x03	; 3
 c12:	0e 94 9c 03 	call	0x738	; 0x738 <RTOS_u8CreateTask>
	RTOS_u8CreateTask(3 , 3,1600 , Task4 );
 c16:	27 e6       	ldi	r18, 0x67	; 103
 c18:	36 e0       	ldi	r19, 0x06	; 6
 c1a:	83 e0       	ldi	r24, 0x03	; 3
 c1c:	63 e0       	ldi	r22, 0x03	; 3
 c1e:	70 e0       	ldi	r23, 0x00	; 0
 c20:	40 e4       	ldi	r20, 0x40	; 64
 c22:	56 e0       	ldi	r21, 0x06	; 6
 c24:	0e 94 9c 03 	call	0x738	; 0x738 <RTOS_u8CreateTask>


	/* Strat RTOS */
	RTOS_voidStart();
 c28:	0e 94 8d 03 	call	0x71a	; 0x71a <RTOS_voidStart>


	while(1)
	{
		RTOS_voidDispather();
 c2c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <RTOS_voidDispather>
 c30:	fd cf       	rjmp	.-6      	; 0xc2c <main+0x7c>

00000c32 <Task1>:
	}

}

void Task1 (void)
{
 c32:	df 93       	push	r29
 c34:	cf 93       	push	r28
 c36:	0f 92       	push	r0
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
	static u8 state = 0 ;
	state = !state ;
 c3c:	80 91 8a 00 	lds	r24, 0x008A
 c40:	19 82       	std	Y+1, r1	; 0x01
 c42:	88 23       	and	r24, r24
 c44:	11 f4       	brne	.+4      	; 0xc4a <Task1+0x18>
 c46:	81 e0       	ldi	r24, 0x01	; 1
 c48:	89 83       	std	Y+1, r24	; 0x01
 c4a:	89 81       	ldd	r24, Y+1	; 0x01
 c4c:	80 93 8a 00 	sts	0x008A, r24
	GPIO_voidSetPinValue(PORTD , PIN0 , state);
 c50:	90 91 8a 00 	lds	r25, 0x008A
 c54:	83 e0       	ldi	r24, 0x03	; 3
 c56:	60 e0       	ldi	r22, 0x00	; 0
 c58:	49 2f       	mov	r20, r25
 c5a:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_voidSetPinValue>
}
 c5e:	0f 90       	pop	r0
 c60:	cf 91       	pop	r28
 c62:	df 91       	pop	r29
 c64:	08 95       	ret

00000c66 <Task2>:

void Task2 (void)
{
 c66:	df 93       	push	r29
 c68:	cf 93       	push	r28
 c6a:	0f 92       	push	r0
 c6c:	cd b7       	in	r28, 0x3d	; 61
 c6e:	de b7       	in	r29, 0x3e	; 62
	static u8 state = 0 ;
	state = !state ;
 c70:	80 91 8b 00 	lds	r24, 0x008B
 c74:	19 82       	std	Y+1, r1	; 0x01
 c76:	88 23       	and	r24, r24
 c78:	11 f4       	brne	.+4      	; 0xc7e <Task2+0x18>
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	89 83       	std	Y+1, r24	; 0x01
 c7e:	89 81       	ldd	r24, Y+1	; 0x01
 c80:	80 93 8b 00 	sts	0x008B, r24
	GPIO_voidSetPinValue(PORTD , PIN1 , state);
 c84:	90 91 8b 00 	lds	r25, 0x008B
 c88:	83 e0       	ldi	r24, 0x03	; 3
 c8a:	61 e0       	ldi	r22, 0x01	; 1
 c8c:	49 2f       	mov	r20, r25
 c8e:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_voidSetPinValue>
}
 c92:	0f 90       	pop	r0
 c94:	cf 91       	pop	r28
 c96:	df 91       	pop	r29
 c98:	08 95       	ret

00000c9a <Task3>:

void Task3 (void)
{
 c9a:	df 93       	push	r29
 c9c:	cf 93       	push	r28
 c9e:	0f 92       	push	r0
 ca0:	cd b7       	in	r28, 0x3d	; 61
 ca2:	de b7       	in	r29, 0x3e	; 62
	static u8 state = 0 ;
	state = !state ;
 ca4:	80 91 8c 00 	lds	r24, 0x008C
 ca8:	19 82       	std	Y+1, r1	; 0x01
 caa:	88 23       	and	r24, r24
 cac:	11 f4       	brne	.+4      	; 0xcb2 <Task3+0x18>
 cae:	81 e0       	ldi	r24, 0x01	; 1
 cb0:	89 83       	std	Y+1, r24	; 0x01
 cb2:	89 81       	ldd	r24, Y+1	; 0x01
 cb4:	80 93 8c 00 	sts	0x008C, r24
	GPIO_voidSetPinValue(PORTD , PIN2 , state);
 cb8:	90 91 8c 00 	lds	r25, 0x008C
 cbc:	83 e0       	ldi	r24, 0x03	; 3
 cbe:	62 e0       	ldi	r22, 0x02	; 2
 cc0:	49 2f       	mov	r20, r25
 cc2:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_voidSetPinValue>
}
 cc6:	0f 90       	pop	r0
 cc8:	cf 91       	pop	r28
 cca:	df 91       	pop	r29
 ccc:	08 95       	ret

00000cce <Task4>:

void Task4 (void)
{
 cce:	df 93       	push	r29
 cd0:	cf 93       	push	r28
 cd2:	0f 92       	push	r0
 cd4:	cd b7       	in	r28, 0x3d	; 61
 cd6:	de b7       	in	r29, 0x3e	; 62
	static u8 state = 0 ;
	state = !state ;
 cd8:	80 91 8d 00 	lds	r24, 0x008D
 cdc:	19 82       	std	Y+1, r1	; 0x01
 cde:	88 23       	and	r24, r24
 ce0:	11 f4       	brne	.+4      	; 0xce6 <Task4+0x18>
 ce2:	81 e0       	ldi	r24, 0x01	; 1
 ce4:	89 83       	std	Y+1, r24	; 0x01
 ce6:	89 81       	ldd	r24, Y+1	; 0x01
 ce8:	80 93 8d 00 	sts	0x008D, r24
	GPIO_voidSetPinValue(PORTD , PIN3 , state);
 cec:	90 91 8d 00 	lds	r25, 0x008D
 cf0:	83 e0       	ldi	r24, 0x03	; 3
 cf2:	63 e0       	ldi	r22, 0x03	; 3
 cf4:	49 2f       	mov	r20, r25
 cf6:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_voidSetPinValue>
}
 cfa:	0f 90       	pop	r0
 cfc:	cf 91       	pop	r28
 cfe:	df 91       	pop	r29
 d00:	08 95       	ret

00000d02 <_exit>:
 d02:	f8 94       	cli

00000d04 <__stop_program>:
 d04:	ff cf       	rjmp	.-2      	; 0xd04 <__stop_program>
